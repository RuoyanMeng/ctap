{"version":3,"sources":["data/CTAP_chanlocs.js","Components/BasicInfo.js","Components/LinearTemplate.js","Components/Stepper.js","Reducer.js","Components/ContextProvider.js","data/CTAP_funcs.js","Components/FuncsSettingForm.js","Components/LinearPipesForm.js","Components/BranchPipesForm.js","Components/BranchTemplate.js","Components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["CTAP_chanlocs","useStyles","makeStyles","theme","root","margin","spacing","width","words","textAlign","BasicInfo","inputValue","setBasicInfoInput","basicInfoInputCheck","setBasicInfoInputCheck","classes","useState","eegChanloc","value","setValue","useEffect","handleInput","event","target","name","handleChange","checked","handleHydraChange","e","console","log","p","HydraOptionA","HydraOptionB","className","noValidate","autoComplete","Container","maxWidth","FormControlLabel","control","Checkbox","checkedLinear","onChange","label","checkedBranch","checkedHYDRA","TextField","error","checkHydraTimeRange","id","type","helperText","variant","checkHydraCleanSeed","pipelineName","projectRoot","sbj_filt","eegType","Autocomplete","newValue","options","renderInput","params","eegReference","eegVeogChannelNames","eegHeogChannelNames","LinearTemplate","basicInfo","inputFields","ctap_args","Array","stepSetsArray","HYDRA_presetting","push","forEach","inputField","index","funcs","funcsSettings","funcsSetting","funcName","funcN","slice","length","funcP","stepID","join","QontoConnector","withStyles","alternativeLabel","top","left","right","active","borderColor","completed","line","borderTopWidth","borderRadius","StepConnector","useQontoStepIconStyles","color","display","height","alignItems","circle","backgroundColor","zIndex","fontSize","QontoStepIcon","props","clsx","button","marginRight","instructions","marginTop","marginBottom","Steppers","activeStep","handleReset","handleBack","handleNext","steps","Stepper","connector","map","Step","StepLabel","StepIconComponent","Typography","Button","onClick","disabled","initialInputState","uuidv4","subf_srcid","subfID","fid","Reducer","state","action","data","Context","createContext","ContextProvider","children","useReducer","inputState","dispatch","Provider","CTAP_funcs","FuncsSettingForm","indexm","mid","useContext","inputStates","React","handleInputChange","newV","values","findIndex","x","newInputStates","i","IconButton","indexf","splice","handleRemoveFuncFields","functionName","functionP","handleAddFuncFields","LinearPipesForm","handleLinearPipesInput","BranchPipesForm","BranchTemplate","pipeArr","branchSrcInfo","subfuncs","srcid","subpipe","concat","subfunc","formControl","minWidth","selectEmpty","Main","setActiveStep","downloadLink","setDownloadLink","stepNum","setStepNum","isReadyDownload","setIsReadyDownload","newState","basicInfoInput","localStorage","getItem","JSON","parse","setItem","stringify","makeTextFile","list","Blob","window","URL","revokeObjectURL","createObjectURL","handleSubmit","a","downloadlink","newInputFields","FormControl","InputLabel","Select","native","form","pop","handleChangeStepSets","inputProps","download","href","downloadButton","prevActiveStep","result","newS","Object","entries","key","every","inputCheck","alert","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f5ff923e.chunk.js","sourcesContent":["export const CTAP_chanlocs = [\n    'chanlocs128_biosemi.elp',\n    'chanlocs128_biosemi_withEOG.elp',\n    'chanlocs128_cent.elp',\n    'chanlocs128_pist.elp',\n    'chanlocs160_biosemi.elp',\n    'chanlocs16_biosemi.elp',\n    'chanlocs16_biosemi_withEOG.elp',\n    'chanlocs256_biosemi.elp',\n    'chanlocs256_biosemi_withEOG.elp',\n    'chanlocs32_biosemi.elp',\n    'chanlocs64_biosemi.elp',\n    'chanlocs64_biosemi_withEOG.elp',\n    'channel_locations_acticap_32.ced'\n]\n","import React, { useState, useEffect } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Container from '@material-ui/core/Container';\nimport { CTAP_chanlocs } from '../data/CTAP_chanlocs'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '35ch',\n        },\n    },\n    words: {\n        textAlign: \"center\",\n    }\n\n}));\n\n\n\nconst BasicInfo = ({ inputValue, setBasicInfoInput, basicInfoInputCheck, setBasicInfoInputCheck }) => {\n    let classes = useStyles();\n    const [value, setValue] = useState(inputValue.eegChanloc);\n\n    useEffect(() => {\n        setBasicInfoInput({ ...inputValue, eegChanloc: value });\n        setBasicInfoInputCheck({...basicInfoInputCheck, eegChanloc:false});\n    }, [value]);\n\n    //handle input change\n    const handleInput = event => {\n        const { name, value } = event.target;\n        setBasicInfoInput({ ...inputValue, [name]: value });\n        setBasicInfoInputCheck({...basicInfoInputCheck, [name]:false});\n    };\n\n    const handleChange = (event) => {\n        if (event.target.name === 'checkedLinear') {\n            setBasicInfoInput({ ...inputValue, 'checkedLinear': event.target.checked, 'checkedBranch': !event.target.checked });\n        } else if (event.target.name === 'checkedBranch') {\n            setBasicInfoInput({ ...inputValue, 'checkedBranch': event.target.checked, 'checkedLinear': !event.target.checked });\n        } else {\n            setBasicInfoInput({ ...inputValue, [event.target.name]: event.target.checked });\n        }\n    };\n\n    const handleHydraChange = (e) => {\n        console.log(e.target.name)\n        if (e.target.name === 'checkTimeRange') {\n            let p = {};\n            p = {...p, HydraOptionA: e.target.checked, HydraOptionB: !e.target.checked};\n            if (e.target.checked) {\n                console.log(e.target.checked);\n                p = {...p, 'checkHydraCleanSeed': ''};\n                setBasicInfoInputCheck({...basicInfoInputCheck, 'checkHydraCleanSeed':false})\n            }\n            setBasicInfoInput({ ...inputValue, ...p});\n        } else {\n            let p = {};\n            p = {...p, HydraOptionB: e.target.checked, HydraOptionA:!e.target.checked};\n            //setBasicInfoInput({ ...inputValue, HydraOptionB: e.target.checked, HydraOptionA:!e.target.checked });\n            if (e.target.checked) {\n                console.log(inputValue)\n                p = {...p, 'checkHydraTimeRange': ''}\n                setBasicInfoInputCheck({...basicInfoInputCheck, 'checkHydraTimeRange':false})\n            }\n            setBasicInfoInput({ ...inputValue, ...p});\n\n        }\n    }\n\n    // console.log(basicInfoInputCheck)\n    // console.log(inputValue)\n    return (\n        <form className={classes.root} noValidate autoComplete=\"off\">\n            <Container maxWidth=\"sm\">\n                <h4 >What type of pipeline* you would like to generate?</h4>\n                <FormControlLabel\n                    control={<Checkbox checked={inputValue.checkedLinear} onChange={handleChange} name=\"checkedLinear\" />}\n                    label=\"Linear Pipeline\"\n                />\n                <FormControlLabel\n                    control={<Checkbox checked={inputValue.checkedBranch} onChange={handleChange} name=\"checkedBranch\" />}\n                    label=\"Branch Pipeline\"\n                />\n                <h5 className={classes.words}>* linear pipeline using different setpSets to group CTAP functions, the processing sequence depends on setpSets order. Branch pipeline generates sub-functions including predefined executable CTAP functions, which provides a more clear and flexible modular way to group functions. </h5>\n                <div>\n                    <FormControlLabel\n                        control={<Checkbox checked={inputValue.checkedHYDRA} onChange={handleChange} name=\"checkedHYDRA\" />}\n                        label=\"Implementing HYDRA for artifacts parameter optimization or not?\"\n                    />\n                    {inputValue.checkedHYDRA ? <div>\n                        <div>\n                            <FormControlLabel\n                                control={<Checkbox checked={inputValue.HydraOptionA} onChange={handleHydraChange} name=\"checkTimeRange\" />}\n                                label=\"Provide clean data time-range\"\n                            />\n                            <FormControlLabel\n                                control={<Checkbox checked={inputValue.HydraOptionB} onChange={handleHydraChange} name=\"checkCleanSeed\" />}\n                                label=\"Provide clean seed data\"\n                            />\n                            {inputValue.HydraOptionA ?\n                                <div>\n                                    <TextField\n                                        error={basicInfoInputCheck.checkHydraTimeRange}\n                                        id=\"checkHydraTimeRange\"\n                                        name=\"checkHydraTimeRange\"\n                                        label=\"Time Range\"\n                                        value={inputValue.checkHydraTimeRange}\n                                        onChange={e => handleInput(e)}\n                                        type=\"text\"\n                                        helperText={basicInfoInputCheck.checkHydraTimeRange ? 'The field cannot be empty. Please enter a value':\"Set clean segment time range [start end] in seconds from test data\"}\n                                        variant=\"outlined\"\n                                    />\n                                </div> : null}\n\n                            {inputValue.HydraOptionB ?\n                                <div>\n                                    <TextField\n                                        error={basicInfoInputCheck.checkHydraCleanSeed}\n                                        id=\"checkHydraTimeRange\"\n                                        name=\"checkHydraCleanSeed\"\n                                        label=\"Seed Data Name\"\n                                        value={inputValue.checkHydraCleanSeed}\n                                        onChange={e => handleInput(e)}\n                                        type=\"text\"\n                                        helperText={basicInfoInputCheck.checkHydraCleanSeed ? 'The field cannot be empty. Please enter a value':\"Name of the clean seed data file extract from test data\"}\n                                        variant=\"outlined\"\n                                    />\n\n                                </div> : null}\n\n                        </div>\n\n                    </div> : null}\n                    <hr></hr>\n\n                </div>\n\n            </Container>\n            <div>\n                <h4>Basic setting begin</h4>\n                <TextField\n                    error={basicInfoInputCheck.pipelineName}\n                    id=\"pipelineName\"\n                    name=\"pipelineName\"\n                    label=\"Pipeline Name\"\n                    value={inputValue.pipelineName}\n                    onChange={e => handleInput(e)}\n                    type=\"text\"\n                    helperText={basicInfoInputCheck.pipelineName ? 'The field cannot be empty. Please enter a value':\"Name a folder which contains outputs of pipes\"}\n                    variant=\"outlined\"\n                />\n            </div>\n            <div>\n                <TextField\n                    error={basicInfoInputCheck.projectRoot}\n                    id=\"projectRoot\"\n                    name=\"projectRoot\"\n                    label=\"Project Root\"\n                    value={inputValue.projectRoot}\n                    onChange={e => handleInput(e)}\n                    type=\"text\"\n                    helperText={basicInfoInputCheck.projectRoot ? 'The field cannot be empty. Please enter a value':\"The root directory of the current analysis.\"}\n                    variant=\"outlined\"\n                />\n            </div>\n            <div>\n                <TextField\n                    error={basicInfoInputCheck.sbj_filt}\n                    id=\"sbj_filt\"\n                    name=\"sbj_filt\"\n                    label=\"EEG File Name Sequence\"\n                    value={inputValue.sbj_filt}\n                    onChange={e => handleInput(e)}\n                    type=\"text\"\n                    helperText={basicInfoInputCheck.sbj_filt ? 'The field cannot be empty. Please enter a value':\"The unique sequence number in EEG dataset name(sbj_filt)\"}\n                    variant=\"outlined\"\n                />\n            </div>\n            <div>\n                <TextField\n                    error={basicInfoInputCheck.eegType}\n                    id=\"eegType\"\n                    name=\"eegType\"\n                    label=\"EEG Data Type\"\n                    value={inputValue.eegType}\n                    onChange={e => handleInput(e)}\n                    type=\"text\"\n                    helperText={basicInfoInputCheck.eegType ? 'The field cannot be empty. Please enter a value':\"EEG Data Type, eg, *.set/*.bdf\"}\n                    variant=\"outlined\"\n                />\n            </div>\n            <div>\n                <Autocomplete\n                    value={inputValue.eegChanloc}\n                    onChange={(event, newValue) => {\n                        setValue(newValue);\n                    }}\n                    id=\"controllable-states-demo\"\n                    options={CTAP_chanlocs}\n                    renderInput={(params) => <TextField\n                        {...params}\n                        error={basicInfoInputCheck.eegChanloc}\n                        helperText={basicInfoInputCheck.eegChanloc ? 'The field cannot be empty. Please enter a value':\"Channel Location of testing EEG data \"}\n                        label=\"EEG Data Channel Location\"\n                        variant=\"outlined\" />}\n                />\n            </div>\n            <div>\n                <TextField\n                    error={basicInfoInputCheck.eegReference}\n                    id=\"eegReference\"\n                    name=\"eegReference\"\n                    label=\"EEG Data Reference Channel\"\n                    value={inputValue.eegReference}\n                    onChange={e => handleInput(e)}\n                    type=\"text\"\n                    helperText={basicInfoInputCheck.eegReference ? 'The field cannot be empty. Please enter a value':\"Reference channel of testing EEG data,  eg, {'L_MASTOID' 'R_MASTOID'}\"}\n                    variant=\"outlined\"\n                />\n            </div>\n            <div>\n                <TextField\n                    error={basicInfoInputCheck.eegVeogChannelNames}\n                    id=\"eegVeogChannelNames\"\n                    name=\"eegVeogChannelNames\"\n                    label=\"VEOG Channel Names\"\n                    value={inputValue.eegVeogChannelNames}\n                    onChange={e => handleInput(e)}\n                    type=\"text\"\n                    helperText={basicInfoInputCheck.eegVeogChannelNames ? 'The field cannot be empty. Please enter a value':\"VEOG Channel Names of testing EEG data, required if performing blinks detection, eg, {'VEOG1','VEOG2'}\"}\n                    variant=\"outlined\"\n                />\n            </div>\n            <div>\n                <TextField\n                    error={basicInfoInputCheck.eegHeogChannelNames}\n                    id=\"eegHeogChannelNames\"\n                    name=\"eegHeogChannelNames\"\n                    label=\"HEOG Channel Names\"\n                    value={inputValue.eegHeogChannelNames}\n                    onChange={e => handleInput(e)}\n                    type=\"text\"\n                    helperText={basicInfoInputCheck.eegHeogChannelNames ? 'The field cannot be empty. Please enter a value':\"HEOG Channel Names of testing EEG data, required if performing blinks detection, eg, {'HEOG1','HEOG2'}\"}\n                    variant=\"outlined\"\n                />\n            </div>\n        </form>\n    )\n};\n\nexport default BasicInfo;\n","\nconst LinearTemplate = (basicInfo, inputFields) => {\n\n    let ctap_args = new Array([]);\n    let stepSetsArray = new Array([]);\n    let HYDRA_presetting = new Array([]);\n\n    if (basicInfo.checkedHYDRA) {\n        HYDRA_presetting.push(`HYDRA = true;`);\n        HYDRA_presetting.push(`PARAM = param_sweep_setup(project_dir);`);\n        HYDRA_presetting.push(`Cfg.HYDRA.ifapply = HYDRA;`);\n        HYDRA_presetting.push(`Cfg.HYDRA.chanloc = '${basicInfo.eegChanloc}';`);\n        HYDRA_presetting.push(`Cfg.HYDRA.PARAM = PARAM;`);\n        HYDRA_presetting.push(`Cfg.HYDRA.FULL_CLEAN_SEED = false;`);\n        if (basicInfo.checkHydraTimeRange && !basicInfo.checkHydraCleanSeed) {\n            HYDRA_presetting.push(`Cfg.HYDRA.provide_seed_timerange = true;`)\n            HYDRA_presetting.push(`Cfg.HYDRA.cleanseed_timerange = ${basicInfo.checkHydraTimeRange};`);\n        } else if (basicInfo.checkHydraCleanSeed && !basicInfo.checkHydraTimeRange) {\n            HYDRA_presetting.push(`Cfg.HYDRA.provide_seed_timerange = false;`)\n            HYDRA_presetting.push(`Cfg.HYDRA.seed_fname = ${basicInfo.checkHydraCleanSeed};`);\n        }\n    }\n\n    inputFields.forEach((inputField, index) => {\n        let funcs = ``;\n        inputField.funcsSettings.forEach(funcsSetting => {\n            funcs = funcs + `@${funcsSetting.funcName}, `;\n            let funcN = funcsSetting.funcName;\n            if(funcN){\n                funcN = funcN.slice(5,funcN.length)\n            }\n            ctap_args.push(`out.${funcN}=struct(${funcsSetting.funcP})`)\n        });\n        stepSetsArray.push(`stepSet(${index + 1}).id = [num2str(${index + 1}), '${inputField.stepID}'];`);\n        stepSetsArray.push(`stepSet(${index + 1}).funH{${funcs}};`);\n    })\n\n\n    return new Array(\n        `pipeline_name = '${basicInfo.pipelineName}';`,\n        \"FILE_ROOT = mfilename('fullpath');\",\n        `reporoot = FILE_ROOT(1:strfind(FILE_ROOT, fullfile('ctap', 'templates', '${basicInfo.projectRoot}', 'ctap_linear_template')) - 1);`,\n        `project_dir = FILE_ROOT(1:strfind(FILE_ROOT, fullfile('ctap_linear_template')) - 1);`,\n        `data_dir = append(reporoot,'ctap/data/test_data');`,\n        `Cfg.env.paths = cfg_create_paths(project_dir, pipeline_name, {''}, 1);`,\n        `Cfg.eeg.chanlocs = '${basicInfo.eegChanloc}';`,\n        `Cfg.eeg.reference = ${basicInfo.eegReference};`,\n        `Cfg.eeg.veogChannelNames = ${basicInfo.eegVeogChannelNames};`,\n        `Cfg.eeg.heogChannelNames = ${basicInfo.eegHeogChannelNames};`,\n        `Cfg.grfx.on = false;`,\n        `Cfg.MC = get_meas_cfg_MC(Cfg, data_dir, 'eeg_ext', '${basicInfo.eegType}', 'sbj_filt', ${basicInfo.sbj_filt});`,\n        `${HYDRA_presetting.join('\\n')}`,\n        `clear Pipe;`,\n        `${stepSetsArray.join('\\n')}`,\n        `${[ctap_args.join('\\n')]}`,\n        `Cfg.pipe.stepSets = stepSet;`,\n        `Cfg.pipe.runSets = {stepSet(1).id};`,\n        `Cfg = ctap_auto_config(Cfg, out);`,\n        `%% Run the pipe`,\n        `CTAP_pipeline_looper(Cfg, 'debug', DEBUG, 'overwrite', true);`,\n        `clear i stepSet Filt ctap_args`\n\n    )\n\n};\n\nexport default LinearTemplate;\n","import { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport StepConnector from \"@material-ui/core/StepConnector\";\nimport Button from '@material-ui/core/Button';\nimport clsx from \"clsx\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Check from \"@material-ui/icons/Check\";\nimport Typography from \"@material-ui/core/Typography\";\n\n\nexport const QontoConnector = withStyles({\n    alternativeLabel: {\n        top: 10,\n        left: \"calc(-50% + 16px)\",\n        right: \"calc(50% + 16px)\"\n    },\n    active: {\n        \"& $line\": {\n            borderColor: \"#784af4\"\n        }\n    },\n    completed: {\n        \"& $line\": {\n            borderColor: \"#784af4\"\n        }\n    },\n    line: {\n        borderColor: \"#eaeaf0\",\n        borderTopWidth: 3,\n        borderRadius: 1\n    }\n})(StepConnector);\n\nexport const useQontoStepIconStyles = makeStyles({\n    root: {\n        color: \"#eaeaf0\",\n        display: \"flex\",\n        height: 22,\n        alignItems: \"center\"\n    },\n    active: {\n        color: \"#784af4\"\n    },\n    circle: {\n        width: 8,\n        height: 8,\n        borderRadius: \"50%\",\n        backgroundColor: \"currentColor\"\n    },\n    completed: {\n        color: \"#784af4\",\n        zIndex: 1,\n        fontSize: 18\n    }\n});\n\nfunction QontoStepIcon(props) {\n    const classes = useQontoStepIconStyles();\n    const { active, completed } = props;\n\n    return (\n        <div\n            className={clsx(classes.root, {\n                [classes.active]: active\n            })}\n        >\n            {completed ? (\n                <Check className={classes.completed} />\n            ) : (\n                    <div className={classes.circle} />\n                )}\n        </div>\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: \"100%\"\n    },\n    button: {\n        marginRight: theme.spacing(1)\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1)\n    }\n}));\n\nfunction getSteps() {\n    return [\"Basic settings\", \"Pipe config\", \"Review and download\"];\n}\n\nconst Steppers = ({activeStep, handleReset, handleBack, handleNext}) =>{\n    const classes = useStyles();\n    const steps = getSteps();\n\n    return (\n        <div className={classes.root}>\n            <Stepper\n                alternativeLabel\n                activeStep={activeStep}\n                connector={<QontoConnector />}\n            >\n                {steps.map((label) => (\n                    <Step key={label}>\n                        <StepLabel StepIconComponent={QontoStepIcon}>{label}</StepLabel>\n                    </Step>\n                ))}\n            </Stepper>\n\n            <div>\n                {activeStep === steps.length ? (\n                    <div>\n                        <Typography className={classes.instructions}>\n                            All steps completed - you&apos;re finished\n                        </Typography>\n                        <Button onClick={handleReset} className={classes.button}>\n                            Reset\n                        </Button>\n                    </div>\n                ) : (\n                        <div>\n                            <div>\n                                <Button\n                                    disabled={activeStep === 0}\n                                    onClick={handleBack}\n                                    className={classes.button}\n                                >\n                                    Back\n                                </Button>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={handleNext}\n                                    className={classes.button}\n                                >\n                                    {activeStep === steps.length - 1 ? \"Finish\" : \"Next\"}\n                                </Button>\n                            </div>\n                        </div>\n                    )}\n            </div>\n        </div>\n    );\n}\n\nexport default Steppers;","import { v4 as uuidv4 } from 'uuid';\nexport const initialInputState = [{ id: uuidv4(), subf_srcid: '', subfID: '', stepID: '', funcsSettings: [{ fid: uuidv4(), funcName: '', funcP: '' }] }];\n\nexport const Reducer = (state, action) => {\n    switch (action.type) {\n        case 'UPDATE_STEPSETS': {\n            return action.data\n        }\n        default:\n            return state;\n\n\n    }\n\n};\n\n","import React, { useReducer, createContext} from \"react\";\nimport { initialInputState, Reducer } from \"../Reducer.js\";\n\nconst ContextProvider = ({children}) =>{\n    const [inputState, dispatch] = useReducer(Reducer, initialInputState);\n    return (\n        <Context.Provider value={[inputState, dispatch]}>\n            {children}\n        </Context.Provider>\n    )\n}\nexport const Context = createContext(initialInputState);\nexport default ContextProvider","export const CTAP_funcs = [\n    'CTAP_load_data',\n    'CTAP_load_chanlocs',\n    'CTAP_reref_data',\n    'CTAP_blink2event',\n    'CTAP_peek_data',\n    'CTAP_fir_filter',\n    'CTAP_run_ica',\n    'CTAP_detect_bad_comps',\n    'CTAP_reject_data',\n    'CTAP_detect_bad_channels',\n    'CTAP_interp_chan',\n    'CTAP_detect_bad_segments'\n]","import React, { useContext } from \"react\";\n\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nimport { Context } from './ContextProvider'\nimport { CTAP_funcs } from '../data/CTAP_funcs'\n\nconst FuncsSettingForm = ({ indexm, funcsSettings, classes, mid }) => {\n    const [inputStates, dispatch] = useContext(Context);\n    const [value, setValue] = React.useState(null);\n\n    const handleInputChange = (id, name, newV) => {\n        const values = [...inputStates];\n        let index = values.findIndex(x => x.id === mid);\n        const newInputStates = values[index].funcsSettings.map(i => {\n            if (id === i.fid) {\n                i[name] = newV\n            }\n            return i;\n        })\n        values[index].funcsSettings = newInputStates;\n        dispatch({ type: 'UPDATE_STEPSETS', data: values })\n    }\n\n    const handleAddFuncFields = () =>{\n        const values = [...inputStates];\n        let index = values.findIndex(x => x.id === mid);\n        values[index].funcsSettings.push({ fid: uuidv4(), functionName: '', functionP: '' });\n        dispatch({ type: 'UPDATE_STEPSETS', data: values })\n    }\n\n    const handleRemoveFuncFields = (id) =>{\n        const values = [...inputStates];\n        let index = values.findIndex(x => x.id === mid);\n        let indexf = values[index].funcsSettings.findIndex(x => x.fid === id);\n        values[index].funcsSettings.splice(indexf, 1);\n        dispatch({ type: 'UPDATE_STEPSETS', data: values })\n    }\n\n    return (\n        <form className={classes.root}>\n            {funcsSettings.map((funcsSetting, index) => (\n                <div key={funcsSetting.fid}>\n                    <Autocomplete\n                        id={'funcName'+index}\n                        value = {inputStates[indexm].funcsSettings[index].funcName}\n                        onChange={(event, newValue) => {\n                            setValue(newValue);\n                            handleInputChange(funcsSetting.fid, 'funcName', newValue);\n                        }}\n                        id=\"controllable-states-demo\"\n                        options={CTAP_funcs}\n                        renderInput={(params) => <TextField {...params} label=\"Function Name\" variant=\"outlined\" />}\n                    />\n                    <TextField\n                        id = {\"funcP\"+index}\n                        name=\"funcP\"\n                        label=\"Function Parameters\"\n                        variant=\"filled\"\n                        value = {inputStates[indexm].funcsSettings[index].funcP}\n                        helperText=\"check docs for parameters supported for each func, input in 'pName', p, eg.('method', 'fastica', 'overwrite', true). All the string input need single-quote:'input' \"\n                        onChange={event => handleInputChange(funcsSetting.fid, event.target.name, event.target.value)}\n                    />\n                    <IconButton disabled={funcsSettings.length === 1} onClick={() => handleRemoveFuncFields(funcsSetting.fid)}>\n                        <RemoveIcon />\n                    </IconButton>\n                    <IconButton onClick={() => handleAddFuncFields()}>\n                        <AddIcon />\n                    </IconButton>\n                </div>\n            ))}\n        </form>\n\n    );\n}\n\nexport default FuncsSettingForm;","import React, { useContext } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport FuncsSettingForm from \"./FuncsSettingForm\"\nimport { Context } from './ContextProvider'\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '50ch'\n        },\n    },\n    button: {\n        margin: theme.spacing(1),\n    }\n\n}))\n\nconst LinearPipesForm = ({ handleLinearPipesInput }) => {\n    const classes = useStyles()\n    const [inputStates, dispatch] = useContext(Context);\n\n\n    return (\n        <Container maxWidth=\"sm\">\n            <form className={classes.root}>\n                {inputStates.map((inputField, index) => (\n                    <div key={inputField.id}>\n                        <h4>stepSet {index + 1}</h4>\n                        <TextField\n                            name=\"stepID\"\n                            label=\"stepID\"\n                            variant=\"filled\"\n                            helperText=\"describe main work in this stepSet, eg.'_load'\"\n                            value={inputField.stepID}\n                            onChange={event => handleLinearPipesInput(inputField.id, event)}\n                        />\n\n                        <FuncsSettingForm\n                            indexm={index}\n                            classes={classes}\n                            mid={inputField.id}\n                            funcsSettings={inputField.funcsSettings} />\n                    </div>\n                ))}\n            </form>\n        </Container>\n    );\n}\n\nexport default LinearPipesForm;","import React, { useContext } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport FuncsSettingForm from \"./FuncsSettingForm\"\nimport { Context } from './ContextProvider'\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n        }\n\n    },\n\n}))\n\nconst BranchPipesForm = ({ handleLinearPipesInput }) => {\n    const classes = useStyles()\n    const [inputStates, dispatch] = useContext(Context);\n\n\n    return (\n        <Container maxWidth=\"sm\">\n            <form className={classes.root}>\n                {inputStates.map((inputField, index) => (\n                    <div key={inputField.id}>\n                        <h4>Pipe-segment {index + 1}</h4>\n                        <TextField\n                            name=\"stepID\"\n                            label=\"Subfunction Description Label\"\n                            variant=\"filled\"\n                            helperText=\"describe main work in this sub function, eg.'_load'\"\n                            value={inputField.stepID}\n                            onChange={event => handleLinearPipesInput(inputField.id, event)}\n                        />\n                        <h5>Define hierarchy</h5>\n                        <TextField\n                            name=\"subfID\"\n                            label=\"Subfunction ID\"\n                            variant=\"filled\"\n                            helperText=\"ID of this subfunction, eg.'pipe2'\"\n                            value={inputField.subfID}\n                            onChange={event => handleLinearPipesInput(inputField.id, event)}\n                        />\n                        <TextField\n                            name=\"subf_srcid\"\n                            label=\"Subfunction Srcid\"\n                            variant=\"filled\"\n                            helperText=\"Describe the hierarchy relationship between other subfunction, you should input [Set Function ID] of the previously executed pipe, for example, if the current subfunc runs after pipe2, then the input should be 'pipe2', the first subfunc doesn't need this, leave it empty is ok.\"\n                            value={inputField.subf_srcid}\n                            onChange={event => handleLinearPipesInput(inputField.id, event)}\n                        />\n                        <h5>Define pipeline</h5>\n                        <FuncsSettingForm\n                            indexm={index}\n                            classes={classes}\n                            mid={inputField.id}\n                            funcsSettings={inputField.funcsSettings} />\n                    </div>\n                ))}\n            </form>\n        </Container>\n    );\n}\n\nexport default BranchPipesForm;","const BranchTemplate = (basicInfo, inputFields) => {\n\n    let HYDRA_presetting = new Array([]);\n    let pipeArr = '';\n    let branchSrcInfo = {};\n    let subfuncs = new Array([]);\n\n    if (basicInfo.checkedHYDRA) {\n        HYDRA_presetting.push(`HYDRA = true;`);\n        HYDRA_presetting.push(`PARAM = param_sweep_setup(project_dir);`);\n        HYDRA_presetting.push(`Cfg.HYDRA.ifapply = HYDRA;`);\n        HYDRA_presetting.push(`Cfg.HYDRA.chanloc = '${basicInfo.eegChanloc}';`);\n        HYDRA_presetting.push(`Cfg.HYDRA.PARAM = PARAM;`);\n        HYDRA_presetting.push(`Cfg.HYDRA.FULL_CLEAN_SEED = false;`);\n        if (basicInfo.checkHydraTimeRange && !basicInfo.checkHydraCleanSeed) {\n            HYDRA_presetting.push(`Cfg.HYDRA.provide_seed_timerange = true;`)\n            HYDRA_presetting.push(`Cfg.HYDRA.cleanseed_timerange = ${basicInfo.checkHydraTimeRange};`);\n        } else if (basicInfo.checkHydraCleanSeed && !basicInfo.checkHydraTimeRange) {\n            HYDRA_presetting.push(`Cfg.HYDRA.provide_seed_timerange = false;`)\n            HYDRA_presetting.push(`Cfg.HYDRA.seed_fname = ${basicInfo.checkHydraCleanSeed};`);\n        }\n    }\n\n    inputFields.forEach((inputField, index) => {\n        let stepSetsArray = new Array([]);\n        let ctap_args = new Array([]);\n        let funcs = ``;\n        let subpipe = \"@sbf_\" + inputField.subfID + \", \";\n        console.log(subpipe);\n        pipeArr = pipeArr + subpipe;\n\n        let srcid;\n        if (index == 0) {\n            branchSrcInfo[inputField.subfID] = {\n                '0': \"\".concat(1, inputField.stepID),\n                '1': \"\"\n            };\n            srcid = \"\";\n        } else {\n            branchSrcInfo[inputField.subfID] = {\n                '0': \"\".concat(1, inputField.stepID),\n                '1': \"\".concat(branchSrcInfo[inputField.subf_srcid]['1'], inputField.subf_srcid, '#')\n            };\n            srcid = \"\".concat(branchSrcInfo[inputField.subfID]['1'], branchSrcInfo[inputField.subf_srcid]['0']);\n        };\n\n        console.log(srcid);\n\n        inputField.funcsSettings.forEach(funcsSetting => {\n            funcs = funcs + `@${funcsSetting.funcName}, `;\n            let funcN = funcsSetting.funcName;\n            if (funcN) {\n                funcN = funcN.slice(5, funcN.length)\n            }\n            ctap_args.push(`out.${funcN}=struct(${funcsSetting.funcP})`)\n        });\n\n        stepSetsArray.push(`stepSet(${index + 1}).id = [num2str(${index + 1}), '${inputField.stepID}'];`);\n        stepSetsArray.push(`stepSet(${index + 1}).funH{${funcs}};`);\n        console.log([stepSetsArray.join('\\n')]);\n        console.log(ctap_args);\n        //sub_func\n        let subfunc = new Array(\n            `function [Cfg, out] = sbf_${inputField.subfID}(Cfg)`,\n            `   %%%%%%%% Define hierarchy %%%%%%%%`,\n            `   Cfg.id = '${inputField.subfID}';`,\n            `   Cfg.srcid = {${srcid}};`,\n            `   %%%%%%%% Define pipeline %%%%%%%%`,\n            `   i = 1; %stepSet 1`,\n            `   ${stepSetsArray.join('\\n')}`,\n            `   `,\n            `   ${[ctap_args.join('\\n')]}`,\n            `   Cfg.pipe.runSets = {stepSet(:).id};`,\n            `   Cfg.pipe.stepSets = stepSet;`,\n            `end`\n        )\n        subfuncs.push(`${subfunc.join('\\n')}`);\n    })\n\n    pipeArr = `pipeArr = {${pipeArr}};`\n\n    let results = new Array(\n        `pipeline_name = '${basicInfo.pipelineName}';`,\n        `FILE_ROOT = mfilename('fullpath');`,\n        `reporoot = FILE_ROOT(1:strfind(FILE_ROOT, fullfile('ctap', 'templates', '${basicInfo.projectRoot}', 'ctap_linear_template')) - 1);`,\n        `project_dir = FILE_ROOT(1:strfind(FILE_ROOT, fullfile('ctap_linear_template')) - 1);`,\n        `data_dir = append(reporoot,'ctap/data/test_data');`,\n        `PREPRO = true;`,\n        `STOP_ON_ERROR = false;`,\n        `OVERWRITE_OLD_RESULTS = true;`,\n        `[Cfg, ~] = sbf_cfg(project_dir, pipeline_name);`,\n        `Cfg.grfx.on = false;`,\n        `Cfg.MC = get_meas_cfg_MC(Cfg, data_dir, 'eeg_ext', '${basicInfo.eegType}', 'sbj_filt', ${basicInfo.sbj_filt});`,\n        `${HYDRA_presetting.join('\\n')}`,\n        `clear Pipe;`,\n        `${pipeArr}`,\n        `runps = 1:length(pipeArr);`,\n        `if PREPRO`,\n        `   CTAP_pipeline_brancher(Cfg, pipeArr, 'runPipes', runps, 'dbg', STOP_ON_ERROR, 'ovw', OVERWRITE_OLD_RESULTS);`,\n        `end`,\n        `%% Subfunctions`,\n        `function [Cfg, out] = sbf_cfg(project_root_folder, ID)`,\n        `   Cfg.id = ID;`,\n        `   Cfg.srcid = {''};`,\n        `   Cfg.env.paths.projectRoot = project_root_folder;`,\n        `   % Define important directories and files`,\n        `   Cfg.env.paths.branchSource = '';`,\n        `   Cfg.env.paths.ctapRoot = fullfile(Cfg.env.paths.projectRoot, Cfg.id);`,\n        `   Cfg.env.paths.analysisRoot = Cfg.env.paths.ctapRoot;`,\n        `   Cfg.eeg.chanlocs = '${basicInfo.eegChanloc}';`,\n        `   Cfg.eeg.reference = ${basicInfo.eegReference};`,\n        `   Cfg.eeg.veogChannelNames = ${basicInfo.eegVeogChannelNames};`,\n        `   Cfg.eeg.heogChannelNames = ${basicInfo.eegHeogChannelNames};`,\n        `   out = struct([]);`,\n        `end`,\n        `${subfuncs.join('\\n')}`,\n    );\n    return results;\n\n};\n\nexport default BranchTemplate;\n\n// linearStepInfo","import React, { useState, useEffect, useReducer, useContext, useDebugValue } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport BasicInfo from \"./BasicInfo\";\nimport LinearTemplate from \"./LinearTemplate\";\nimport Steppers from \"./Stepper\";\nimport LinearPipesForm from \"./LinearPipesForm\";\nimport BranchPipesForm from \"./BranchPipesForm\";\nimport BranchTemplate from \"./BranchTemplate\"\n\nimport { Context } from './ContextProvider'\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 200,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n\n    button: {\n        margin: theme.spacing(2),\n    }\n}));\n\nexport default function Main() {\n    const classes = useStyles();\n\n    const [inputStates, dispatch] = useContext(Context);\n    const [activeStep, setActiveStep] = useState(0);\n    const [downloadLink, setDownloadLink] = useState('');\n    const [stepNum, setStepNum] = useState(1);\n    const [isReadyDownload, setIsReadyDownload] = useState(false);\n    const [basicInfoInput, setBasicInfoInput] = useReducer(\n        (state, newState) => ({ ...state, ...newState }),\n        {\n            checkedLinear: true,\n            checkedBranch: false,\n            checkedHYDRA: true,\n            HydraOptionA: true,\n            HydraOptionB: false,\n            checkHydraTimeRange: \"\",\n            checkHydraCleanSeed: \"\",\n            pipelineName: \"\",\n            projectRoot: \"\",\n            sbj_filt: \"\",\n            eegType: \"\",\n            eegChanloc: \"\",\n            eegReference: \"\",\n            eegVeogChannelNames: \"\",\n            eegHeogChannelNames: \"\"\n        }\n    );\n    const [basicInfoInputCheck, setBasicInfoInputCheck] = useReducer(\n        (state, newState) => ({ ...state, ...newState }),\n        {\n            checkHydraTimeRange: false,\n            checkHydraCleanSeed: false,\n            pipelineName: false,\n            projectRoot: false,\n            sbj_filt: false,\n            eegType: false,\n            eegChanloc: false,\n            eegReference: false,\n            eegVeogChannelNames: false,\n            eegHeogChannelNames: false\n        }\n    );\n\n    useEffect(() => {\n        setDownloadLink('');\n        setIsReadyDownload(false);\n    }, [basicInfoInput.checkedLinear])\n\n    // use localstorage save last edit  \n    useEffect(() => {\n        if (localStorage.getItem(\"basicInfoInput\")) {\n            setBasicInfoInput(JSON.parse(localStorage.getItem(\"basicInfoInput\")));\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem(\"basicInfoInput\", JSON.stringify(basicInfoInput))\n    }, [basicInfoInput])\n\n    // make text file\n    const makeTextFile = (basicInfoInput, inputStates) => {\n        let list;\n        if (basicInfoInput.checkedLinear) {\n            list = LinearTemplate(basicInfoInput, inputStates);\n        } else {\n            list = BranchTemplate(basicInfoInput, inputStates);\n        };\n        const data = new Blob([list.join('\\n')], { type: 'text/plain' });\n        if (downloadLink !== '') window.URL.revokeObjectURL(downloadLink);\n        return window.URL.createObjectURL(data);\n\n    };\n\n    //input check\n    const inputCheck = () => {\n        let result = true;\n        let newS = {};\n        if (activeStep == 0) {\n            const values = { ...basicInfoInputCheck }\n            for (const [key, value] of Object.entries(values)) {\n                if (basicInfoInput[key] === null || basicInfoInput[key].length === 0) {\n                    if (key === 'checkHydraTimeRange' && basicInfoInput.HydraOptionB) {\n                        newS = { ...newS, [key]: false };\n                    } else if (key === 'checkHydraCleanSeed' && basicInfoInput.HydraOptionA) {\n                        newS = { ...newS, [key]: false };\n                    }\n                    else {\n                        newS = { ...newS, [key]: true };\n                    }\n                }\n            }\n            result = Object.values(newS).every((value) => value === false);\n            setBasicInfoInputCheck({ ...basicInfoInputCheck, ...newS });\n        }\n\n        return result;\n    }\n\n    //steppers handler\n    const handleNext = () => {\n        let p = inputCheck();\n        if (p) {\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        } else {\n            alert(\"check your input\");\n        }\n\n    };\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n    const handleReset = () => {\n        setActiveStep(0);\n    };\n\n    // LinearPipesForm handles\n    async function handleSubmit() {\n        let downloadlink = await makeTextFile(basicInfoInput, inputStates);\n        setDownloadLink(downloadlink);\n        setIsReadyDownload(true);\n    };\n\n    const handleLinearPipesInput = (id, event) => {\n        const newInputFields = inputStates.map(i => {\n            if (id === i.id) {\n                i[event.target.name] = event.target.value\n            }\n            return i;\n        })\n        dispatch({ type: 'UPDATE_STEPSETS', data: newInputFields })\n    }\n\n    const handleChangeStepSets = (e) => {\n        const { name, value } = e.target;\n\n        if (stepNum < value) {\n            let form = [...inputStates];\n            for (let i = stepNum; i < value; i++) {\n                form.push({ id: uuidv4(), subf_srcid: '', subfID: '', stepID: '', funcsSettings: [{ fid: uuidv4(), funcName: '', funcP: '' }] });\n            }\n            dispatch({ type: 'UPDATE_STEPSETS', data: form })\n            setStepNum(value);\n        } else if (stepNum > value && value >= 1) {\n            console.log(value);\n            console.log(stepNum)\n            console.log(inputStates)\n            let form = [...inputStates];\n            for (let i = 0; i < stepNum - value; i++) {\n                form.pop();\n            }\n            console.log(form)\n            dispatch({ type: 'UPDATE_STEPSETS', data: form })\n            setStepNum(value);\n        }\n    }\n\n\n    return (\n        <div>\n            <div>\n                <span>CTAP Code Generation Tool</span>\n\n                {activeStep === 0 ? (\n                    <BasicInfo\n                        inputValue={basicInfoInput}\n                        setBasicInfoInput={setBasicInfoInput}\n                        basicInfoInputCheck={basicInfoInputCheck}\n                        setBasicInfoInputCheck={setBasicInfoInputCheck}\n                    />\n                ) : activeStep === 1 ? (\n                    <Container>\n                        {basicInfoInput.checkedLinear ?\n                            <h1>Linear Pipeline Setting</h1>\n                            :\n                            <h1>Branch Pipeline Setting</h1>}\n\n                        <FormControl variant=\"outlined\" className={classes.formControl}>\n                            <InputLabel >stepSet number</InputLabel>\n                            <Select\n                                native\n                                value={stepNum}\n                                onChange={e => handleChangeStepSets(e)}\n                                label=\"stepSet number\"\n                                inputProps={{\n                                    name: 'stepNum',\n                                }}\n                            >\n                                {\n                                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(i => {\n                                        return <option key={i} value={i}>{i}</option>\n                                    })\n                                }\n                            </Select>\n                        </FormControl>\n                        {basicInfoInput.checkedLinear ?\n                            <LinearPipesForm\n                                handleLinearPipesInput={handleLinearPipesInput}\n                                handleSubmit={handleSubmit} />\n                            :\n                            <BranchPipesForm\n                                handleLinearPipesInput={handleLinearPipesInput}\n                                handleSubmit={handleSubmit} />}\n\n                    </Container>\n                ) : activeStep === 2 ? (\n                    <div>\n                        <Button\n                            className={classes.button}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            type=\"submit\"\n                            onClick={handleSubmit}\n                        >Generate</Button>\n                        <div>\n                            {isReadyDownload ?\n                                <a download='ctap_linear_template.m' href={downloadLink} className={classes.downloadButton}> download </a> : null\n                            }\n                        </div>\n\n\n                    </div>\n\n\n                ) : null\n\n                }\n\n            </div>\n            <Steppers\n                activeStep={activeStep}\n                handleBack={handleBack}\n                handleNext={handleNext}\n                handleReset={handleReset}\n            />\n\n        </div>\n    );\n\n\n\n\n}","import React, { useReducer, createContext } from 'react';\nimport { Route } from 'react-router-dom';\n\nimport './App.css';\nimport Main from './Components/Main.js';\nimport ContextProvider from './Components/ContextProvider'\n\nfunction App() {\n\n  return (\n    <ContextProvider>\n      <div className=\"App\">\n        <Route exact path=\"/\" component={Main} />\n      </div>\n    </ContextProvider>\n\n\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter >\n      <App />\n  </BrowserRouter>, \n  document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}