{"version":3,"sources":["Reducers/Reducer.js","Reducers/ContextProvider.js","Styles/FormControlStyles.js","Data/CTAP_chanlocs.js","Img/CTAP_Linear.png","Img/CTAP_Branch.png","Img/CTAP_HYDRA.png","Components/BasicInfo.js","Components/BranchTemplate.js","Components/LinearTemplate.js","Components/Stepper.js","Data/CTAP_funcs.js","Components/FuncsSettingForm.js","Components/LinearPipesForm.js","Components/BranchPipesForm.js","Components/ReviewPage.js","Components/Main.js","Components/IntroPage.js","App.js","reportWebVitals.js","index.js"],"names":["initialLinearInputState","id","uuidv4","stepID","stepIDCheck","funcsSettings","fid","funcName","funcP","funcNameCheck","initialBranchInputState","stepNum","pipeSegment_srcid","pipeSegmentID","pipeSegment_srcidCheck","pipeSegmentIDCheck","linearSettings","Reducer","state","action","type","data","defaultBasicInfoInput","checkedLinear","checkedBranch","checkedHYDRA","HydraOptionA","HydraOptionB","checkHydraTimeRange","checkHydraCleanSeed","checkOwnHydraDataPath","pipelineName","inputdatapath","checkOwnDataPath","projectRoot","sbj_filt","eegType","eegChanloc","eegReference","eegVeogChannelNames","eegHeogChannelNames","ContextBranch","createContext","ContextLinear","ContextBasic","ContextProvider","children","useReducer","inputLinearState","dispatchL","inputBranchState","dispatchB","basicInfoInput","dispatch","Provider","value","FormControlStyles","makeStyles","theme","margin","spacing","withoutLabel","marginTop","textField","width","words","textAlign","customWidth","maxWidth","CTAP_chanlocs","filter","createFilterOptions","helperText","BasicInfo","basicInfoInputCheck","setBasicInfoInputCheck","classes","useContext","useState","setValue","useEffect","handleInput","event","target","name","handleCheckboxChange","checked","handleHydraChange","e","p","className","root","noValidate","autoComplete","Container","style","Accordion","AccordionSummary","expandIcon","aria-label","aria-controls","FormControlLabel","onClick","stopPropagation","onFocus","control","Checkbox","onChange","label","AccordionDetails","src","CTAP_Linear_diagram","alt","CTAP_Branch_diagram","Typography","heading","CTAP_HYDRA_diagram","Tooltip","title","variant","tooltip","TextField","error","clsx","FormControl","disabled","placement","Autocomplete","freeSolo","selectOnFocus","clearOnBlur","handleHomeEndKeys","newValue","JSON","stringify","slice","trim","filterOptions","options","params","filtered","inputValue","push","renderInput","inputCorrection","result","v","replace","split","forEach","i","field","isNaN","toLowerCase","join","BranchTemplate","basicInfo","inputFields","HYDRA_presetting","Array","pipeArr","branchSrcInfo","pipeSegments","fileName","pop","fileFolder","data_dir","map","inputField","index","srcid","stepSetsArray","ctap_args","subpipe","concat","linearSetting","indexl","funcs","funcsSetting","funcN","length","pipeSegment","LinearTemplate","QontoConnector","withStyles","alternativeLabel","top","left","right","active","borderColor","completed","line","borderTopWidth","borderRadius","StepConnector","useQontoStepIconStyles","color","display","height","alignItems","circle","backgroundColor","zIndex","fontSize","QontoStepIcon","props","useStyles","button","marginRight","marginBottom","instructions","Steppers","activeStep","handleReset","handleSubmit","handleBack","handleNext","isReadyDownload","downloadLink","steps","Button","download","href","Stepper","connector","Step","StepLabel","StepIconComponent","CTAP_funcs","FuncsSettingForm","ifLinear","indexm","mid","inputBranchStates","inputLinearStates","React","inputStates","setInputStates","handleInputChange","newV","values","index_","findIndex","x","newInputStates","newState","indexff","IconButton","indexf","splice","handleRemoveFuncFields","functionP","handleAddFuncFields","LinearPipesForm","newInputFields","handleLinearPipesInput","BranchPipesForm","setStepNum","0","pipeSegmentSrcIDs","setPipeSegmentSrcIDs","checkPipeSegmentSrcID","setCheckPipeSegmentSrcID","Object","includes","InputLabel","Select","native","form","handleChangeStepSets","inputProps","ReviewPage","codeString","language","vs","showLineNumbers","codeTagProps","fontFamiily","formControl","selectEmpty","nav","textDecoration","fontStyle","Main","setActiveStep","setDownloadLink","setIsReadyDownload","setCodeString","initialLinear","initialBranch","localStorage","getItem","parse","setItem","makeTextFile","list","Blob","window","URL","revokeObjectURL","createObjectURL","a","downloadlink","float","to","prevActiveStep","newS","keys","key","every","l","f","inputCheck","alert","actionsContainer","resetContainer","padding","getStepContent","step","marginLeft","align","rel","IntroPage","orientation","StepContent","Paper","square","elevation","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"ifAGaA,EAA0B,CAAC,CAAEC,GAAIC,cAAUC,OAAQ,GAAIC,aAAa,EAAOC,cAAe,CAAC,CAAEC,IAAKJ,cAAUK,SAAU,GAAIC,MAAO,GAAIC,eAAe,MACpJC,EAA0B,CAAC,CAAET,GAAIC,cAAUS,QAAS,EAAGC,kBAAmB,GAAIC,cAAe,GAAIV,OAAQ,GAAIW,wBAAwB,EAAOC,oBAAoB,EAAOX,aAAa,EAAOY,eAAgB,CAAC,CAAEf,GAAIC,cAAUC,OAAQ,GAAIC,aAAa,EAAOC,cAAe,CAAC,CAAEC,IAAKJ,cAAUK,SAAU,GAAIC,MAAO,GAAIC,eAAe,QACrUQ,EAAU,SAACC,EAAOC,GAC3B,OAAQA,EAAOC,MACX,IAAK,SACD,OAAOD,EAAOE,KAElB,QACI,OAAOH,IAKNI,EAAwB,CACjCC,eAAe,EACfC,eAAe,EACfC,cAAc,EACdC,cAAc,EACdC,cAAc,EACdC,oBAAqB,GACrBC,oBAAqB,uBACrBC,uBAAuB,EACvBC,aAAc,GACdC,cAAe,sBACfC,kBAAkB,EAClBC,YAAa,GACbC,SAAU,GACVC,QAAS,GACTC,WAAY,GACZC,aAAc,GACdC,oBAAqB,GACrBC,oBAAqB,ICfZC,EAAgBC,wBAAchC,GAC9BiC,EAAgBD,wBAAc1C,GAC9B4C,EAAeF,wBAAcpB,GAE3BuB,EApBS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACAC,qBAAW9B,EAASjB,GADpB,mBAC/BgD,EAD+B,KACbC,EADa,OAEAF,qBAAW9B,EAASP,GAFpB,mBAE/BwC,EAF+B,KAEbC,EAFa,OAGHJ,qBAAW9B,EAASK,GAHjB,mBAG/B8B,EAH+B,KAGfC,EAHe,KAItC,OACI,cAACT,EAAaU,SAAd,CAAuBC,MAAO,CAACH,EAAgBC,GAA/C,SACI,cAACV,EAAcW,SAAf,CAAwBC,MAAO,CAACP,EAAkBC,GAAlD,SACI,cAACR,EAAca,SAAf,CAAwBC,MAAO,CAACL,EAAkBC,GAAlD,SACKL,SCTRU,EAAoBC,aAAW,SAACC,GAAD,MAAY,CACpDC,OAAQ,CACJA,OAAQD,EAAME,QAAQ,IAE1BC,aAAc,CACVC,UAAWJ,EAAME,QAAQ,IAE7BG,UAAW,CACPC,MAAO,QAEXC,MAAO,CACHC,UAAW,UAEfC,YAAa,CACTC,SAAU,SChBLC,EAAgB,CACzB,GACA,0BACA,kCACA,uBACA,uBACA,0BACA,yBACA,iCACA,0BACA,kCACA,yBACA,yBACA,iCACA,oCCdW,MAA0B,wCCA1B,MAA0B,wCCA1B,MAA0B,uCCsBnCC,EAASC,cAETC,EACmB,qEADnBA,EAEmB,4GAFnBA,EAGY,gDAHZA,EAIa,0BAJbA,GAKW,gDALXA,GAMQ,2DANRA,GAOO,+BAPPA,GAQU,wCARVA,GASY,wEATZA,GAUmB,yGAVnBA,GAWmB,yGAmXVC,GAhXG,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,oBAAqBC,EAA6B,EAA7BA,uBAClCC,EAAUpB,IADqD,EAGhCqB,qBAAWjC,GAHqB,mBAG5DQ,EAH4D,KAG5CC,EAH4C,OAIzCyB,mBAAS1B,EAAef,YAJiB,mBAI5DkB,EAJ4D,KAIrDwB,EAJqD,KAMnEC,qBAAU,WACN3B,EAAS,CAAEjC,KAAM,SAAUC,KAAK,2BAAM+B,GAAP,IAAuBf,WAAYkB,MAClEoB,EAAuB,2BAAKD,GAAN,IAA2BrC,YAAY,OAC9D,CAACkB,IAGJ,IAAM0B,EAAc,SAAAC,GAAU,IAAD,EACDA,EAAMC,OAAtBC,EADiB,EACjBA,KAAM7B,EADW,EACXA,MACdF,EAAS,CAAEjC,KAAM,SAAUC,KAAK,2BAAM+B,GAAP,kBAAwBgC,EAAO7B,MAC9DoB,EAAuB,2BAAKD,GAAN,kBAA4BU,GAAO,MAIvDC,EAAuB,SAACH,GAAW,IAAD,EACVA,EAAMC,OAAxBC,EAD4B,EAC5BA,KAAME,EADsB,EACtBA,QACd,GAAa,kBAATF,EACA/B,EAAS,CAAEjC,KAAM,SAAUC,KAAK,2BAAM+B,GAAP,IAAuB,cAAiBkC,EAAS,eAAkBA,WAC/F,GAAa,kBAATF,EACP/B,EAAS,CAAEjC,KAAM,SAAUC,KAAK,2BAAM+B,GAAP,IAAuB,cAAiBkC,EAAS,eAAkBA,WAC/F,GAAa,qBAATF,EAA6B,CAGrB,IAAD,EAAd,GAFA/B,EAAS,CAAEjC,KAAM,SAAUC,KAAK,2BAAM+B,GAAP,kBAAwBgC,EAAOE,OAEzDA,EACDX,EAAuB,2BAAKD,GAAN,IAA2B1C,eAAe,KAChEqB,EAAS,CAAEjC,KAAM,SAAUC,KAAK,2BAAM+B,GAAP,uBAAwBgC,EAAOE,GAA/B,8BAAuD,uBAAvD,WAEhC,GAAY,0BAATF,EAAiC,CAGxB,IAAD,EAAd,GAFA/B,EAAS,CAAEjC,KAAM,SAAUC,KAAK,2BAAM+B,GAAP,kBAAwBgC,EAAOE,OAEzDA,EACDX,EAAuB,2BAAKD,GAAN,IAA2B7C,qBAAqB,KACtEwB,EAAS,CAAEjC,KAAM,SAAUC,KAAK,2BAAM+B,GAAP,uBAAwBgC,EAAOE,GAA/B,oCAA6D,wBAA7D,WAInCjC,EAAS,CAAEjC,KAAM,SAAUC,KAAK,2BAAM+B,GAAP,kBAAwBgC,EAAOE,OAKhEC,EAAoB,SAACC,GACvB,GAAsB,mBAAlBA,EAAEL,OAAOC,KAA2B,CACpC,IAAIK,EAAI,GACRA,EAAC,2BAAQA,GAAR,IAAW/D,aAAc8D,EAAEL,OAAOG,QAAS3D,cAAe6D,EAAEL,OAAOG,UAChEE,EAAEL,OAAOG,UACTG,EAAC,2BAAQA,GAAR,IAAW,oBAAuB,yBACnCd,EAAuB,2BAAKD,GAAN,IAA2B,oBAAuB,2BAE5ErB,EAAS,CAAEjC,KAAM,SAAUC,KAAK,2BAAM+B,GAAmBqC,SAEtD,CACH,IAAIA,EAAI,GACRA,EAAC,2BAAQA,GAAR,IAAW9D,aAAc6D,EAAEL,OAAOG,QAAS5D,cAAe8D,EAAEL,OAAOG,UAChEE,EAAEL,OAAOG,UACTG,EAAC,2BAAQA,GAAR,IAAW,oBAAuB,KACnCd,EAAuB,2BAAKD,GAAN,IAA2B,qBAAuB,MAE5ErB,EAAS,CAAEjC,KAAM,SAAUC,KAAK,2BAAM+B,GAAmBqC,OAMjE,OACI,sBAAKC,UAAWd,EAAQe,KAAMC,YAAU,EAACC,aAAa,MAAtD,UACI,eAACC,EAAA,EAAD,CAAW1B,SAAS,KAAK2B,MAAO,CAAEjC,UAAW,QAA7C,UACI,oFACA,eAACkC,EAAA,EAAD,CAAWD,MAAO,CAAE/B,MAAO,IAAKL,OAAQ,UAAxC,UACI,cAACsC,EAAA,EAAD,CACIC,WAAY,cAAC,IAAD,IACZC,aAAW,SACXC,gBAAc,8BACdnG,GAAG,6BAJP,SAMI,cAACoG,EAAA,EAAD,CACIF,aAAW,cACXG,QAAS,SAACpB,GAAD,OAAWA,EAAMqB,mBAC1BC,QAAS,SAACtB,GAAD,OAAWA,EAAMqB,mBAC1BE,QAAS,cAACC,EAAA,EAAD,CAAUpB,QAASlC,EAAe7B,cAAeoF,SAAUtB,EAAsBD,KAAK,kBAC/FwB,MAAM,sBAGd,cAACC,EAAA,EAAD,UACI,qBAAKC,IAAKC,EAAqBC,IAAI,GAAGhD,MAAM,aAGpD,eAACgC,EAAA,EAAD,CAAWD,MAAO,CAAE/B,MAAO,IAAKL,OAAQ,UAAxC,UACI,cAACsC,EAAA,EAAD,CACIC,WAAY,cAAC,IAAD,IACZC,aAAW,SACXC,gBAAc,8BACdnG,GAAG,6BAJP,SAMI,cAACoG,EAAA,EAAD,CACIF,aAAW,cACXG,QAAS,SAACpB,GAAD,OAAWA,EAAMqB,mBAC1BC,QAAS,SAACtB,GAAD,OAAWA,EAAMqB,mBAC1BE,QAAS,cAACC,EAAA,EAAD,CAAUpB,QAASlC,EAAe5B,cAAemF,SAAUtB,EAAsBD,KAAK,kBAC/FwB,MAAM,sBAGd,cAACC,EAAA,EAAD,UACI,qBAAKC,IAAKG,EAAqBD,IAAI,GAAGhD,MAAM,aAGpD,oBAAI0B,UAAWd,EAAQX,MAAvB,oGACA,oBAAIyB,UAAWd,EAAQX,MAAvB,sSACA,uBACA,gCACI,wCACA,eAAC+B,EAAA,EAAD,CAAWD,MAAO,CAAE/B,MAAO,IAAKL,OAAQ,UAAxC,UACI,cAACsC,EAAA,EAAD,CACIC,WAAY,cAAC,IAAD,IACZE,gBAAc,kBACdnG,GAAG,iBAHP,SAKI,cAACiH,EAAA,EAAD,CAAYxB,UAAWd,EAAQuC,QAA/B,mCAEJ,cAACN,EAAA,EAAD,UACI,qBAAKC,IAAKM,EAAoBJ,IAAI,GAAGhD,MAAM,aAGnD,oBAAI0B,UAAWd,EAAQX,MAAvB,wWACA,cAACoC,EAAA,EAAD,CACII,QAAS,cAACC,EAAA,EAAD,CAAUpB,QAASlC,EAAe3B,aAAckF,SAAUtB,EAAsBD,KAAK,iBAC9FwB,MAAM,oEAETxD,EAAe3B,aAAe,8BAC3B,gCACI,cAAC4E,EAAA,EAAD,CACII,QAAS,cAACC,EAAA,EAAD,CAAUpB,QAASlC,EAAe1B,aAAciF,SAAUpB,EAAmBH,KAAK,mBAC3FwB,MAAM,kCAEV,cAACP,EAAA,EAAD,CACII,QAAS,cAACC,EAAA,EAAD,CAAUpB,QAASlC,EAAezB,aAAcgF,SAAUpB,EAAmBH,KAAK,mBAC3FwB,MAAM,4BAETxD,EAAe1B,aACZ,8BACI,cAAC2F,EAAA,EAAD,CAASC,MAAO,cAACJ,EAAA,EAAD,CAAYK,QAAQ,QAApB,SAA6B/C,IAA8CI,QAAS,CAAE4C,QAAS5C,EAAQT,aAAvH,SACI,cAACsD,EAAA,EAAD,CACIC,MAAOhD,EAAoB9C,oBAC3B3B,GAAG,sBACHmF,KAAK,sBACLwB,MAAM,aACNrD,MAAOH,EAAexB,oBACtB+E,SAAU,SAAAnB,GAAC,OAAIP,EAAYO,IAC3BpE,KAAK,OACLoD,WAAYE,EAAoB9C,oBAAsB,kDAAoD,KAC1G2F,QAAQ,iBAIX,KAEZnE,EAAezB,aACZ,sBAAKoE,MAAO,CAAEjC,UAAW,UAAzB,UACI,cAACuC,EAAA,EAAD,CACIX,UAAWiC,YAAK/C,EAAQjB,OAAQiB,EAAQb,UAAWa,EAAQf,cAC3D4C,QAAS,cAACC,EAAA,EAAD,CAAUpB,QAASlC,EAAetB,sBAAuB6E,SAAUtB,EAAsBD,KAAK,0BACvGwB,MAAO,cAACM,EAAA,EAAD,CAAYK,QAAQ,QAApB,+CAEX,cAACK,EAAA,EAAD,CAAalC,UAAWiC,YAAK/C,EAAQjB,OAAQiB,EAAQb,UAAWa,EAAQf,cAAxE,SACI,cAACwD,EAAA,EAAD,CAASC,MAAO,cAACJ,EAAA,EAAD,CAAYK,QAAQ,QAApB,SAA6B/C,IAA8CI,QAAS,CAAE4C,QAAS5C,EAAQT,aAAvH,SACI,cAACsD,EAAA,EAAD,CACII,UAAWzE,EAAetB,sBAC1B4F,MAAOhD,EAAoB5C,sBAC3B7B,GAAG,sBACHmF,KAAK,sBACLwB,MAAM,iBACNrD,MAAOH,EAAevB,oBACtB8E,SAAU,SAAAnB,GAAC,OAAIP,EAAYO,IAC3BpE,KAAK,OACLoD,WAAYE,EAAoB5C,sBAAwB,kDAAqD,oEAC7GyF,QAAQ,oBAKtB,UAEL,KACT,6BAKR,sBAAKxB,MAAO,CAAEjC,UAAW,UAAzB,UACI,qDACA,cAAC8D,EAAA,EAAD,CAAalC,UAAWiC,YAAK/C,EAAQjB,OAAQiB,EAAQb,UAAWa,EAAQf,cAAxE,SACI,cAACwD,EAAA,EAAD,CAASC,MAAO,cAACJ,EAAA,EAAD,CAAYK,QAAQ,QAApB,SAA6B/C,IAAuCI,QAAS,CAAE4C,QAAS5C,EAAQT,aAAhH,SACI,cAACsD,EAAA,EAAD,CACIC,MAAOhD,EAAoB3C,aAC3B9B,GAAG,eACHmF,KAAK,eACLwB,MAAM,gBACNrD,MAAOH,EAAerB,aACtB4E,SAAU,SAAAnB,GAAC,OAAIP,EAAYO,IAC3BpE,KAAK,OACLoD,WAAYE,EAAoB3C,aAAe,kDAAoD,KACnGwF,QAAQ,iBAIpB,cAACK,EAAA,EAAD,CAAalC,UAAWiC,YAAK/C,EAAQjB,OAAQiB,EAAQb,UAAWa,EAAQf,cAAxE,SACI,cAACwD,EAAA,EAAD,CAASC,MAAO,cAACJ,EAAA,EAAD,CAAYK,QAAQ,QAApB,SAA6B/C,KAAsCI,QAAS,CAAE4C,QAAS5C,EAAQT,aAA/G,SACI,cAACsD,EAAA,EAAD,CACIC,MAAOhD,EAAoBxC,YAC3BjC,GAAG,cACHmF,KAAK,cACLwB,MAAM,2BACNrD,MAAOH,EAAelB,YACtByE,SAAU,SAAAnB,GAAC,OAAIP,EAAYO,IAC3BpE,KAAK,OACLoD,WAAYE,EAAoBxC,YAAc,kDAAoD,KAClGqF,QAAQ,oBAKxB,sBAAKxB,MAAO,CAAEjC,UAAW,UAAzB,UACI,cAACuC,EAAA,EAAD,CACIX,UAAWiC,YAAK/C,EAAQjB,OAAQiB,EAAQb,UAAWa,EAAQf,cAC3D4C,QAAS,cAACC,EAAA,EAAD,CAAUpB,QAASlC,EAAenB,iBAAkB0E,SAAUtB,EAAsBD,KAAK,qBAClGwB,MAAO,cAACM,EAAA,EAAD,CAAYK,QAAQ,QAApB,+CAEX,cAACK,EAAA,EAAD,CAAalC,UAAWiC,YAAK/C,EAAQjB,OAAQiB,EAAQb,UAAWa,EAAQf,cAAxE,SACI,cAACwD,EAAA,EAAD,CAASC,MAAO,cAACJ,EAAA,EAAD,CAAYK,QAAQ,QAApB,SAA6B/C,IAAwCI,QAAS,CAAE4C,QAAS5C,EAAQT,aAAjH,SACI,cAACsD,EAAA,EAAD,CACII,UAAWzE,EAAenB,iBAC1ByF,MAAOhD,EAAoB1C,cAC3B/B,GAAG,gBACHmF,KAAK,gBACLwB,MAAM,kBACNrD,MAAOH,EAAepB,cACtB2E,SAAU,SAAAnB,GAAC,OAAIP,EAAYO,IAC3BpE,KAAK,OACLoD,WAAYE,EAAoB1C,cAAgB,kDAAqD,6DACrGuF,QAAQ,oBAKxB,sBAAKxB,MAAO,CAAEjC,UAAW,UAAzB,UACI,cAAC8D,EAAA,EAAD,CAAalC,UAAWiC,YAAK/C,EAAQjB,OAAQiB,EAAQb,UAAWa,EAAQf,cAAxE,SACI,cAACwD,EAAA,EAAD,CAASC,MAAO,cAACJ,EAAA,EAAD,CAAYK,QAAQ,QAApB,SAA6B/C,KAAkCI,QAAS,CAAE4C,QAAS5C,EAAQT,aAA3G,SACI,cAACsD,EAAA,EAAD,CACIC,MAAOhD,EAAoBtC,QAC3BnC,GAAG,UACHmF,KAAK,UACLwB,MAAM,gBACNrD,MAAOH,EAAehB,QACtBuE,SAAU,SAAAnB,GAAC,OAAIP,EAAYO,IAC3BpE,KAAK,OACLoD,WAAYE,EAAoBtC,QAAU,kDAAoD,KAC9FmF,QAAQ,iBAKpB,cAACK,EAAA,EAAD,CAAalC,UAAWiC,YAAK/C,EAAQjB,OAAQiB,EAAQb,UAAWa,EAAQf,cAAxE,SACI,cAACwD,EAAA,EAAD,CAASC,MAAO,cAACJ,EAAA,EAAD,CAAYK,QAAQ,QAApB,SAA6B/C,KAAmCI,QAAS,CAAE4C,QAAS5C,EAAQT,aAA5G,SACI,cAACsD,EAAA,EAAD,CACIC,MAAOhD,EAAoBvC,SAC3BlC,GAAG,WACHmF,KAAK,WACLwB,MAAM,yBACNrD,MAAOH,EAAejB,SACtBwE,SAAU,SAAAnB,GAAC,OAAIP,EAAYO,IAC3BpE,KAAK,OACLoD,WAAYE,EAAoBvC,SAAW,kDAAoD,KAC/FoF,QAAQ,oBAKxB,sBAAKxB,MAAO,CAAEjC,UAAW,UAAzB,UACI,cAAC8D,EAAA,EAAD,CAAalC,UAAWiC,YAAK/C,EAAQjB,OAAQiB,EAAQb,UAAWa,EAAQf,cAAxE,SACI,cAACwD,EAAA,EAAD,CAASC,MAAO,cAACJ,EAAA,EAAD,CAAYK,QAAQ,QAApB,SAA6B/C,KAAqCI,QAAS,CAAE4C,QAAS5C,EAAQT,aAAe2D,UAAU,MAAvI,SACI,cAACC,EAAA,EAAD,CACIC,UAAQ,EACRC,eAAa,EACbC,aAAW,EACXC,mBAAiB,EACjB5E,MAAOH,EAAef,WACtBsE,SAAU,SAACzB,EAAOkD,GACsC,QAAhDC,KAAKC,UAAUF,GAAUG,MAAM,EAAG,GAAGC,OACrCzD,EAASsD,KAAKC,UAAUF,GAAUG,MAAM,GAAI,GAAGC,QAE/CzD,EAASqD,IAGjBK,cAAe,SAACC,EAASC,GACrB,IAAMC,EAAWtE,EAAOoE,EAASC,GAIjC,MAH0B,KAAtBA,EAAOE,YACPD,EAASE,KAAT,eAAsBH,EAAOE,WAA7B,MAEGD,GAEX3I,GAAG,2BACHyI,QAASrE,EACT0E,YAAa,SAACJ,GAAD,OAAY,cAAClB,EAAA,EAAD,2BACjBkB,GADiB,IAErBjB,MAAOhD,EAAoBrC,WAC3BmC,WAAYE,EAAoBrC,WAAa,kDAAoD,KACjGuE,MAAM,6BACNW,QAAQ,qBAIxB,cAACK,EAAA,EAAD,CAAalC,UAAWiC,YAAK/C,EAAQjB,OAAQiB,EAAQb,UAAWa,EAAQf,cAAxE,SACI,cAACwD,EAAA,EAAD,CAASC,MAAO,cAACJ,EAAA,EAAD,CAAYK,QAAQ,QAApB,SAA6B/C,KAAuCI,QAAS,CAAE4C,QAAS5C,EAAQT,aAAhH,SACI,cAACsD,EAAA,EAAD,CACIC,MAAOhD,EAAoBpC,aAC3BrC,GAAG,eACHmF,KAAK,eACLwB,MAAM,6BACNrD,MAAOH,EAAed,aACtBqE,SAAU,SAAAnB,GAAC,OAAIP,EAAYO,IAC3BpE,KAAK,OACLoD,WAAYE,EAAoBpC,aAAe,kDAAoD,KACnGiF,QAAQ,oBAKxB,sBAAKxB,MAAO,CAAEjC,UAAW,UAAzB,UACI,cAAC8D,EAAA,EAAD,CAAalC,UAAWiC,YAAK/C,EAAQjB,OAAQiB,EAAQb,UAAWa,EAAQf,cAAxE,SACI,cAACwD,EAAA,EAAD,CAASC,MAAO,cAACJ,EAAA,EAAD,CAAYK,QAAQ,QAApB,SAA6B/C,KAA8CI,QAAS,CAAE4C,QAAS5C,EAAQT,aAAvH,SACI,cAACsD,EAAA,EAAD,CACIC,MAAOhD,EAAoBlC,oBAC3BvC,GAAG,sBACHmF,KAAK,sBACLwB,MAAM,qBACNrD,MAAOH,EAAeZ,oBACtBmE,SAAU,SAAAnB,GAAC,OAAIP,EAAYO,IAC3BpE,KAAK,OACLoD,WAAYE,EAAoBlC,oBAAsB,kDAAoD,KAC1G+E,QAAQ,iBAIpB,cAACK,EAAA,EAAD,CAAalC,UAAWiC,YAAK/C,EAAQjB,OAAQiB,EAAQb,UAAWa,EAAQf,cAAxE,SACI,cAACwD,EAAA,EAAD,CAASC,MAAO,cAACJ,EAAA,EAAD,CAAYK,QAAQ,QAApB,SAA6B/C,KAA8CI,QAAS,CAAE4C,QAAS5C,EAAQT,aAAvH,SACI,cAACsD,EAAA,EAAD,CACIC,MAAOhD,EAAoBnC,oBAC3BtC,GAAG,sBACHmF,KAAK,sBACLwB,MAAM,qBACNrD,MAAOH,EAAeb,oBACtBoE,SAAU,SAAAnB,GAAC,OAAIP,EAAYO,IAC3BpE,KAAK,OACLoD,WAAYE,EAAoBnC,oBAAsB,kDAAoD,KAC1GgF,QAAQ,wBC7YvByB,GAAkB,SAACzF,GAC5B,IAAI0F,EAAS,GACTC,EAAI3F,EAAM4F,QAAQ,iBAAiB,IAOvC,OANAD,EAAIA,EAAEE,MAAM,MACVC,SAAQ,SAAAC,GACN,IAAIC,EAC8HA,EAAjIC,MAAMF,EAAEd,SAAqC,SAA3Bc,EAAEd,OAAOiB,eAAuD,UAA3BH,EAAEd,OAAOiB,cAAsE,WAAOH,EAAEd,OAAT,KAApC,UAAKc,EAAEd,OAAOiB,eACjHR,EAAOH,KAAKS,MAETN,EAAOS,KAAK,OA+IRC,GA5IQ,SAACC,EAAWC,GAE/B,IAAIC,EAAmB,IAAIC,MAAM,IAC7BC,EAAU,GACVC,EAAgB,GAChBC,EAAe,IAAIH,MAAM,IAE7B,GAAIH,EAAUnI,aAAc,CAOxB,GANAqI,EAAiBhB,KAAjB,oBACAgB,EAAiBhB,KAAjB,iBACAgB,EAAiBhB,KAAjB,2CACAgB,EAAiBhB,KAAjB,8BACAgB,EAAiBhB,KAAjB,+BAA8Cc,EAAUvH,WAAxD,OACAyH,EAAiBhB,KAAjB,sCACIc,EAAUhI,sBAAwBgI,EAAU/H,oBAC5CiI,EAAiBhB,KAAjB,4CACAgB,EAAiBhB,KAAjB,0CAAyDc,EAAUhI,oBAAnE,WACG,GAAIgI,EAAU/H,sBAAwB+H,EAAUhI,oBAEnD,GADAkI,EAAiBhB,KAAjB,6CACGc,EAAU9H,sBAAsB,CAC/B,IAAIqI,EAAWP,EAAU/H,oBAAoBuH,MAAM,KAAKgB,MACpDC,EAAaT,EAAU/H,oBAAoBuH,MAAM,KAAKb,MAAM,GAAG,GAAGmB,KAAK,KAC3EI,EAAiBhB,KAAjB,kCAAiDqB,EAAjD,OACAL,EAAiBhB,KAAjB,oCAAmDuB,EAAnD,YAEAP,EAAiBhB,KAAjB,iCAAgDc,EAAU/H,oBAA1D,MAGRiI,EAAiBhB,KAAjB,4BAGJ,IAAIwB,EAAW,GAyGf,OAvGIA,EADAV,EAAU3H,iBACF,sBAAkB2H,EAAU5H,cAA5B,MAEA,qDAGZ6H,EAAYU,KAAI,SAACC,EAAYC,GACzB,IAKIC,EALAC,EAAgB,IAAIZ,MAAM,IAC1Ba,EAAY,IAAIb,MAAM,IACtBc,EAAU,QAAUL,EAAW3J,cAAgB,KACnDmJ,GAAoBa,EAGN,IAAVJ,GACAR,EAAcO,EAAW3J,eAAiB,CACtC,EAAK,GAAGiK,OAAO,EAAGN,EAAWrK,QAC7B,EAAK,IAETuK,EAAQ,KAERT,EAAcO,EAAW3J,eAAiB,CACtC,EAAK,GAAGiK,OAAO,EAAGN,EAAWrK,QAC7B,EAAK,GAAG2K,OAAOb,EAAcO,EAAW5J,mBAAmB,GAAM4J,EAAW5J,kBAAmB,MAEnG8J,EAAQ,GAAGI,OAAOb,EAAcO,EAAW3J,eAAe,GAAMoJ,EAAcO,EAAW5J,mBAAmB,KAGhH4J,EAAWxJ,eAAeuJ,KAAI,SAACQ,EAAeC,GAC1C,IAAIC,EAAK,GACTF,EAAc1K,cAAcgJ,SAAQ,SAAA6B,GAChCD,GAAa,WAAOC,EAAa3K,SAApB,MACb,IAAI4K,EAAQD,EAAa3K,SACrB4K,IACAA,EAAQA,EAAM5C,MAAM,EAAG4C,EAAMC,SAEjCR,EAAU9B,KAAV,iBAAyBqC,EAAzB,mBAAyCnC,GAAgBkC,EAAa1K,OAAtE,UAEJmK,EAAc7B,KAAd,qBAAiCkC,EAAS,EAA1C,2BAA8DP,EAAQ,EAAtE,eAA8EM,EAAc5K,OAA5F,QACAwK,EAAc7B,KAAd,qBAAiCkC,EAAS,EAA1C,kBAAqDC,EAArD,UAIJ,IAAII,EAAc,IAAItB,MAAJ,4CACuBS,EAAW3J,cADlC,wEAGE2J,EAAW3J,cAHb,gCAIK6J,EAJL,8EAOXC,EAAcjB,KAAK,OAPR,UAQX,CAACkB,EAAUlB,KAAK,QARL,qFAclBQ,EAAapB,KAAb,UAAqBuC,EAAY3B,KAAK,WAG1CM,EAAO,qBAAiBA,EAAjB,MAEO,IAAID,MAAJ,yJAOUH,EAAU7H,aAPpB,8HASkE6H,EAAU1H,YAT5E,sIAWPoI,GAXO,wIAc8CV,EAAUxH,QAdxD,0BAciFwH,EAAUzH,SAd3F,gBAeP2H,EAAiBJ,KAAK,OAff,yCAmBPM,GAnBO,ykBAkCgBJ,EAAUvH,WAlC1B,wCAmCiB2G,GAAgBY,EAAUtH,cAnC3C,+CAoCwB0G,GAAgBY,EAAUrH,qBApClD,+CAqCwByG,GAAgBY,EAAUpH,qBArClD,gDAyCP0H,EAAaR,KAAK,SCvDd4B,GAzFQ,SAAC1B,EAAWC,GAE/B,IAAIe,EAAY,IAAIb,MAAM,IACtBY,EAAgB,IAAIZ,MAAM,IAC1BD,EAAmB,IAAIC,MAAM,IAEjC,GAAIH,EAAUnI,aAAc,CAOxB,GANAqI,EAAiBhB,KAAjB,oBACAgB,EAAiBhB,KAAjB,iBACAgB,EAAiBhB,KAAjB,2CACAgB,EAAiBhB,KAAjB,8BACAgB,EAAiBhB,KAAjB,+BAA8Cc,EAAUvH,WAAxD,OACAyH,EAAiBhB,KAAjB,sCACIc,EAAUhI,sBAAwBgI,EAAU/H,oBAC5CiI,EAAiBhB,KAAjB,4CACAgB,EAAiBhB,KAAjB,0CAAyDc,EAAUhI,oBAAnE,WACG,GAAIgI,EAAU/H,sBAAwB+H,EAAUhI,oBAEnD,GADAkI,EAAiBhB,KAAjB,6CACGc,EAAU9H,sBAAsB,CAC/B,IAAIqI,EAAWP,EAAU/H,oBAAoBuH,MAAM,KAAKgB,MACpDC,EAAaT,EAAU/H,oBAAoBuH,MAAM,KAAKb,MAAM,GAAG,GAAGmB,KAAK,KAC3EI,EAAiBhB,KAAjB,kCAAiDqB,EAAjD,OACAL,EAAiBhB,KAAjB,oCAAmDuB,EAAnD,YAEAP,EAAiBhB,KAAjB,iCAAgDc,EAAU/H,oBAA1D,MAGRiI,EAAiBhB,KAAjB,4BAGJ,IAAIwB,EAAW,GAsBf,OApBIA,EADDV,EAAU3H,iBACD,sBAAkB2H,EAAU5H,cAA5B,MAEA,qDAGZ6H,EAAYR,SAAQ,SAACmB,EAAYC,GAC7B,IAAIQ,EAAK,GACTT,EAAWnK,cAAcgJ,SAAQ,SAAA6B,GAC7BD,GAAa,WAAOC,EAAa3K,SAApB,MACb,IAAI4K,EAAQD,EAAa3K,SACtB4K,IACCA,EAAQA,EAAM5C,MAAM,EAAE4C,EAAMC,SAEhCR,EAAU9B,KAAV,cAAsBqC,EAAtB,mBAAsCnC,GAAgBkC,EAAa1K,OAAnE,UAEJmK,EAAc7B,KAAd,kBAA8B2B,EAAQ,EAAtC,2BAA0DA,EAAQ,EAAlE,eAA0ED,EAAWrK,OAArF,QACAwK,EAAc7B,KAAd,kBAA8B2B,EAAQ,EAAtC,kBAAiDQ,EAAjD,UAIG,IAAIlB,MAAJ,qHAMiBH,EAAU7H,aAN3B,MAOH,qCAPG,mFAQyE6H,EAAU1H,YARnF,sIAUAoI,GAVA,0GAaoBV,EAAUvH,WAb9B,qCAcqB2G,GAAgBY,EAAUtH,cAd/C,4CAe4B0G,GAAgBY,EAAUrH,qBAftD,4CAgB4ByG,GAAgBY,EAAUpH,qBAhBtD,4FAkBqDoH,EAAUxH,QAlB/D,0BAkBwFwH,EAAUzH,SAlBlG,gBAmBA2H,EAAiBJ,KAAK,OAnBtB,iDAuBAiB,EAAcjB,KAAK,OAvBnB,UAwBA,CAACkB,EAAUlB,KAAK,QAxBhB,uO,8EC5CE6B,GAAiBC,aAAW,CACrCC,iBAAkB,CACdC,IAAK,GACLC,KAAM,oBACNC,MAAO,oBAEXC,OAAQ,CACJ,UAAW,CACPC,YAAa,YAGrBC,UAAW,CACP,UAAW,CACPD,YAAa,YAGrBE,KAAM,CACFF,YAAa,UACbG,eAAgB,EAChBC,aAAc,IAnBQV,CAqB3BW,MAEUC,GAAyB3I,YAAW,CAC7CkC,KAAM,CACF0G,MAAO,UACPC,QAAS,OACTC,OAAQ,GACRC,WAAY,UAEhBX,OAAQ,CACJQ,MAAO,WAEXI,OAAQ,CACJzI,MAAO,EACPuI,OAAQ,EACRL,aAAc,MACdQ,gBAAiB,gBAErBX,UAAW,CACPM,MAAO,UACPM,OAAQ,EACRC,SAAU,MAIlB,SAASC,GAAcC,GACnB,IAAMlI,EAAUwH,KACRP,EAAsBiB,EAAtBjB,OAAQE,EAAce,EAAdf,UAEhB,OACI,qBACIrG,UAAWiC,YAAK/C,EAAQe,KAAT,eACVf,EAAQiH,OAASA,IAF1B,SAKKE,EACG,cAAC,KAAD,CAAOrG,UAAWd,EAAQmH,YAEtB,qBAAKrG,UAAWd,EAAQ6H,WAM5C,IAAMM,GAAYtJ,aAAW,SAACC,GAAD,MAAY,CACrCiC,KAAM,CACF3B,MAAO,OACPF,UAAW,IAEfkJ,OAAQ,CACJC,YAAavJ,EAAME,QAAQ,GAC3BsJ,aAAcxJ,EAAME,QAAQ,IAEhCuJ,aAAc,CACVrJ,UAAWJ,EAAME,QAAQ,GACzBsJ,aAAcxJ,EAAME,QAAQ,QASpC,IA0DewJ,GA1DE,SAAC,GAAsG,IAApGC,EAAmG,EAAnGA,WAA0BC,GAAyE,EAAvFC,aAAuF,EAAzED,aAAaE,EAA4D,EAA5DA,WAAYC,EAAgD,EAAhDA,WAAYC,EAAoC,EAApCA,gBAAiBC,EAAmB,EAAnBA,aAC1F/I,EAAUmI,KACVa,EALC,CAAC,iBAAkB,cAAe,uBAQzC,OACI,sBAAKlI,UAAWd,EAAQe,KAAxB,UACI,8BACK0H,IAAeO,EAAMxC,OAClB,8BACKsC,EACG,gCACI,qBAAK3H,MAAO,CAAEpC,OAAQ,IAAtB,SACI,cAACkK,GAAA,EAAD,CAAQC,SAAS,yBAAyBC,KAAMJ,EAAcpG,QAAQ,WAAW8E,MAAM,UAAvF,wBAEJ,cAACwB,GAAA,EAAD,CAAQtG,QAAQ,WAAW8E,MAAM,YAAY/F,QAASgH,EAAa5H,UAAWd,EAAQoI,OAAtF,mBAGA,cAACa,GAAA,EAAD,CAAQtG,QAAQ,YAAYjB,QAASkH,EAAY9H,UAAWd,EAAQoI,OAAQX,MAAM,UAAlF,qBAGK,OAGb,gCACI,cAACwB,GAAA,EAAD,CACIhG,SAAyB,IAAfwF,EACV/G,QAASkH,EACT9H,UAAWd,EAAQoI,OAHvB,kBAOA,cAACa,GAAA,EAAD,CACItG,QAAQ,YACR8E,MAAM,UACN/F,QAASmH,EACT/H,UAAWd,EAAQoI,OAJvB,SAMKK,IAAeO,EAAMxC,OAAS,EAAI,2BAA6B,cAKpF,cAAC4C,GAAA,EAAD,CACIvC,kBAAgB,EAChB4B,WAAYA,EACZY,UAAW,cAAC1C,GAAD,IAHf,SAKKqC,EAAMrD,KAAI,SAAC3D,GAAD,OACP,cAACsH,GAAA,EAAD,UACI,cAACC,GAAA,EAAD,CAAWC,kBAAmBvB,GAA9B,SAA8CjG,KADvCA,Y,kDChJlByH,GAAa,CACtB,GACA,qBACA,6BACA,uBACA,qBACA,oBACA,qBACA,6BACA,0BACA,2BACA,6BACA,oBACA,mBACA,sBACA,qBACA,oBACA,4BACA,4BACA,8BACA,+BACA,8BACA,wBACA,0BACA,uBACA,oBACA,yBACA,uBACA,6BACA,qBACA,uBACA,mBACA,qBACA,wBACA,sBACA,mBACA,kBACA,qBACA,oBACA,uBACA,iBACA,qBACA,uBACA,uBACA,0BACA,sBACA,qBACA,oBACA,wBCmFWC,GAnHU,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,SAAU9D,EAAwC,EAAxCA,MAAO+D,EAAiC,EAAjCA,OAAQnO,EAAyB,EAAzBA,cAAeoO,EAAU,EAAVA,IAC1D7J,EAAUpB,IAD0D,EAEnCqB,qBAAWpC,GAFwB,mBAEnEiM,EAFmE,KAEhDvL,EAFgD,OAGnC0B,qBAAWlC,GAHwB,mBAGnEgM,EAHmE,KAGhD1L,EAHgD,OAIhD2L,IAAM9J,SAAS,MAJiC,mBAI5DC,GAJ4D,aAKpCD,oBAAS,WAC3C,OAAIyJ,EACOI,EAEAD,EAAkBjE,GAAOzJ,kBATkC,mBAKnE6N,EALmE,KAKtDC,EALsD,KAa1E9J,qBAAU,WAEF8J,EADAP,EACeI,EAEAD,EAAkBjE,GAAOzJ,kBAE7C,CAAC2N,EAAmBD,IAEvB,IAAMK,EAAoB,SAAC9O,EAAImF,EAAM4J,GACjC,IAAMC,EAAM,YAAOJ,GACfK,EAASD,EAAOE,WAAU,SAAAC,GAAC,OAAIA,EAAEnP,KAAOwO,KACtCY,EAAiBJ,EAAOC,GAAQ7O,cAAckK,KAAI,SAAAjB,GAKpD,OAJIrJ,IAAOqJ,EAAEhJ,MACTgJ,EAAElE,GAAQ4J,EACV1F,EAAElE,EAAO,UAAW,GAEjBkE,KAGX,GADA2F,EAAOC,GAAQ7O,cAAgBgP,EAC3Bd,EACAtL,EAAU,CAAE7B,KAAM,SAAUC,KAAM4N,QAC/B,CACH,IAAIK,EAAQ,YAAOZ,GACnBY,EAAS7E,GAAOzJ,eAAiBiO,EACjC9L,EAAU,CAAE/B,KAAM,SAAUC,KAAMiO,MAgC1C,OACI,qBAAK5J,UAAWiC,YAAK/C,EAAQjB,OAAQiB,EAAQf,cAA7C,SACKxD,EAAckK,KAAI,SAACW,EAAcqE,GAAf,OACf,gCACI,cAAC3H,EAAA,EAAD,CAAalC,UAAWiC,YAAK/C,EAAQjB,OAAQiB,EAAQb,UAAWa,EAAQf,cAAxE,SACI,cAACkE,EAAA,EAAD,CACI9H,GAAI,WAAasP,EACjBhM,MAAOsL,EAAYL,GAAQnO,cAAckP,GAAShP,SAClDoG,SAAU,SAACzB,EAAOkD,GACdrD,EAASqD,GACT2G,EAAkB7D,EAAa5K,IAAK,WAAY8H,IAEpDM,QAAS2F,GACTtF,YAAa,SAACJ,GAAD,OAAY,cAAClB,EAAA,EAAD,2BAAekB,GAAf,IAAuBjB,MAAOwD,EAAazK,cAAemG,MAAM,gBAAgBW,QAAQ,WAAW/C,WAAY0G,EAAazK,cAAgB,sDAAwD,WAGrO,cAACmH,EAAA,EAAD,CAAalC,UAAWiC,YAAK/C,EAAQjB,OAAQiB,EAAQb,UAAWa,EAAQf,cAAxE,SACI,cAACwD,EAAA,EAAD,CAASC,MAAO,cAACJ,EAAA,EAAD,CAAYK,QAAQ,QAApB,SAA6B,yHAAsI3C,QAAS,CAAE4C,QAAS5C,EAAQT,aAA/M,SACI,cAACsD,EAAA,EAAD,CACIxH,GAAI,QAAUsP,EACdnK,KAAK,QACLwB,MAAM,sBACNW,QAAQ,WACRhE,MAAOsL,EAAYL,GAAQnO,cAAckP,GAAS/O,MAClDmG,SAAU,SAAAzB,GAAK,OAAI6J,EAAkB7D,EAAa5K,IAAK4E,EAAMC,OAAOC,KAAMF,EAAMC,OAAO5B,cAInG,cAACqE,EAAA,EAAD,CAAalC,UAAWiC,YAAK/C,EAAQjB,QAArC,SACI,cAAC6L,GAAA,EAAD,CAAY3H,SAAmC,IAAzBxH,EAAc+K,OAAc9E,QAAS,kBA5ChD,SAACrG,GAC5B,IAAMgP,EAAM,YAAOJ,GACfK,EAASD,EAAOE,WAAU,SAAAC,GAAC,OAAIA,EAAEnP,KAAOwO,KACxCgB,EAASR,EAAOC,GAAQ7O,cAAc8O,WAAU,SAAAC,GAAC,OAAIA,EAAE9O,MAAQL,KAEnE,GADAgP,EAAOC,GAAQ7O,cAAcqP,OAAOD,EAAQ,GACxClB,EACAtL,EAAU,CAAE7B,KAAM,SAAUC,KAAM4N,QAC/B,CACH,IAAIK,EAAQ,YAAOZ,GACnBY,EAAS7E,GAAOzJ,eAAiBiO,EACjC9L,EAAU,CAAE/B,KAAM,SAAUC,KAAMiO,KAkC2CK,CAAuBzE,EAAa5K,MAArG,SACI,cAAC,KAAD,QAGR,cAACsH,EAAA,EAAD,CAAalC,UAAWiC,YAAK/C,EAAQjB,QAArC,SACI,cAAC6L,GAAA,EAAD,CAAYlJ,QAAS,kBA9Db,WACxB,IAAM2I,EAAM,YAAOJ,GACfK,EAASD,EAAOE,WAAU,SAAAC,GAAC,OAAIA,EAAEnP,KAAOwO,KAE5C,GADAQ,EAAOC,GAAQ7O,cAAcyI,KAAK,CAAExI,IAAKJ,cAAUK,SAAU,GAAIqP,UAAW,KACxErB,EACAtL,EAAU,CAAE7B,KAAM,SAAUC,KAAM4N,QAC/B,CACH,IAAIK,EAAQ,YAAOZ,GACnBY,EAAS7E,GAAOzJ,eAAiBiO,EACjC9L,EAAU,CAAE/B,KAAM,SAAUC,KAAMiO,KAqDKO,IAA3B,SACI,cAAC,KAAD,UAhCF3E,EAAa5K,WCLxBwP,GAxES,SAAC,GAA8B,IAA5BvB,EAA2B,EAA3BA,SAAU9D,EAAiB,EAAjBA,MAC3B7F,GAD4C,EAAV6J,IACxBjL,KADkC,EAEXqB,qBAAWpC,GAFA,mBAE3CiM,EAF2C,KAExBvL,EAFwB,OAGX0B,qBAAWlC,GAHA,mBAG3CgM,EAH2C,KAGxB1L,EAHwB,OAIZ6B,oBAAS,WAC3C,OAAIyJ,EACOI,EAEAD,EAAkBjE,GAAOzJ,kBARU,mBAI3C6N,EAJ2C,KAI9BC,EAJ8B,KAYlD9J,qBAAU,WAEF8J,EADAP,EACeI,EAEAD,EAAkBjE,GAAOzJ,kBAE7C,CAAC2N,EAAmBD,IAsBvB,OACI,cAAC5I,EAAA,EAAD,CAAW1B,SAAS,KAApB,SACKyK,EAAYtE,KAAI,SAACC,EAAYiF,GAAb,OACb,gCACI,0CAAaA,EAAS,KACtB,cAAC7H,EAAA,EAAD,CAAalC,UAAWiC,YAAK/C,EAAQjB,OAAQiB,EAAQb,UAAWa,EAAQf,cAAxE,SACI,cAACwD,EAAA,EAAD,CAASC,MAAO,cAACJ,EAAA,EAAD,CAAYK,QAAQ,QAApB,4DAA6F3C,QAAS,CAAE4C,QAAS5C,EAAQT,aAAzI,SACI,cAACsD,EAAA,EAAD,CACIF,QAAQ,WACRG,MAAO8C,EAAWpK,YAClBgF,KAAK,SACLwB,MAAM,SACNpC,WAAYgG,EAAWpK,YAAc,kDAAoD,KACzFmD,MAAOiH,EAAWrK,OAClBwG,SAAU,SAAAzB,GAAK,OAjCZ,SAACjF,EAAIiF,GAChC,IAAM6K,EAAiBlB,EAAYtE,KAAI,SAAAjB,GAKnC,OAJIrJ,IAAOqJ,EAAErJ,KACTqJ,EAAEpE,EAAMC,OAAOC,MAAQF,EAAMC,OAAO5B,MACpC+F,EAAEpE,EAAMC,OAAOC,KAAO,UAAW,GAE9BkE,KAGX,GAAIiF,EACAtL,EAAU,CAAE7B,KAAM,SAAUC,KAAM0O,QAC/B,CACH,IAAM3H,EAAWsG,EACjBtG,EAASqC,GAAOzJ,eAAiB+O,EACjC5M,EAAU,CAAE/B,KAAM,SAAUC,KAAM+G,IAEtC0G,EAAeiB,GAiB4BC,CAAuBxF,EAAWvK,GAAIiF,UAIrE,cAAC0C,EAAA,EAAD,CAAalC,UAAWiC,YAAK/C,EAAQjB,OAAQiB,EAAQf,cAArD,SACI,cAAC,GAAD,CACI0K,SAAUA,EACV9D,MAAOA,EACP+D,OAAQiB,EACRhB,IAAKjE,EAAWvK,GAChBI,cAAemK,EAAWnK,oBArB5BmK,EAAWvK,UCvC/BuE,GACM,qDADNA,GAEa,qCAFbA,GAGiB,6RAyIRyL,GAtIS,WACpB,IAAMrL,EAAUpB,IADU,EAEMqB,qBAAWpC,GAFjB,mBAEnBoM,EAFmB,KAENxL,EAFM,OAGIyB,mBAAS,GAHb,mBAGnBnE,EAHmB,KAGVuP,EAHU,OAIwBpL,mBAAS,CAAEqL,EAAG,KAJtC,mBAInBC,EAJmB,KAIAC,EAJA,OAKgCvL,oBAAS,GALzC,mBAKnBwL,EALmB,KAKIC,EALJ,KAO1BvL,qBAAU,WACN6J,EAAYxF,SAAQ,SAAAC,GAChB+G,EAAqB,2BAAKD,GAAN,eAA+B9G,EAAErJ,GAAKqJ,EAAEzI,sBAEjE,IAEH,IAAMmP,EAAyB,SAAC/P,EAAIiF,GAAW,IAAD,EAClBA,EAAMC,OAAtB5B,EADkC,EAClCA,MAAO6B,EAD2B,EAC3BA,KACT2K,EAAiBlB,EAAYtE,KAAI,SAAAjB,GAcnC,OAbIrJ,IAAOqJ,EAAErJ,KACTqJ,EAAElE,GAAQ7B,EACV+F,EAAElE,EAAO,UAAW,EACP,kBAATA,EACAiL,EAAqB,2BAAKD,GAAN,eAA+BnQ,EAAKsD,KACxC,sBAAT6B,IACHoL,OAAOvB,OAAOmB,GAAmBK,SAASlN,GAC1CgN,GAAyB,GAEzBA,GAAyB,KAI9BjH,KAEXjG,EAAS,CAAEjC,KAAM,SAAUC,KAAM0O,KAwBrC,OACI,cAACjK,EAAA,EAAD,CAAW1B,SAAS,KAApB,SACKyK,EAAYtE,KAAI,SAACC,EAAYC,GAAb,OACb,gCACI,+CAAkBA,EAAQ,KAC1B,cAAC7C,EAAA,EAAD,CAAalC,UAAWiC,YAAK/C,EAAQjB,OAAQiB,EAAQb,UAAWa,EAAQf,cAAxE,SACI,cAACwD,EAAA,EAAD,CAASC,MAAO,cAACJ,EAAA,EAAD,CAAYK,QAAQ,QAApB,SAA6B/C,KAAiCI,QAAS,CAAE4C,QAAS5C,EAAQT,aAA1G,SACI,cAACsD,EAAA,EAAD,CACIC,MAAO8C,EAAWpK,YAClBgF,KAAK,SACLwB,MAAM,gCACNW,QAAQ,WACR/C,WAAYgG,EAAWpK,YAAc,kDAAoD,KACzFmD,MAAOiH,EAAWrK,OAClBwG,SAAU,SAAAzB,GAAK,OAAI8K,EAAuBxF,EAAWvK,GAAIiF,UAMrE,kDACA,cAAC0C,EAAA,EAAD,CAAalC,UAAWiC,YAAK/C,EAAQjB,OAAQiB,EAAQb,UAAWa,EAAQf,cAAxE,SACI,cAACwD,EAAA,EAAD,CAASC,MAAO,cAACJ,EAAA,EAAD,CAAYK,QAAQ,QAApB,SAA6B/C,KAAwCI,QAAS,CAAE4C,QAAS5C,EAAQT,aAAjH,SACI,cAACsD,EAAA,EAAD,CACIC,MAAO8C,EAAWzJ,mBAClBqE,KAAK,gBACLwB,MAAM,iBACNW,QAAQ,WACR/C,WAAYgG,EAAWzJ,mBAAqB,kDAAoD,KAChGwC,MAAOiH,EAAW3J,cAClB8F,SAAU,SAAAzB,GAAK,OAAI8K,EAAuBxF,EAAWvK,GAAIiF,UAIrE,cAAC0C,EAAA,EAAD,CAAalC,UAAWiC,YAAK/C,EAAQjB,OAAQiB,EAAQb,UAAWa,EAAQf,cAAxE,SACI,cAACwD,EAAA,EAAD,CAASC,MAAO,cAACJ,EAAA,EAAD,CAAYK,QAAQ,QAApB,SAA6B/C,KAA4CI,QAAS,CAAE4C,QAAS5C,EAAQT,aAArH,SACI,cAACsD,EAAA,EAAD,CACIC,MAAQ8C,EAAW1J,wBAA0BwP,EAC7ClL,KAAK,oBACLwB,MAAM,oBACNW,QAAQ,WACR/C,WAAYgG,EAAW1J,uBAAyB,kDAAqDwP,EAAwB,wBAA0B,KACvJ/M,MAAOiH,EAAW5J,kBAClB+F,SAAU,SAAAzB,GAAK,OAAI8K,EAAuBxF,EAAWvK,GAAIiF,UAMrE,iDACA,eAAC0C,EAAA,EAAD,CAAaL,QAAQ,WAAW7B,UAAWiC,YAAK/C,EAAQjB,OAAQiB,EAAQb,UAAWa,EAAQf,cAA3F,UACI,eAAC6M,EAAA,EAAD,eAAe,oBACf,cAACC,EAAA,EAAD,CACIC,QAAM,EACNrN,MAAOiH,EAAW7J,QAClBgG,SAAU,SAAAnB,GAAC,OA5EN,SAACA,EAAGiF,GAAW,IAChClH,EAAUiC,EAAEL,OAAZ5B,MACR,GAAI5C,EAAU4C,EAAO,CAEjB,IADA,IAAIsN,EAAI,YAAOhC,GACNvF,EAAI3I,EAAS2I,EAAI/F,EAAO+F,IAC7BuH,EAAKpG,GAAOzJ,eAAe8H,KAAK,CAAE7I,GAAIC,cAAUC,OAAQ,GAAIC,aAAa,EAAOC,cAAe,CAAC,CAAEC,IAAKJ,cAAUK,SAAU,GAAIC,MAAO,GAAIC,eAAe,MAE7JoQ,EAAKpG,GAAO9J,QAAU4C,EACtBF,EAAS,CAAEjC,KAAM,SAAUC,KAAMwP,IACjCX,EAAW3M,QACR,GAAI5C,EAAU4C,GAASA,GAAS,EAAG,CAEtC,IADA,IAAIsN,EAAI,YAAOhC,GACNvF,EAAI,EAAGA,EAAI3I,EAAU4C,EAAO+F,IACjCuH,EAAKpG,GAAOzJ,eAAeoJ,MAE/ByG,EAAKpG,GAAO9J,QAAU4C,EACtBF,EAAS,CAAEjC,KAAM,SAAUC,KAAMwP,IACjCX,EAAW3M,IA2DoBuN,CAAqBtL,EAAGiF,IACvC7D,MAAM,iBACNmK,WAAY,CACR3L,KAAM,WANd,SAUQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAImF,KAAI,SAAAjB,GAChC,OAAO,wBAAgB/F,MAAO+F,EAAvB,SAA2BA,GAAdA,WAKpC,cAAC,GAAD,CACIiF,UAAU,EACV9D,MAAOA,EACPgE,IAAKjE,EAAWvK,OApEduK,EAAWvK,U,oBCzE/B8M,GAAYtJ,aAAW,SAACC,GAAD,MAAY,CACrCiC,KAAM,CACF3B,MAAO,OACPF,UAAW,GACXI,UAAW,YAuBJ8M,GAlBI,SAACC,GAChB,IAAMrM,EAAUmI,KAEhB,OACI,cAACjH,EAAA,EAAD,CAAW1B,SAAS,KAAKsB,UAAWd,EAAQe,KAA5C,SACI,cAAC,KAAD,CAAmBuL,SAAS,SACxBnL,MAAOoL,KACPC,iBAAiB,EACjBC,aAAc,CAAEtL,MAAO,CAAEuL,YAAa,oBAH1C,SAKKL,EAAWA,gBCNtBlE,GAAYtJ,aAAW,SAACC,GAAD,MAAY,CACrC6N,YAAa,CACT5N,OAAQD,EAAME,QAAQ,GACtBI,MAAM,QAEVwN,YAAa,CACT1N,UAAWJ,EAAME,QAAQ,IAG7BoJ,OAAQ,CACJrJ,OAAQD,EAAME,QAAQ,IAE1B6N,IAAK,CACDpF,MAAO,UACPqF,eAAgB,YAChBC,UAAW,cAKJ,SAASC,KACpB,IAAMhN,EAAUmI,KADW,EAGYlI,qBAAWlC,GAHvB,mBAGpBgM,EAHoB,KAGD1L,EAHC,OAIY4B,qBAAWpC,GAJvB,mBAIpBiM,EAJoB,KAIDvL,EAJC,OAKQ0B,qBAAWjC,GALnB,mBAKpBQ,EALoB,KAKJC,EALI,OAOSyB,mBAAS,GAPlB,mBAOpBuI,EAPoB,KAORwE,EAPQ,OAQa/M,mBAAS,IARtB,mBAQpB6I,EARoB,KAQNmE,EARM,OASGhN,mBAAS,GATZ,mBASpBnE,EAToB,KASXuP,EATW,OAUmBpL,oBAAS,GAV5B,mBAUpB4I,EAVoB,KAUHqE,EAVG,OAWSjN,mBAAS,IAXlB,mBAWpBmM,EAXoB,KAWRe,EAXQ,OAY2BjP,sBAClD,SAAC7B,EAAOoO,GAAR,mBAAC,eAA0BpO,GAAUoO,KACrC,CACI1N,qBAAqB,EACrBC,qBAAqB,EACrBE,cAAc,EACdC,eAAe,EACfE,aAAa,EACbC,UAAU,EACVC,SAAS,EACTC,YAAY,EACZC,cAAc,EACdC,qBAAqB,EACrBC,qBAAqB,IAzBF,oBAYpBkC,GAZoB,MAYCC,GAZD,SA6BWG,oBAAS,WAC3C,OAAI1B,EAAe7B,cACRoN,EAEAD,KAjCY,qBA6BpBG,GA7BoB,MA6BPC,GA7BO,MAsC3B9J,qBAAU,WACF5B,EAAe7B,cACfuN,GAAeH,GAEfG,GAAeJ,KAEpB,CAACC,EAAmBD,IAEvB1J,qBAAU,WAEN,GADAkL,EAAW,GACP9M,EAAe7B,cAAe,CAC9B,IAAI0Q,EAAgB,CAAC,CAAEhS,GAAIC,cAAUC,OAAQ,GAAIC,aAAa,EAAOC,cAAe,CAAC,CAAEC,IAAKJ,cAAUK,SAAU,GAAIC,MAAO,GAAIC,eAAe,MAC9IwC,EAAU,CAAE7B,KAAM,SAAUC,KAAM4Q,IAClCnD,GAAemD,OACZ,CACH,IAAIC,EAAgB,CAAC,CAAEjS,GAAIC,cAAUS,QAAS,EAAGC,kBAAmB,GAAIC,cAAe,GAAIV,OAAQ,GAAIW,wBAAwB,EAAOC,oBAAoB,EAAOX,aAAa,EAAOY,eAAgB,CAAC,CAAEf,GAAIC,cAAUC,OAAQ,GAAIC,aAAa,EAAOC,cAAe,CAAC,CAAEC,IAAKJ,cAAUK,SAAU,GAAIC,MAAO,GAAIC,eAAe,QAC/T0C,EAAU,CAAE/B,KAAM,SAAUC,KAAM6Q,IAClCpD,GAAeoD,MAEpB,CAAC9O,EAAe7B,gBAEnByD,qBAAU,WACN8M,EAAgB,IAChBC,GAAmB,KACpB,CAAC3O,EAAe7B,gBAGnByD,qBAAU,WACFmN,aAAaC,QAAQ,mBACrB/O,EAAS,CAAEjC,KAAM,SAAUC,KAAMgH,KAAKgK,MAAMF,aAAaC,QAAQ,uBAEtE,IAEHpN,qBAAU,WACNmN,aAAaG,QAAQ,iBAAkBjK,KAAKC,UAAUlF,MACvD,CAACA,IAGJ,IAAMmP,GAAe,SAACnP,EAAgByL,GAClC,IAAI2D,EAEAA,EADApP,EAAe7B,cACR+J,GAAelI,EAAgByL,GAE/BlF,GAAevG,EAAgByL,GAG1C,IAAMxN,EAAO,IAAIoR,KAAK,CAACD,EAAK9I,KAAK,OAAQ,CAAEtI,KAAM,eAGjD,OAFA4Q,EAAcQ,EAAK9I,KAAK,OACH,KAAjBiE,GAAqB+E,OAAOC,IAAIC,gBAAgBjF,GAC7C+E,OAAOC,IAAIE,gBAAgBxR,IAvFX,SAoLZkM,KApLY,8EAoL3B,4BAAAuF,EAAA,sEAC6BP,GAAanP,EAAgByL,IAD1D,OACQkE,EADR,OAEIjB,EAAgBiB,GAChBhB,GAAmB,GAHvB,4CApL2B,sBA4N3B,OACI,gCACI,sBAAKhM,MAAO,CAAEiN,MAAO,SAAUrP,OAAQ,IAAvC,UACI,cAAC,IAAD,CAAM+B,UAAWd,EAAQ6M,IAAKwB,GAAG,IAAjC,+BACA,uCACA,cAAC,IAAD,CAAMvN,UAAWd,EAAQ6M,IAAKwB,GAAG,SAAjC,kCAEJ,8BACoB,IAAf5F,EACG,cAAC,GAAD,CACI3I,oBAAqBA,GACrBC,uBAAwBA,KAEb,IAAf0I,EACA,eAACvH,EAAA,EAAD,WACK1C,EAAe7B,cACZ,yDAEA,yDAEJ,eAACqG,EAAA,EAAD,CAAaL,QAAQ,WAAW7B,UAAWd,EAAQ2M,YAAnD,UACI,eAACb,EAAA,EAAD,eAAetN,EAAe5B,cAAgB,eAAiB,oBAC/D,cAACmP,EAAA,EAAD,CACIC,QAAM,EACNrN,MAAO5C,EACPgG,SAAU,SAAAnB,GAAC,OA3DV,SAACA,GAAO,IACzBjC,EAAUiC,EAAEL,OAAZ5B,MACR,GAAI5C,EAAU4C,EAAO,CACjB,IAAIsN,EAAI,YAAOhC,IACf,GAAIzL,EAAe7B,cAAe,CAC9B,IAAK,IAAI+H,EAAI3I,EAAS2I,EAAI/F,EAAO+F,IAC7BuH,EAAK/H,KAAK,CAAE7I,GAAIC,cAAUC,OAAQ,GAAIC,aAAa,EAAOC,cAAe,CAAC,CAAEC,IAAKJ,cAAUK,SAAU,GAAIC,MAAO,GAAIC,eAAe,MAEvIwC,EAAU,CAAE7B,KAAM,SAAUC,KAAMwP,IAClC/B,GAAe+B,OACZ,CACH,IAAK,IAAIvH,EAAI3I,EAAS2I,EAAI/F,EAAO+F,IAC7BuH,EAAK/H,KAAK,CAAE7I,GAAIC,cAAUS,QAAS,EAAGC,kBAAmB,GAAIC,cAAe,GAAIV,OAAQ,GAAIW,wBAAwB,EAAOC,oBAAoB,EAAOX,aAAa,EAAOY,eAAgB,CAAC,CAAEf,GAAIC,cAAUC,OAAQ,GAAIC,aAAa,EAAOC,cAAe,CAAC,CAAEC,IAAKJ,cAAUK,SAAU,GAAIC,MAAO,GAAIC,eAAe,QAExT0C,EAAU,CAAE/B,KAAM,SAAUC,KAAMwP,IAClC/B,GAAe+B,GAEnBX,EAAW3M,QACR,GAAI5C,EAAU4C,GAASA,GAAS,EAAG,CAEtC,IADA,IAAIsN,EAAI,YAAOhC,IACNvF,EAAI,EAAGA,EAAI3I,EAAU4C,EAAO+F,IACjCuH,EAAKzG,MAELhH,EAAe7B,eACf0B,EAAU,CAAE7B,KAAM,SAAUC,KAAMwP,IAClC/B,GAAe+B,KAEf1N,EAAU,CAAE/B,KAAM,SAAUC,KAAMwP,IAClC/B,GAAe+B,IAEnBX,EAAW3M,IA6BwBuN,CAAqBtL,IACpCoB,MAAM,iBACNmK,WAAY,CACR3L,KAAM,WANd,SAUQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAImF,KAAI,SAAAjB,GAChC,OAAO,wBAAgB/F,MAAO+F,EAAvB,SAA2BA,GAAdA,WAKnClG,EAAe7B,cACZ,cAAC,GAAD,CACIgN,UAAU,EACV9D,MAAO,EACPgE,IAAK,IAET,cAAC,GAAD,OAKR,gCACI,8CACCf,EAAkB,cAAC,GAAD,CAAYuD,WAAYA,IAAiB,UAaxE,cAAC,GAAD,CACI5D,WAAYA,EACZE,aAAcA,GACdC,WA5HO,WAGXqE,EADkB,IADDxE,EAEH,SAAC6F,GAAD,OAAoBA,EAAiB,GAErC,SAACA,GAAD,OAAoBA,EAAiB,KAwH/CzF,WA3IO,WAGf,GA7De,WACf,IAAIxE,GAAS,EACTkK,EAAO,GACX,GAAmB,IAAf9F,EAAkB,CAElB,IADA,IAAM4B,EAAM,eAAQvK,IACpB,MAAkB8L,OAAO4C,KAAKnE,GAA9B,eAAuC,CAAlC,IAAMoE,EAAG,KACkB,OAAxBjQ,EAAeiQ,IAAgD,IAA/BjQ,EAAeiQ,GAAKjI,SAG5C+H,EAFJ/P,EAAe3B,aACH,wBAAR4R,GAAiCjQ,EAAezB,cAEjC,wBAAR0R,GAAiCjQ,EAAe1B,aADnD,2BAAQyR,GAAR,kBAAeE,GAAM,IAIrB,2BAAQF,GAAR,kBAAeE,GAAM,IAGjB,wBAARA,GAAyC,wBAARA,EAC7B,2BAAQF,GAAR,kBAAeE,GAAM,IAErB,2BAAQF,GAAR,kBAAeE,GAAM,KAKzCpK,EAASuH,OAAOvB,OAAOkE,GAAMG,OAAM,SAAC/P,GAAD,OAAqB,IAAVA,KAC9CoB,GAAuB,2BAAKD,IAAwByO,SACjD,GAAmB,IAAf9F,EAAkB,CACzB,IAAM0C,EAAiBlB,GAAYtE,KAAI,SAACjB,EAAGmB,GAuBvC,OAtBAnB,EAAEnJ,OAAOiL,OAAS9B,EAAElJ,aAAc,GAAiBkJ,EAAElJ,aAAc,EAAM6I,GAAS,GAC9E7F,EAAe5B,eACD,IAAViJ,GACAnB,EAAExI,wBAAyB,EAC3BmI,GAAS,EACTK,EAAEzI,cAAcuK,OAAS9B,EAAEvI,oBAAqB,GAAiBuI,EAAEvI,oBAAqB,EAAMkI,GAAS,KAEvGK,EAAE1I,kBAAkBwK,OAAS9B,EAAExI,wBAAyB,GAAiBwI,EAAExI,wBAAyB,EAAMmI,GAAS,GACnHK,EAAEzI,cAAcuK,OAAS9B,EAAEvI,oBAAqB,GAAiBuI,EAAEvI,oBAAqB,EAAMkI,GAAS,IAE3GK,EAAEtI,eAAeqI,SAAQ,SAAAkK,GACrBA,EAAEpT,OAAOiL,OAASmI,EAAEnT,aAAc,GAAiBmT,EAAEnT,aAAc,EAAM6I,GAAS,GAClFsK,EAAElT,cAAcgJ,SAAQ,SAAAmK,GACU,MAAdA,EAAEjT,UAAoBiT,EAAEjT,SAAS6K,OACrCoI,EAAE/S,eAAgB,GAAiB+S,EAAE/S,eAAgB,EAAMwI,GAAS,UAIxFK,EAAEjJ,cAAcgJ,SAAQ,SAAAmK,GACpBA,EAAEjT,SAAS6K,OAASoI,EAAE/S,eAAgB,GAAiB+S,EAAE/S,eAAgB,EAAMwI,GAAS,MAGzFK,KAEXrG,EAAU,CAAE7B,KAAM,SAAUC,KAAM0O,IAEtC,OAAO9G,EAMCwK,GACD,CACH,IAAIP,EAAiB7F,EACrBwE,EAAcqB,EAAiB,GACR,IAAnBA,GACA3F,UAGJmG,MAAM,qBAkIFpG,YArHQ,WAChBuE,EAAc,GACdxO,EAAS,CAAEjC,KAAM,SAAUC,KAAMC,IACjC6B,EAAU,CAAE/B,KAAM,SAAUC,KAAMX,IAClCuC,EAAU,CAAE7B,KAAM,SAAUC,KAAMrB,KAkH1B0N,gBAAiBA,EACjBC,aAAcA,O,wBC5TxBZ,GAAYtJ,aAAW,SAACC,GAAD,MAAY,CACrCiC,KAAM,CACF3B,MAAO,OACPF,UAAW,IAEfkJ,OAAQ,CACJlJ,UAAWJ,EAAME,QAAQ,GACzBqJ,YAAavJ,EAAME,QAAQ,IAE/B+P,iBAAkB,CACdzG,aAAcxJ,EAAME,QAAQ,IAEhCgQ,eAAgB,CACZC,QAASnQ,EAAME,QAAQ,IAE3B6N,IAAI,CACApF,MAAO,UACPqF,eAAgB,YAChBC,UAAU,cAILvF,GAAyB3I,YAAW,CAC7CkC,KAAM,CACF0G,MAAO,UACPC,QAAS,OACTC,OAAQ,GACRC,WAAY,UAEhBX,OAAQ,CACJQ,MAAO,WAEXI,OAAQ,CACJzI,MAAO,GACPuI,OAAQ,GACRL,aAAc,MACdQ,gBAAiB,gBAErBX,UAAW,CACPM,MAAO,UACPM,OAAQ,EACRC,SAAU,MAIlB,SAASC,GAAcC,GACnB,IAAMlI,EAAUwH,KACRP,EAAsBiB,EAAtBjB,OAAQE,EAAce,EAAdf,UAEhB,OACI,qBACIrG,UAAWiC,YAAK/C,EAAQe,KAAT,eACVf,EAAQiH,OAASA,IAF1B,SAKKE,EACG,cAAC,KAAD,CAAOrG,UAAWd,EAAQmH,YAEtB,qBAAKrG,UAAWd,EAAQ6H,WAU5C,SAASqH,GAAeC,GACpB,OAAQA,GACJ,KAAK,EACD,OACI,sBAAKhO,MAAO,CAAEiO,WAAY,OAAQlQ,UAAW,QAA7C,UACI,eAACoD,EAAA,EAAD,CAAYK,QAAQ,QAAQ0M,MAAM,OAAlC,0CAAsE,mBAAGC,IAAI,aAAa/O,OAAO,SAAS4I,KAAK,+BAAzC,2BAAtE,4DACA,eAAC7G,EAAA,EAAD,CAAYK,QAAQ,QAAQ0M,MAAM,OAAlC,+EAA2G,mBAAGC,IAAI,aAAa/O,OAAO,SAAS4I,KAAK,mDAAzC,+BAA3G,WAGZ,KAAK,EACD,OACI,qBAAKhI,MAAO,CAAEiO,WAAY,OAAQlQ,UAAW,QAA7C,SACI,eAACoD,EAAA,EAAD,CAAYK,QAAQ,QAAQ0M,MAAM,OAAlC,+CAA2E,4BAAG,mDAA9E,iHAGZ,KAAK,EACD,OACI,sBAAKlO,MAAO,CAAEiO,WAAY,OAAQlQ,UAAW,QAA7C,UACI,eAACoD,EAAA,EAAD,CAAYK,QAAQ,QAAQ0M,MAAM,OAAlC,gDAA4E,4BAAG,wDAA/E,OACA,cAAC/M,EAAA,EAAD,CAAYK,QAAQ,QAAQ0M,MAAM,OAAlC,gIACA,eAAC/M,EAAA,EAAD,CAAYK,QAAQ,QAAQ0M,MAAM,OAAlC,8FAA0H,4BAAG,6CAA7H,OACA,eAAC/M,EAAA,EAAD,CAAYK,QAAQ,QAAQ0M,MAAM,OAAlC,qFAAiH,4BAAG,6CAApH,0DAGZ,QACI,MAAO,gBAInB,IAmFeE,GAnFG,WACd,IAAMvP,EAAUmI,KADI,EAEgB6B,IAAM9J,SAAS,GAF/B,mBAEbuI,EAFa,KAEDwE,EAFC,KAGdjE,EAnCC,CAAC,iBAAkB,0BAA2B,kCAqC/CH,EAAa,WACfoE,GAAc,SAACqB,GAAD,OAAoBA,EAAiB,MAGjD1F,EAAa,WACfqE,GAAc,SAACqB,GAAD,OAAoBA,EAAiB,MAOvD,OACI,eAACpN,EAAA,EAAD,CAAW1B,SAAS,KAApB,UACI,sBAAK2B,MAAO,CAAEiN,MAAM,SAAUrP,OAAQ,IAAtC,UACQ,cAAC,IAAD,CAAM+B,UAAWd,EAAQ6M,IAAKwB,GAAG,IAAjC,+BACA,sCACA,cAAC,IAAD,CAAMvN,UAAWd,EAAQ6M,IAAKwB,GAAG,SAAjC,kCAER,qBAAKlN,MAAO,CAAEjC,UAAW,IAAzB,SACI,cAACoD,EAAA,EAAD,CAAYK,QAAQ,KAApB,gIAEJ,sBAAK7B,UAAWd,EAAQe,KAAxB,UACI,cAACqI,GAAA,EAAD,CAASX,WAAYA,EAAY+G,YAAY,WAA7C,SACKxG,EAAMrD,KAAI,SAAC3D,EAAO6D,GAAR,OACP,eAACyD,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAWC,kBAAmBvB,GAA9B,SAA6C,cAAC3F,EAAA,EAAD,CAAYK,QAAQ,KAApB,SAA0BX,MACvE,eAACyN,GAAA,EAAD,WACKP,GAAerJ,GAChB,qBAAK/E,UAAWd,EAAQ+O,iBAAxB,SACI,sBAAK5N,MAAO,CAAEjC,UAAW,QAAzB,UACI,cAAC+J,GAAA,EAAD,CACIhG,SAAyB,IAAfwF,EACV/G,QAASkH,EACT9H,UAAWd,EAAQoI,OAHvB,kBAOA,cAACa,GAAA,EAAD,CACItG,QAAQ,YACR8E,MAAM,UACN/F,QAASmH,EACT/H,UAAWd,EAAQoI,OAJvB,SAMM,mBAnBXpG,QA2BlByG,IAAeO,EAAMxC,QAClB,eAACkJ,GAAA,EAAD,CAAOC,QAAM,EAACC,UAAW,EAAG9O,UAAWd,EAAQgP,eAA/C,UACI,cAAC1M,EAAA,EAAD,CAAYK,QAAQ,KAApB,qDACA,cAACL,EAAA,EAAD,CAAYK,QAAQ,KAApB,kCACA,sBAAKxB,MAAO,CAAEjC,UAAW,QAAzB,UACI,cAAC+J,GAAA,EAAD,CAAQvH,QAjDZ,WAChBuL,EAAc,IAgDoCnM,UAAWd,EAAQoI,OAAjD,mBAGA,cAACa,GAAA,EAAD,CACItG,QAAQ,YACR8E,MAAM,UACN3G,UAAWd,EAAQoI,OAHvB,SAIC,cAAC,IAAD,CAAMiG,GAAG,SAASlN,MAAO,CAAE2L,eAAgB,OAAQrF,MAAO,WAA1D,oCCxJdoI,OAlBf,WAEE,OAEE,cAAC,EAAD,UACE,eAAC,IAAD,CAAYC,SAAS,IAArB,UACE,cAACxN,EAAA,EAAD,CAAYK,QAAQ,KAAK0M,MAAM,SAASlO,MAAO,CAACjC,UAAW,QAA3D,uCACA,sBAAK4B,UAAU,MAAf,UACE,cAAC,IAAD,CAAOiP,OAAK,EAACC,KAAK,IAAIC,UAAWV,KACjC,cAAC,IAAD,CAAOS,KAAK,SAASC,UAAWjD,cCP3BkD,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAD,UACI,cAAC,GAAD,MAEJC,SAASC,eAAe,SAK1BZ,O","file":"static/js/main.182d7408.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\n//pipeline reducer\nexport const initialLinearInputState = [{ id: uuidv4(), stepID: '', stepIDCheck: false, funcsSettings: [{ fid: uuidv4(), funcName: '', funcP: '', funcNameCheck: false }] }];\nexport const initialBranchInputState = [{ id: uuidv4(), stepNum: 1, pipeSegment_srcid: '', pipeSegmentID: '', stepID: '', pipeSegment_srcidCheck: false, pipeSegmentIDCheck: false, stepIDCheck: false, linearSettings: [{ id: uuidv4(), stepID: '', stepIDCheck: false, funcsSettings: [{ fid: uuidv4(), funcName: '', funcP: '', funcNameCheck: false }] }] }];\nexport const Reducer = (state, action) => {\n    switch (action.type) {\n        case 'UPDATE': {\n            return action.data\n        }\n        default:\n            return state;\n    }\n};\n\n//basic info reducer\nexport const defaultBasicInfoInput = {\n    checkedLinear: true,\n    checkedBranch: false,\n    checkedHYDRA: true,\n    HydraOptionA: true,\n    HydraOptionB: false,\n    checkHydraTimeRange: \"\",\n    checkHydraCleanSeed: \"ctap/data/clean_seed\",\n    checkOwnHydraDataPath: false,\n    pipelineName: \"\",\n    inputdatapath: \"ctap/data/test_data\",\n    checkOwnDataPath: false,\n    projectRoot: \"\",\n    sbj_filt: \"\",\n    eegType: \"\",\n    eegChanloc: \"\",\n    eegReference: \"\",\n    eegVeogChannelNames: \"\",\n    eegHeogChannelNames: \"\"\n};\n","import React, { useReducer, createContext } from \"react\";\nimport { initialLinearInputState, initialBranchInputState, defaultBasicInfoInput, Reducer } from \"./Reducer.js\";\n\nconst ContextProvider = ({ children }) => {\n    const [inputLinearState, dispatchL] = useReducer(Reducer, initialLinearInputState);\n    const [inputBranchState, dispatchB] = useReducer(Reducer, initialBranchInputState);\n    const [basicInfoInput, dispatch] = useReducer(Reducer, defaultBasicInfoInput);\n    return (\n        <ContextBasic.Provider value={[basicInfoInput, dispatch]}>\n            <ContextLinear.Provider value={[inputLinearState, dispatchL]}>\n                <ContextBranch.Provider value={[inputBranchState, dispatchB]}>\n                    {children}\n                </ContextBranch.Provider>\n            </ContextLinear.Provider>\n        </ContextBasic.Provider>\n\n\n    )\n}\nexport const ContextBranch = createContext(initialBranchInputState);\nexport const ContextLinear = createContext(initialLinearInputState);\nexport const ContextBasic = createContext(defaultBasicInfoInput);\n\nexport default ContextProvider","import { makeStyles } from '@material-ui/core/styles';\n\nexport const FormControlStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n    withoutLabel: {\n        marginTop: theme.spacing(1),\n    },\n    textField: {\n        width: '25ch',\n    },\n    words: {\n        textAlign: \"center\",\n    },\n    customWidth: {\n        maxWidth: 500,\n    },\n}));","export const CTAP_chanlocs = [\n    '',\n    'chanlocs128_biosemi.elp',\n    'chanlocs128_biosemi_withEOG.elp',\n    'chanlocs128_cent.elp',\n    'chanlocs128_pist.elp',\n    'chanlocs160_biosemi.elp',\n    'chanlocs16_biosemi.elp',\n    'chanlocs16_biosemi_withEOG.elp',\n    'chanlocs256_biosemi.elp',\n    'chanlocs256_biosemi_withEOG.elp',\n    'chanlocs32_biosemi.elp',\n    'chanlocs64_biosemi.elp',\n    'chanlocs64_biosemi_withEOG.elp',\n    'channel_locations_acticap_32.ced'\n]\n","export default __webpack_public_path__ + \"static/media/CTAP_Linear.cab9b4e3.png\";","export default __webpack_public_path__ + \"static/media/CTAP_Branch.4d4e53a9.png\";","export default __webpack_public_path__ + \"static/media/CTAP_HYDRA.25f4ccdd.png\";","import React, { useState, useEffect, useContext } from \"react\";\nimport clsx from 'clsx';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Container from '@material-ui/core/Container';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from \"@material-ui/core/Typography\";\nimport MoreOutlinedIcon from '@material-ui/icons/MoreOutlined';\n\nimport { ContextBasic } from '../Reducers/ContextProvider'\nimport {FormControlStyles} from '../Styles/FormControlStyles'\nimport { CTAP_chanlocs } from '../Data/CTAP_chanlocs'\nimport CTAP_Linear_diagram from '../Img/CTAP_Linear.png'\nimport CTAP_Branch_diagram from '../Img/CTAP_Branch.png'\nimport CTAP_HYDRA_diagram from '../Img/CTAP_HYDRA.png';\n\nconst filter = createFilterOptions();\n\nconst helperText = {\n    checkHydraTimeRange: \"Set clean segment time range [start end] in seconds from test data\",\n    checkHydraCleanSeed: \"Name of the clean seed data file extract from test data, or clean seed data path (if not in default path)\",\n    pipelineName: \"Name a folder which contains outputs of pipes\",\n    inputdatapath: 'Input path of test data',\n    projectRoot: \"The root folder name of the current analysis.\",\n    sbj_filt: \"The unique sequence number in EEG dataset name(sbj_filt)\",\n    eegType: \"EEG Data Type, eg, .set/.bdf\",\n    eegChanloc: \"Channel Location of testing EEG data \",\n    eegReference: \"Reference channel of testing EEG data,  eg, {'L_MASTOID' 'R_MASTOID'}\",\n    eegVeogChannelNames: \"VEOG Channel Names of testing EEG data, required if performing blinks detection, eg, {'VEOG1','VEOG2'}\",\n    eegHeogChannelNames: \"HEOG Channel Names of testing EEG data, required if performing blinks detection, eg, {'HEOG1','HEOG2'}\"\n};\n\nconst BasicInfo = ({ basicInfoInputCheck, setBasicInfoInputCheck }) => {\n    let classes = FormControlStyles();\n\n    const [basicInfoInput, dispatch] = useContext(ContextBasic);\n    const [value, setValue] = useState(basicInfoInput.eegChanloc);\n\n    useEffect(() => {\n        dispatch({ type: 'UPDATE', data: { ...basicInfoInput, eegChanloc: value } });\n        setBasicInfoInputCheck({ ...basicInfoInputCheck, eegChanloc: false });\n    }, [value]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    //handle input change\n    const handleInput = event => {\n        const { name, value } = event.target;\n        dispatch({ type: 'UPDATE', data: { ...basicInfoInput, [name]: value } });\n        setBasicInfoInputCheck({ ...basicInfoInputCheck, [name]: false });\n    };\n\n    //handle checkbox change\n    const handleCheckboxChange = (event) => {\n        const { name, checked } = event.target;\n        if (name === 'checkedLinear') {\n            dispatch({ type: 'UPDATE', data: { ...basicInfoInput, 'checkedLinear': checked, 'checkedBranch': !checked } });\n        } else if (name === 'checkedBranch') {\n            dispatch({ type: 'UPDATE', data: { ...basicInfoInput, 'checkedBranch': checked, 'checkedLinear': !checked } });\n        } else if (name === 'checkOwnDataPath') {\n            dispatch({ type: 'UPDATE', data: { ...basicInfoInput, [name]: checked } });\n            // initialize data path if disable own path option\n            if (!checked) {\n                setBasicInfoInputCheck({ ...basicInfoInputCheck, inputdatapath: false });\n                dispatch({ type: 'UPDATE', data: { ...basicInfoInput, [name]: checked, inputdatapath: \"ctap/data/test_data\" } });\n            }\n        } else if(name === 'checkOwnHydraDataPath'){\n            dispatch({ type: 'UPDATE', data: { ...basicInfoInput, [name]: checked } });\n            // initialize data path if disable own path option\n            if (!checked) {\n                setBasicInfoInputCheck({ ...basicInfoInputCheck, checkHydraCleanSeed: false });\n                dispatch({ type: 'UPDATE', data: { ...basicInfoInput, [name]: checked, checkHydraCleanSeed: \"ctap/data/clean_seed\" } });\n            }\n        }\n        else {\n            dispatch({ type: 'UPDATE', data: { ...basicInfoInput, [name]: checked } });\n        }\n    };\n\n    //handle hydra option\n    const handleHydraChange = (e) => {\n        if (e.target.name === 'checkTimeRange') {\n            let p = {};\n            p = { ...p, HydraOptionA: e.target.checked, HydraOptionB: !e.target.checked };\n            if (e.target.checked) {\n                p = { ...p, 'checkHydraCleanSeed': \"ctap/data/clean_seed\" };\n                setBasicInfoInputCheck({ ...basicInfoInputCheck, 'checkHydraCleanSeed': \"ctap/data/clean_seed\" })\n            }\n            dispatch({ type: 'UPDATE', data: { ...basicInfoInput, ...p } });\n\n        } else {\n            let p = {};\n            p = { ...p, HydraOptionB: e.target.checked, HydraOptionA: !e.target.checked };\n            if (e.target.checked) {\n                p = { ...p, 'checkHydraTimeRange': '' }\n                setBasicInfoInputCheck({ ...basicInfoInputCheck, 'checkHydraTimeRange': false })\n            }\n            dispatch({ type: 'UPDATE', data: { ...basicInfoInput, ...p } });\n        }\n    }\n\n    // console.log(basicInfoInputCheck);\n    // console.log(basicInfoInput)\n    return (\n        <div className={classes.root} noValidate autoComplete=\"off\">\n            <Container maxWidth=\"md\" style={{ marginTop: '3rem' }}>\n                <h4 >What type of pipeline* you would like to generate?</h4>\n                <Accordion style={{ width: 750, margin: '0 auto' }}>\n                    <AccordionSummary\n                        expandIcon={<MoreOutlinedIcon />}\n                        aria-label=\"Expand\"\n                        aria-controls=\"additional-actions1-content\"\n                        id=\"additional-actions1-header\"\n                    >\n                        <FormControlLabel\n                            aria-label=\"Acknowledge\"\n                            onClick={(event) => event.stopPropagation()}\n                            onFocus={(event) => event.stopPropagation()}\n                            control={<Checkbox checked={basicInfoInput.checkedLinear} onChange={handleCheckboxChange} name=\"checkedLinear\" />}\n                            label=\"Linear Pipeline\"\n                        />\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <img src={CTAP_Linear_diagram} alt='' width=\"700\" />\n                    </AccordionDetails>\n                </Accordion>\n                <Accordion style={{ width: 750, margin: '0 auto' }}>\n                    <AccordionSummary\n                        expandIcon={<MoreOutlinedIcon />}\n                        aria-label=\"Expand\"\n                        aria-controls=\"additional-actions1-content\"\n                        id=\"additional-actions1-header\"\n                    >\n                        <FormControlLabel\n                            aria-label=\"Acknowledge\"\n                            onClick={(event) => event.stopPropagation()}\n                            onFocus={(event) => event.stopPropagation()}\n                            control={<Checkbox checked={basicInfoInput.checkedBranch} onChange={handleCheckboxChange} name=\"checkedBranch\" />}\n                            label=\"Branch Pipeline\"\n                        />\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <img src={CTAP_Branch_diagram} alt='' width=\"700\" />\n                    </AccordionDetails>\n                </Accordion>\n                <h5 className={classes.words}>* Click Linear and Brach tabs to see diagrams describe these two different pipelines. </h5>\n                <h5 className={classes.words}>* linear pipeline using different setpSets to group CTAP functions, the processing sequence depends on setpSets order. Branch pipeline generates sub-functions including predefined executable CTAP functions, which provides a more clear and flexible modular way to group functions. </h5>\n                <hr></hr>\n                <div>\n                    <h4>HYDRA?</h4>\n                    <Accordion style={{ width: 750, margin: '0 auto' }}>\n                        <AccordionSummary\n                            expandIcon={<MoreOutlinedIcon />}\n                            aria-controls=\"panel1a-content\"\n                            id=\"panel1a-header\"\n                        >\n                            <Typography className={classes.heading}>Diagram explanation</Typography>\n                        </AccordionSummary>\n                        <AccordionDetails>\n                            <img src={CTAP_HYDRA_diagram} alt='' width=\"700\" />\n                        </AccordionDetails>\n                    </Accordion>\n                    <h5 className={classes.words}>* The Handler for sYnthetic Data Repeated Analysis of EEG artifact-detection routines (HYDRA) method is a data-driven approach for EEG preprocessing optimum. The HYDRA generates synthetic EEG data as ground-truth, furnishes a fully automated method to evaluate the artifact detection performance under different parameters by numerical analysis. </h5>\n                    <FormControlLabel\n                        control={<Checkbox checked={basicInfoInput.checkedHYDRA} onChange={handleCheckboxChange} name=\"checkedHYDRA\" />}\n                        label=\"Implementing HYDRA for artifacts parameter optimization or not?\"\n                    />\n                    {basicInfoInput.checkedHYDRA ? <div>\n                        <div>\n                            <FormControlLabel\n                                control={<Checkbox checked={basicInfoInput.HydraOptionA} onChange={handleHydraChange} name=\"checkTimeRange\" />}\n                                label=\"Provide clean data time-range\"\n                            />\n                            <FormControlLabel\n                                control={<Checkbox checked={basicInfoInput.HydraOptionB} onChange={handleHydraChange} name=\"checkCleanSeed\" />}\n                                label=\"Provide clean seed data\"\n                            />\n                            {basicInfoInput.HydraOptionA ?\n                                <div>\n                                    <Tooltip title={<Typography variant='body2'>{helperText.checkHydraTimeRange}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                                        <TextField\n                                            error={basicInfoInputCheck.checkHydraTimeRange}\n                                            id=\"checkHydraTimeRange\"\n                                            name=\"checkHydraTimeRange\"\n                                            label=\"Time Range\"\n                                            value={basicInfoInput.checkHydraTimeRange}\n                                            onChange={e => handleInput(e)}\n                                            type=\"text\"\n                                            helperText={basicInfoInputCheck.checkHydraTimeRange ? 'The field cannot be empty. Please enter a value' : null}\n                                            variant=\"outlined\"\n                                        />\n                                    </Tooltip>\n\n                                </div> : null}\n\n                            {basicInfoInput.HydraOptionB ?\n                                <div style={{ marginTop: '0.8rem' }}>\n                                    <FormControlLabel\n                                        className={clsx(classes.margin, classes.textField, classes.withoutLabel)}\n                                        control={<Checkbox checked={basicInfoInput.checkOwnHydraDataPath} onChange={handleCheckboxChange} name=\"checkOwnHydraDataPath\" />}\n                                        label={<Typography variant='body2'> Edit your own data input path?</Typography>}\n                                    />\n                                    <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                                        <Tooltip title={<Typography variant='body2'>{helperText.checkHydraCleanSeed}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                                            <TextField\n                                                disabled={!basicInfoInput.checkOwnHydraDataPath}\n                                                error={basicInfoInputCheck.checkOwnHydraDataPath}\n                                                id=\"checkHydraCleanSeed\"\n                                                name=\"checkHydraCleanSeed\"\n                                                label=\"Seed Data Name\"\n                                                value={basicInfoInput.checkHydraCleanSeed}\n                                                onChange={e => handleInput(e)}\n                                                type=\"text\"\n                                                helperText={basicInfoInputCheck.checkOwnHydraDataPath ? 'The field cannot be empty. Please enter a value' : ('Default Input clean seed data source path: ~/ctap/data/clean_seed')}\n                                                variant=\"outlined\"\n                                            />\n                                        </Tooltip>\n                                    </FormControl>\n                                </div>\n                                : null}\n                        </div>\n                    </div> : null}\n                    <hr></hr>\n\n                </div>\n\n            </Container>\n            <div style={{ marginTop: '0.8rem' }}>\n                <h4>Basic setting begin</h4>\n                <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                    <Tooltip title={<Typography variant='body2'>{helperText.pipelineName}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                        <TextField\n                            error={basicInfoInputCheck.pipelineName}\n                            id=\"pipelineName\"\n                            name=\"pipelineName\"\n                            label=\"Pipeline Name\"\n                            value={basicInfoInput.pipelineName}\n                            onChange={e => handleInput(e)}\n                            type=\"text\"\n                            helperText={basicInfoInputCheck.pipelineName ? 'The field cannot be empty. Please enter a value' : null}\n                            variant=\"outlined\"\n                        />\n                    </Tooltip>\n                </FormControl>\n                <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                    <Tooltip title={<Typography variant='body2'>{helperText.projectRoot}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                        <TextField\n                            error={basicInfoInputCheck.projectRoot}\n                            id=\"projectRoot\"\n                            name=\"projectRoot\"\n                            label=\"Project Root Folder Name\"\n                            value={basicInfoInput.projectRoot}\n                            onChange={e => handleInput(e)}\n                            type=\"text\"\n                            helperText={basicInfoInputCheck.projectRoot ? 'The field cannot be empty. Please enter a value' : null}\n                            variant=\"outlined\"\n                        />\n                    </Tooltip>\n                </FormControl>\n            </div>\n            <div style={{ marginTop: '0.8rem' }}>\n                <FormControlLabel\n                    className={clsx(classes.margin, classes.textField, classes.withoutLabel)}\n                    control={<Checkbox checked={basicInfoInput.checkOwnDataPath} onChange={handleCheckboxChange} name=\"checkOwnDataPath\" />}\n                    label={<Typography variant='body2'> Edit your own data input path?</Typography>}\n                />\n                <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                    <Tooltip title={<Typography variant='body2'>{helperText.inputdatapath}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                        <TextField\n                            disabled={!basicInfoInput.checkOwnDataPath}\n                            error={basicInfoInputCheck.inputdatapath}\n                            id=\"inputdatapath\"\n                            name=\"inputdatapath\"\n                            label=\"Input Data Path\"\n                            value={basicInfoInput.inputdatapath}\n                            onChange={e => handleInput(e)}\n                            type=\"text\"\n                            helperText={basicInfoInputCheck.inputdatapath ? 'The field cannot be empty. Please enter a value' : ('Default Input test data source path: ~/ctap/data/test_data')}\n                            variant=\"outlined\"\n                        />\n                    </Tooltip>\n                </FormControl>\n            </div>\n            <div style={{ marginTop: '0.8rem' }}>\n                <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                    <Tooltip title={<Typography variant='body2'>{helperText.eegType}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                        <TextField\n                            error={basicInfoInputCheck.eegType}\n                            id=\"eegType\"\n                            name=\"eegType\"\n                            label=\"EEG Data Type\"\n                            value={basicInfoInput.eegType}\n                            onChange={e => handleInput(e)}\n                            type=\"text\"\n                            helperText={basicInfoInputCheck.eegType ? 'The field cannot be empty. Please enter a value' : null}\n                            variant=\"outlined\"\n                        />\n                    </Tooltip>\n                </FormControl>\n\n                <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                    <Tooltip title={<Typography variant='body2'>{helperText.sbj_filt}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                        <TextField\n                            error={basicInfoInputCheck.sbj_filt}\n                            id=\"sbj_filt\"\n                            name=\"sbj_filt\"\n                            label=\"EEG File Name Sequence\"\n                            value={basicInfoInput.sbj_filt}\n                            onChange={e => handleInput(e)}\n                            type=\"text\"\n                            helperText={basicInfoInputCheck.sbj_filt ? 'The field cannot be empty. Please enter a value' : null}\n                            variant=\"outlined\"\n                        />\n                    </Tooltip>\n                </FormControl>\n            </div>\n            <div style={{ marginTop: '0.8rem' }}>\n                <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                    <Tooltip title={<Typography variant='body2'>{helperText.eegChanloc}</Typography>} classes={{ tooltip: classes.customWidth }} placement=\"top\">\n                        <Autocomplete\n                            freeSolo\n                            selectOnFocus\n                            clearOnBlur\n                            handleHomeEndKeys\n                            value={basicInfoInput.eegChanloc}\n                            onChange={(event, newValue) => {\n                                if (JSON.stringify(newValue).slice(1, 5).trim() === 'Add') {\n                                    setValue(JSON.stringify(newValue).slice(7, -3).trim());\n                                } else {\n                                    setValue(newValue)\n                                }\n                            }}\n                            filterOptions={(options, params) => {\n                                const filtered = filter(options, params);\n                                if (params.inputValue !== '') {\n                                    filtered.push(`Add \"${params.inputValue}\"`);\n                                }\n                                return filtered;\n                            }}\n                            id=\"controllable-states-demo\"\n                            options={CTAP_chanlocs}\n                            renderInput={(params) => <TextField\n                                {...params}\n                                error={basicInfoInputCheck.eegChanloc}\n                                helperText={basicInfoInputCheck.eegChanloc ? 'The field cannot be empty. Please enter a value' : null}\n                                label=\"EEG Channel Locations File\"\n                                variant=\"outlined\" />}\n                        />\n                    </Tooltip>\n                </FormControl>\n                <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                    <Tooltip title={<Typography variant='body2'>{helperText.eegReference}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                        <TextField\n                            error={basicInfoInputCheck.eegReference}\n                            id=\"eegReference\"\n                            name=\"eegReference\"\n                            label=\"EEG Data Reference Channel\"\n                            value={basicInfoInput.eegReference}\n                            onChange={e => handleInput(e)}\n                            type=\"text\"\n                            helperText={basicInfoInputCheck.eegReference ? 'The field cannot be empty. Please enter a value' : null}\n                            variant=\"outlined\"\n                        />\n                    </Tooltip>\n                </FormControl>\n            </div>\n            <div style={{ marginTop: '0.8rem' }}>\n                <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                    <Tooltip title={<Typography variant='body2'>{helperText.eegHeogChannelNames}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                        <TextField\n                            error={basicInfoInputCheck.eegHeogChannelNames}\n                            id=\"eegHeogChannelNames\"\n                            name=\"eegHeogChannelNames\"\n                            label=\"HEOG Channel Names\"\n                            value={basicInfoInput.eegHeogChannelNames}\n                            onChange={e => handleInput(e)}\n                            type=\"text\"\n                            helperText={basicInfoInputCheck.eegHeogChannelNames ? 'The field cannot be empty. Please enter a value' : null}\n                            variant=\"outlined\"\n                        />\n                    </Tooltip>\n                </FormControl>\n                <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                    <Tooltip title={<Typography variant='body2'>{helperText.eegVeogChannelNames}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                        <TextField\n                            error={basicInfoInputCheck.eegVeogChannelNames}\n                            id=\"eegVeogChannelNames\"\n                            name=\"eegVeogChannelNames\"\n                            label=\"VEOG Channel Names\"\n                            value={basicInfoInput.eegVeogChannelNames}\n                            onChange={e => handleInput(e)}\n                            type=\"text\"\n                            helperText={basicInfoInputCheck.eegVeogChannelNames ? 'The field cannot be empty. Please enter a value' : null}\n                            variant=\"outlined\"\n                        />\n                    </Tooltip>\n                </FormControl>\n            </div>\n        </div>\n    )\n};\n\nexport default BasicInfo;\n","export const inputCorrection = (value) => {\n    let result = [];\n    let v = value.replace(/[^A-Za-z0-9,]/g,'');\n    v = v.split(',');\n    v.forEach(i=>{\n        let field ;\n        !isNaN(i.trim())|| i.trim().toLowerCase() === \"true\" || i.trim().toLowerCase() === \"false\"  ? field =`${i.trim().toLowerCase()}`: field = `'${i.trim()}'`;\n        result.push(field);\n    });\n    return result.join(', ');\n}\n\nconst BranchTemplate = (basicInfo, inputFields) => {\n\n    let HYDRA_presetting = new Array([]);\n    let pipeArr = '';\n    let branchSrcInfo = {};\n    let pipeSegments = new Array([]);\n\n    if (basicInfo.checkedHYDRA) {\n        HYDRA_presetting.push(`%% HYDRA setting`);\n        HYDRA_presetting.push(`HYDRA = true;`);\n        HYDRA_presetting.push(`PARAM = param_sweep_setup(project_dir);`);\n        HYDRA_presetting.push(`Cfg.HYDRA.ifapply = HYDRA;`);\n        HYDRA_presetting.push(`Cfg.HYDRA.chanloc = '${basicInfo.eegChanloc}';`);\n        HYDRA_presetting.push(`Cfg.HYDRA.FULL_CLEAN_SEED = false;`);\n        if (basicInfo.checkHydraTimeRange && !basicInfo.checkHydraCleanSeed) {\n            HYDRA_presetting.push(`Cfg.HYDRA.provide_seed_timerange = true;`)\n            HYDRA_presetting.push(`Cfg.HYDRA.cleanseed_timerange = ${basicInfo.checkHydraTimeRange};`);\n        } else if (basicInfo.checkHydraCleanSeed && !basicInfo.checkHydraTimeRange) {\n            HYDRA_presetting.push(`Cfg.HYDRA.provide_seed_timerange = false;`)\n            if(basicInfo.checkOwnHydraDataPath){\n                let fileName = basicInfo.checkHydraCleanSeed.split('/').pop();\n                let fileFolder = basicInfo.checkHydraCleanSeed.split('/').slice(0,-1).join('/');\n                HYDRA_presetting.push(`Cfg.HYDRA.seed_fname = '${fileName}';`);\n                HYDRA_presetting.push(`PARAM.path.seedDataSrc = '${fileFolder}';`);\n            }else{\n                HYDRA_presetting.push(`Cfg.HYDRA.seed_fname = ${basicInfo.checkHydraCleanSeed};`);\n            };\n        }\n        HYDRA_presetting.push(`Cfg.HYDRA.PARAM = PARAM;`);\n    }\n\n    let data_dir = '';\n    if (basicInfo.checkOwnDataPath) {\n        data_dir = `data_dir = '${basicInfo.inputdatapath}';`;\n    } else {\n        data_dir = `data_dir = append(reporoot,'ctap/data/test_data');`;\n    }\n\n    inputFields.map((inputField, index) => {\n        let stepSetsArray = new Array([]);\n        let ctap_args = new Array([]);\n        let subpipe = \"@sbf_\" + inputField.pipeSegmentID + \", \";\n        pipeArr = pipeArr + subpipe;\n\n        let srcid;\n        if (index === 0) {\n            branchSrcInfo[inputField.pipeSegmentID] = {\n                '0': \"\".concat(1, inputField.stepID),\n                '1': \"\"\n            };\n            srcid = \"\";\n        } else {\n            branchSrcInfo[inputField.pipeSegmentID] = {\n                '0': \"\".concat(1, inputField.stepID),\n                '1': \"\".concat(branchSrcInfo[inputField.pipeSegment_srcid]['1'], inputField.pipeSegment_srcid, '#')\n            };\n            srcid = \"\".concat(branchSrcInfo[inputField.pipeSegmentID]['1'], branchSrcInfo[inputField.pipeSegment_srcid]['0']);\n        };\n\n        inputField.linearSettings.map((linearSetting, indexl) => {\n            let funcs = ``;\n            linearSetting.funcsSettings.forEach(funcsSetting => {\n                funcs = funcs + `@${funcsSetting.funcName}, `;\n                let funcN = funcsSetting.funcName;\n                if (funcN) {\n                    funcN = funcN.slice(5, funcN.length)\n                };\n                ctap_args.push(`   out.${funcN}=struct(${inputCorrection(funcsSetting.funcP)});`)\n            });\n            stepSetsArray.push(`   stepSet(${indexl + 1}).id = [num2str(${index + 1}), '${linearSetting.stepID}'];`);\n            stepSetsArray.push(`   stepSet(${indexl + 1}).funH{${funcs}};`);\n        });\n\n        //pipeSegments\n        let pipeSegment = new Array(\n            `function [Cfg, out] = pipeSegment_${inputField.pipeSegmentID}(Cfg)`,\n            `   %%%%%%%% Define hierarchy %%%%%%%%`,\n            `   Cfg.id = '${inputField.pipeSegmentID}';`,\n            `   Cfg.srcid = {${srcid}};`,\n            `   %%%%%%%% Define pipeline %%%%%%%%`,\n            `   i = 1; %stepSet 1`,\n            `${stepSetsArray.join('\\n')}`,\n            `${[ctap_args.join('\\n')]}`,\n            `   Cfg.pipe.runSets = {stepSet(:).id};`,\n            `   Cfg.pipe.stepSets = stepSet;`,\n            `end`,\n            ``\n        )\n        pipeSegments.push(`${pipeSegment.join('\\n')}`);\n    })\n\n    pipeArr = `pipeArr = {${pipeArr}};`\n\n    let results = new Array(\n        `%% Runtime options for CTAP:`,\n        `PREPRO = true;`,\n        `STOP_ON_ERROR = true;`,\n        `OVERWRITE_OLD_RESULTS = true;`,\n        ``,\n        `%% Basic setting`,\n        `pipeline_name = '${basicInfo.pipelineName}';`,\n        `FILE_ROOT = mfilename('fullpath');`,\n        `reporoot = FILE_ROOT(1:strfind(FILE_ROOT, fullfile('ctap', 'templates', '${basicInfo.projectRoot}', 'ctap_linear_template')) - 1);`,\n        `project_dir = FILE_ROOT(1:strfind(FILE_ROOT, fullfile('ctap_linear_template')) - 1);`,\n        `${data_dir}`,\n        `[Cfg, ~] = sbf_cfg(project_dir, pipeline_name);`,\n        `Cfg.grfx.on = false;`,\n        `Cfg.MC = get_meas_cfg_MC(Cfg, data_dir, 'eeg_ext', '*${basicInfo.eegType}', 'sbj_filt', ${basicInfo.sbj_filt});`,\n        `${HYDRA_presetting.join('\\n')}`,\n        ``,\n        `%% run pipe`,\n        `clear Pipe;`,\n        `${pipeArr}`,\n        `runps = 1:length(pipeArr);`,\n        `if PREPRO`,\n        `   CTAP_pipeline_brancher(Cfg, pipeArr, 'runPipes', runps, 'dbg', STOP_ON_ERROR, 'ovw', OVERWRITE_OLD_RESULTS);`,\n        `end`,\n        ` `,\n        `%% PipeSegments`,\n        `function [Cfg, out] = sbf_cfg(project_root_folder, ID)`,\n        `   Cfg.id = ID;`,\n        `   Cfg.srcid = {''};`,\n        `   Cfg.env.paths.projectRoot = project_root_folder;`,\n        `   % Define important directories and files`,\n        `   Cfg.env.paths.branchSource = '';`,\n        `   Cfg.env.paths.ctapRoot = fullfile(Cfg.env.paths.projectRoot, Cfg.id);`,\n        `   Cfg.env.paths.analysisRoot = Cfg.env.paths.ctapRoot;`,\n        `   Cfg.eeg.chanlocs = '${basicInfo.eegChanloc}';`,\n        `   Cfg.eeg.reference = {${inputCorrection(basicInfo.eegReference)}};`,\n        `   Cfg.eeg.veogChannelNames = {${inputCorrection(basicInfo.eegVeogChannelNames)}};`,\n        `   Cfg.eeg.heogChannelNames = {${inputCorrection(basicInfo.eegHeogChannelNames)}};`,\n        `   out = struct([]);`,\n        `end`,\n        ``,\n        `${pipeSegments.join('\\n')}`,\n    );\n    return results;\n\n};\n\nexport default BranchTemplate;\n","import {inputCorrection} from './BranchTemplate'\n\nconst LinearTemplate = (basicInfo, inputFields) => {\n\n    let ctap_args = new Array([]);\n    let stepSetsArray = new Array([]);\n    let HYDRA_presetting = new Array([]);\n\n    if (basicInfo.checkedHYDRA) {\n        HYDRA_presetting.push(`%% HYDRA setting`);\n        HYDRA_presetting.push(`HYDRA = true;`);\n        HYDRA_presetting.push(`PARAM = param_sweep_setup(project_dir);`);\n        HYDRA_presetting.push(`Cfg.HYDRA.ifapply = HYDRA;`);\n        HYDRA_presetting.push(`Cfg.HYDRA.chanloc = '${basicInfo.eegChanloc}';`);\n        HYDRA_presetting.push(`Cfg.HYDRA.FULL_CLEAN_SEED = false;`);\n        if (basicInfo.checkHydraTimeRange && !basicInfo.checkHydraCleanSeed) {\n            HYDRA_presetting.push(`Cfg.HYDRA.provide_seed_timerange = true;`)\n            HYDRA_presetting.push(`Cfg.HYDRA.cleanseed_timerange = ${basicInfo.checkHydraTimeRange};`);\n        } else if (basicInfo.checkHydraCleanSeed && !basicInfo.checkHydraTimeRange) {\n            HYDRA_presetting.push(`Cfg.HYDRA.provide_seed_timerange = false;`)\n            if(basicInfo.checkOwnHydraDataPath){\n                let fileName = basicInfo.checkHydraCleanSeed.split('/').pop();\n                let fileFolder = basicInfo.checkHydraCleanSeed.split('/').slice(0,-1).join('/');\n                HYDRA_presetting.push(`Cfg.HYDRA.seed_fname = '${fileName}';`);\n                HYDRA_presetting.push(`PARAM.path.seedDataSrc = '${fileFolder}';`);\n            }else{\n                HYDRA_presetting.push(`Cfg.HYDRA.seed_fname = ${basicInfo.checkHydraCleanSeed};`);\n            } \n        }\n        HYDRA_presetting.push(`Cfg.HYDRA.PARAM = PARAM;`);\n    }\n\n    let data_dir = '';\n    if(basicInfo.checkOwnDataPath){\n        data_dir = `data_dir = '${basicInfo.inputdatapath}';`\n    }else{\n        data_dir = `data_dir = append(reporoot,'ctap/data/test_data');`\n    }\n    \n    inputFields.forEach((inputField, index) => {\n        let funcs = ``;\n        inputField.funcsSettings.forEach(funcsSetting => {\n            funcs = funcs + `@${funcsSetting.funcName}, `;\n            let funcN = funcsSetting.funcName;\n            if(funcN){\n                funcN = funcN.slice(5,funcN.length)\n            }\n            ctap_args.push(`out.${funcN}=struct(${inputCorrection(funcsSetting.funcP)});`)\n        });\n        stepSetsArray.push(`stepSet(${index + 1}).id = [num2str(${index + 1}), '${inputField.stepID}'];`);\n        stepSetsArray.push(`stepSet(${index + 1}).funH{${funcs}};`);\n    })\n\n\n    return new Array(\n        `%% Runtime options for CTAP:`,\n        `DEBUG = false;`,\n        `OVERWRITE = true;`,\n        ``,\n        `%% Basic setting`,\n        `pipeline_name = '${basicInfo.pipelineName}';`,\n        \"FILE_ROOT = mfilename('fullpath');\",\n        `reporoot = FILE_ROOT(1:strfind(FILE_ROOT, fullfile('ctap', 'templates', '${basicInfo.projectRoot}', 'ctap_linear_template')) - 1);`,\n        `project_dir = FILE_ROOT(1:strfind(FILE_ROOT, fullfile('ctap_linear_template')) - 1);`,\n        `${data_dir}`,\n        ``,\n        `Cfg.env.paths = cfg_create_paths(project_dir, pipeline_name, {''}, 1);`,\n        `Cfg.eeg.chanlocs = '${basicInfo.eegChanloc}';`,\n        `Cfg.eeg.reference = {${inputCorrection(basicInfo.eegReference)}};`,\n        `Cfg.eeg.veogChannelNames = {${inputCorrection(basicInfo.eegVeogChannelNames)}};`,\n        `Cfg.eeg.heogChannelNames = {${inputCorrection(basicInfo.eegHeogChannelNames)}};`,\n        `Cfg.grfx.on = false;`,\n        `Cfg.MC = get_meas_cfg_MC(Cfg, data_dir, 'eeg_ext', '*${basicInfo.eegType}', 'sbj_filt', ${basicInfo.sbj_filt});`,\n        `${HYDRA_presetting.join('\\n')}`,\n        ``,\n        `%% Pipeline setting`,\n        `clear Pipe;`,\n        `${stepSetsArray.join('\\n')}`,\n        `${[ctap_args.join('\\n')]}`,\n        `Cfg.pipe.stepSets = stepSet;`,\n        `Cfg.pipe.runSets = {stepSet(1).id};`,\n        `Cfg = ctap_auto_config(Cfg, out);`,\n        ` `,\n        `%% Run the pipe`,\n        `CTAP_pipeline_looper(Cfg, 'debug', DEBUG, 'overwrite', OVERWRITE);`,\n        `clear i stepSet Filt ctap_args`\n\n    )\n\n};\n\nexport default LinearTemplate;\n","import { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport StepConnector from \"@material-ui/core/StepConnector\";\nimport Button from '@material-ui/core/Button';\nimport clsx from \"clsx\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Check from \"@material-ui/icons/Check\";\n\n\nexport const QontoConnector = withStyles({\n    alternativeLabel: {\n        top: 10,\n        left: \"calc(-50% + 16px)\",\n        right: \"calc(50% + 16px)\"\n    },\n    active: {\n        \"& $line\": {\n            borderColor: \"#784af4\"\n        }\n    },\n    completed: {\n        \"& $line\": {\n            borderColor: \"#784af4\"\n        }\n    },\n    line: {\n        borderColor: \"#eaeaf0\",\n        borderTopWidth: 3,\n        borderRadius: 1\n    },\n})(StepConnector);\n\nexport const useQontoStepIconStyles = makeStyles({\n    root: {\n        color: \"#eaeaf0\",\n        display: \"flex\",\n        height: 22,\n        alignItems: \"center\"\n    },\n    active: {\n        color: \"#784af4\"\n    },\n    circle: {\n        width: 8,\n        height: 8,\n        borderRadius: \"50%\",\n        backgroundColor: \"currentColor\"\n    },\n    completed: {\n        color: \"#784af4\",\n        zIndex: 1,\n        fontSize: 18\n    }\n});\n\nfunction QontoStepIcon(props) {\n    const classes = useQontoStepIconStyles();\n    const { active, completed } = props;\n\n    return (\n        <div\n            className={clsx(classes.root, {\n                [classes.active]: active\n            })}\n        >\n            {completed ? (\n                <Check className={classes.completed} />\n            ) : (\n                    <div className={classes.circle} />\n                )}\n        </div>\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: \"100%\",\n        marginTop: 50\n    },\n    button: {\n        marginRight: theme.spacing(1),\n        marginBottom: theme.spacing(2),\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1)\n    },\n\n}));\n\nfunction getSteps() {\n    return [\"Basic settings\", \"Pipe config\", \"Review and download\"];\n}\n\nconst Steppers = ({ activeStep, handleSubmit, handleReset, handleBack, handleNext, isReadyDownload, downloadLink }) => {\n    const classes = useStyles();\n    const steps = getSteps();\n\n\n    return (\n        <div className={classes.root}>\n            <div>\n                {activeStep === steps.length ? (\n                    <div>\n                        {isReadyDownload ?\n                            <div>\n                                <div style={{ margin: 50 }}>\n                                    <Button download='ctap_linear_template.m' href={downloadLink} variant=\"outlined\" color=\"primary\">Download</Button>\n                                </div>\n                                <Button variant=\"outlined\" color=\"secondary\" onClick={handleReset} className={classes.button}>\n                                    Reset\n                                    </Button>\n                                <Button variant=\"contained\" onClick={handleBack} className={classes.button} color=\"primary\">\n                                    Back\n                                    </Button>\n                            </div> : null}\n                    </div>\n                ) : (\n                        <div>\n                            <Button\n                                disabled={activeStep === 0}\n                                onClick={handleBack}\n                                className={classes.button}\n                            >\n                                Back\n                                </Button>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={handleNext}\n                                className={classes.button}\n                            >\n                                {activeStep === steps.length - 1 ? \"Finish and Generate Code\" : \"Next\"}\n                            </Button>\n                        </div>\n                    )}\n            </div>\n            <Stepper\n                alternativeLabel\n                activeStep={activeStep}\n                connector={<QontoConnector />}\n            >\n                {steps.map((label) => (\n                    <Step key={label}>\n                        <StepLabel StepIconComponent={QontoStepIcon}>{label}</StepLabel>\n                    </Step>\n                ))}\n            </Stepper>\n        </div>\n    );\n}\n\nexport default Steppers;","export const CTAP_funcs = [\n    '',\n    'CTAP_blink2event.m',\n    'CTAP_check_file_loadable.m',\n    'CTAP_clear_results.m',\n    'CTAP_clock_start.m',\n    'CTAP_clock_stop.m',\n    'CTAP_compute_psd.m',\n    'CTAP_detect_bad_channels.m',\n    'CTAP_detect_bad_comps.m',\n    'CTAP_detect_bad_epochs.m',\n    'CTAP_detect_bad_segments.m',\n    'CTAP_epoch_data.m',\n    'CTAP_event_agg.m',\n    'CTAP_event_modify.m',\n    'CTAP_export_data.m',\n    'CTAP_export_psd.m',\n    'CTAP_extract_PSDindices.m',\n    'CTAP_extract_bandpowers.m',\n    'CTAP_extract_dataset_info.m',\n    'CTAP_extract_dataset_info2.m',\n    'CTAP_extract_erp_features.m',\n    'CTAP_extract_signal.m',\n    'CTAP_filter_blink_ica.m',\n    'CTAP_filter_design.m',\n    'CTAP_fir_filter.m',\n    'CTAP_fir_notchfilter.m',\n    'CTAP_generate_cseg.m',\n    'CTAP_generate_cseg_clump.m',\n    'CTAP_interp_chan.m',\n    'CTAP_load_chanlocs.m',\n    'CTAP_load_data.m',\n    'CTAP_load_events.m',\n    'CTAP_normalize_data.m',\n    'CTAP_parse_blocks.m',\n    'CTAP_peek_data.m',\n    'CTAP_plot_ERP.m',\n    'CTAP_reject_data.m',\n    'CTAP_reref_data.m',\n    'CTAP_resample_data.m',\n    'CTAP_run_ica.m',\n    'CTAP_select_data.m',\n    'CTAP_select_evdata.m',\n    'CTAP_tidy_chanlocs.m',\n    'export_features_CTAP2.m',\n    'CTAP_hydra_badseg.m',\n    'CTAP_hydra_blink.m',\n    'CTAP_hydra_chan.m',\n    'CTAP_hydra_prepare.m'\n]\n\n","import React, { useContext, useEffect, useState } from \"react\";\nimport clsx from 'clsx';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from \"@material-ui/core/Typography\";\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { ContextBranch, ContextLinear } from '../Reducers/ContextProvider'\nimport { CTAP_funcs } from '../Data/CTAP_funcs'\nimport {FormControlStyles} from '../Styles/FormControlStyles'\n\nconst FuncsSettingForm = ({ ifLinear, index, indexm, funcsSettings, mid }) => {\n    const classes = FormControlStyles()\n    const [inputBranchStates, dispatchB] = useContext(ContextBranch);\n    const [inputLinearStates, dispatchL] = useContext(ContextLinear);\n    const [value, setValue] = React.useState(null);\n    const [inputStates, setInputStates] = useState(() => {\n        if (ifLinear) {\n            return inputLinearStates;\n        } else {\n            return inputBranchStates[index].linearSettings;\n        }\n    });\n\n    useEffect(() => {\n        if (ifLinear) {\n            setInputStates(inputLinearStates);\n        } else {\n            setInputStates(inputBranchStates[index].linearSettings);\n        }\n    }, [inputLinearStates, inputBranchStates]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    const handleInputChange = (id, name, newV) => {\n        const values = [...inputStates];\n        let index_ = values.findIndex(x => x.id === mid);\n        const newInputStates = values[index_].funcsSettings.map(i => {\n            if (id === i.fid) {\n                i[name] = newV;\n                i[name + 'Check'] = false;\n            }\n            return i;\n        });\n        values[index_].funcsSettings = newInputStates;\n        if (ifLinear) {\n            dispatchL({ type: 'UPDATE', data: values })\n        } else {\n            let newState = [...inputBranchStates];\n            newState[index].linearSettings = values;\n            dispatchB({ type: 'UPDATE', data: newState })\n        };\n    }\n\n    const handleAddFuncFields = () => {\n        const values = [...inputStates];\n        let index_ = values.findIndex(x => x.id === mid);\n        values[index_].funcsSettings.push({ fid: uuidv4(), funcName: '', functionP: '' });\n        if (ifLinear) {\n            dispatchL({ type: 'UPDATE', data: values })\n        } else {\n            let newState = [...inputBranchStates];\n            newState[index].linearSettings = values;\n            dispatchB({ type: 'UPDATE', data: newState });\n        };\n    }\n\n    const handleRemoveFuncFields = (id) => {\n        const values = [...inputStates];\n        let index_ = values.findIndex(x => x.id === mid);\n        let indexf = values[index_].funcsSettings.findIndex(x => x.fid === id);\n        values[index_].funcsSettings.splice(indexf, 1);\n        if (ifLinear) {\n            dispatchL({ type: 'UPDATE', data: values });\n        } else {\n            let newState = [...inputBranchStates];\n            newState[index].linearSettings = values;\n            dispatchB({ type: 'UPDATE', data: newState });\n        };\n    }\n\n\n    return (\n        <div className={clsx(classes.margin, classes.withoutLabel)}>\n            {funcsSettings.map((funcsSetting, indexff) => (\n                <div key={funcsSetting.fid}>\n                    <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                        <Autocomplete\n                            id={'funcName' + indexff}\n                            value={inputStates[indexm].funcsSettings[indexff].funcName}\n                            onChange={(event, newValue) => {\n                                setValue(newValue);\n                                handleInputChange(funcsSetting.fid, 'funcName', newValue);\n                            }}\n                            options={CTAP_funcs}\n                            renderInput={(params) => <TextField {...params} error={funcsSetting.funcNameCheck} label=\"Function Name\" variant=\"outlined\" helperText={funcsSetting.funcNameCheck ? 'The field cannot be empty. Please select a function' : ''} />}\n                        />\n                    </FormControl>\n                    <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                        <Tooltip title={<Typography variant='body2'>{\"check docs for parameters supported for each func, input in 'pName', p, eg.('method', 'fastica', 'overwrite', true).\"}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                            <TextField\n                                id={\"funcP\" + indexff}\n                                name=\"funcP\"\n                                label=\"Function Parameters\"\n                                variant=\"outlined\"\n                                value={inputStates[indexm].funcsSettings[indexff].funcP}\n                                onChange={event => handleInputChange(funcsSetting.fid, event.target.name, event.target.value)}\n                            />\n                        </Tooltip>\n                    </FormControl>\n                    <FormControl className={clsx(classes.margin)}>\n                        <IconButton disabled={funcsSettings.length === 1} onClick={() => handleRemoveFuncFields(funcsSetting.fid)}>\n                            <RemoveIcon />\n                        </IconButton>\n                    </FormControl>\n                    <FormControl className={clsx(classes.margin)}>\n                        <IconButton onClick={() => handleAddFuncFields()}>\n                            <AddIcon />\n                        </IconButton>\n                    </FormControl>\n\n                </div>\n            ))}\n        </div>\n\n    );\n}\n\nexport default FuncsSettingForm;","import React, { useContext, useState, useEffect } from \"react\";\nimport clsx from 'clsx';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControl from '@material-ui/core/FormControl';\nimport FuncsSettingForm from \"./FuncsSettingForm\"\nimport { ContextBranch, ContextLinear } from '../Reducers/ContextProvider'\nimport {FormControlStyles} from '../Styles/FormControlStyles'\n\nconst LinearPipesForm = ({ ifLinear, index, mid }) => {\n    const classes = FormControlStyles()\n    const [inputBranchStates, dispatchB] = useContext(ContextBranch);\n    const [inputLinearStates, dispatchL] = useContext(ContextLinear);\n    const [inputStates, setInputStates] = useState(() => {\n        if (ifLinear) {\n            return inputLinearStates;\n        } else {\n            return inputBranchStates[index].linearSettings;\n        };\n    });\n\n    useEffect(() => {\n        if (ifLinear) {\n            setInputStates(inputLinearStates);\n        } else {\n            setInputStates(inputBranchStates[index].linearSettings);\n        }\n    }, [inputLinearStates, inputBranchStates]); // eslint-disable-line react-hooks/exhaustive-deps\n\n\n    const handleLinearPipesInput = (id, event) => {\n        const newInputFields = inputStates.map(i => {\n            if (id === i.id) {\n                i[event.target.name] = event.target.value\n                i[event.target.name + 'Check'] = false;\n            }\n            return i;\n        })\n\n        if (ifLinear) {\n            dispatchL({ type: 'UPDATE', data: newInputFields });\n        } else {\n            const newValue = inputBranchStates;\n            newValue[index].linearSettings = newInputFields;\n            dispatchB({ type: 'UPDATE', data: newValue });\n        }\n        setInputStates(newInputFields);\n    }\n\n    return (\n        <Container maxWidth=\"md\" >\n            {inputStates.map((inputField, indexf) => (\n                <div key={inputField.id}>\n                    <h4>stepSet {indexf + 1}</h4>\n                    <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                        <Tooltip title={<Typography variant='body2'>{`describe main work in this stepSet, eg.'_load'`}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                            <TextField\n                                variant=\"outlined\"\n                                error={inputField.stepIDCheck}\n                                name=\"stepID\"\n                                label=\"stepID\"\n                                helperText={inputField.stepIDCheck ? 'The field cannot be empty. Please enter a value' : null}\n                                value={inputField.stepID}\n                                onChange={event => handleLinearPipesInput(inputField.id, event)}\n                            />\n                        </Tooltip>\n                    </FormControl>\n                    <FormControl className={clsx(classes.margin, classes.withoutLabel)}>\n                        <FuncsSettingForm\n                            ifLinear={ifLinear}\n                            index={index}\n                            indexm={indexf}\n                            mid={inputField.id}\n                            funcsSettings={inputField.funcsSettings} />\n                    </FormControl>\n                </div>\n            ))}\n        </Container>\n    );\n}\n\nexport default LinearPipesForm;","import React, { useContext, useState, useEffect } from \"react\";\nimport clsx from 'clsx';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport LinearPipesForm from \"./LinearPipesForm\";\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from \"@material-ui/core/Typography\";\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { ContextBranch } from '../Reducers/ContextProvider'\nimport {FormControlStyles} from '../Styles/FormControlStyles'\n\nconst helperText = {\n    stepID: \"describe main work in this pipeSegment, eg.'_load'\",\n    pipeSegmentID: \"ID of this pipeSegment, eg.'pipe2'\",\n    pipeSegment_srcid: \"Describe the hierarchy relationship between other pipeSegment, you should input [pipeSegment ID] of the previously executed pipe, for example, if the current pipeSegment runs after pipe2, then the input should be pipe2. The first pipeSegment doesn't need this, leave it empty is ok.\"\n};\n\nconst BranchPipesForm = () => {\n    const classes = FormControlStyles()\n    const [inputStates, dispatch] = useContext(ContextBranch);\n    const [stepNum, setStepNum] = useState(1);\n    const [pipeSegmentSrcIDs, setPipeSegmentSrcIDs] = useState({ 0: '' });\n    const [checkPipeSegmentSrcID, setCheckPipeSegmentSrcID] = useState(false);\n\n    useEffect(() => {\n        inputStates.forEach(i => {\n            setPipeSegmentSrcIDs({ ...pipeSegmentSrcIDs, ...{ [i.id]: i.pipeSegmentID } });\n        })\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    const handleLinearPipesInput = (id, event) => {\n        const { value, name } = event.target;\n        const newInputFields = inputStates.map(i => {\n            if (id === i.id) {\n                i[name] = value;\n                i[name + 'Check'] = false;\n                if (name === 'pipeSegmentID') {\n                    setPipeSegmentSrcIDs({ ...pipeSegmentSrcIDs, ...{ [id]: value } });\n                } else if (name === 'pipeSegment_srcid') {\n                    if (Object.values(pipeSegmentSrcIDs).includes(value)) {\n                        setCheckPipeSegmentSrcID(false)\n                    } else {\n                        setCheckPipeSegmentSrcID(true)\n                    }\n                }\n            }\n            return i;\n        });\n        dispatch({ type: 'UPDATE', data: newInputFields });\n    }\n\n    const handleChangeStepSets = (e, index) => {\n        const { value } = e.target;\n        if (stepNum < value) {\n            let form = [...inputStates];\n            for (let i = stepNum; i < value; i++) {\n                form[index].linearSettings.push({ id: uuidv4(), stepID: '', stepIDCheck: false, funcsSettings: [{ fid: uuidv4(), funcName: '', funcP: '', funcNameCheck: false }] });\n            }\n            form[index].stepNum = value;\n            dispatch({ type: 'UPDATE', data: form })\n            setStepNum(value);\n        } else if (stepNum > value && value >= 1) {\n            let form = [...inputStates];\n            for (let i = 0; i < stepNum - value; i++) {\n                form[index].linearSettings.pop();\n            }\n            form[index].stepNum = value;\n            dispatch({ type: 'UPDATE', data: form })\n            setStepNum(value);\n        }\n    }\n\n    return (\n        <Container maxWidth=\"md\">\n            {inputStates.map((inputField, index) => (\n                <div key={inputField.id}>\n                    <h4>Pipe-segment {index + 1}</h4>\n                    <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                        <Tooltip title={<Typography variant='body2'>{helperText.stepID}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                            <TextField\n                                error={inputField.stepIDCheck}\n                                name=\"stepID\"\n                                label=\"pipeSegment Description Label\"\n                                variant=\"outlined\"\n                                helperText={inputField.stepIDCheck ? 'The field cannot be empty. Please enter a value' : null}\n                                value={inputField.stepID}\n                                onChange={event => handleLinearPipesInput(inputField.id, event)}\n                            />\n                        </Tooltip>\n                    </FormControl>\n\n\n                    <h5>Define hierarchy</h5>\n                    <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel,)}>\n                        <Tooltip title={<Typography variant='body2'>{helperText.pipeSegmentID}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                            <TextField\n                                error={inputField.pipeSegmentIDCheck}\n                                name=\"pipeSegmentID\"\n                                label=\"pipeSegment ID\"\n                                variant=\"outlined\"\n                                helperText={inputField.pipeSegmentIDCheck ? 'The field cannot be empty. Please enter a value' : null}\n                                value={inputField.pipeSegmentID}\n                                onChange={event => handleLinearPipesInput(inputField.id, event)}\n                            />\n                        </Tooltip>\n                    </FormControl>\n                    <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel,)}>\n                        <Tooltip title={<Typography variant='body2'>{helperText.pipeSegment_srcid}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                            <TextField\n                                error={(inputField.pipeSegment_srcidCheck || checkPipeSegmentSrcID)}\n                                name=\"pipeSegment_srcid\"\n                                label=\"pipeSegment Srcid\"\n                                variant=\"outlined\"\n                                helperText={inputField.pipeSegment_srcidCheck ? 'The field cannot be empty. Please enter a value' : (checkPipeSegmentSrcID ? 'there is no such pipe' : null)}\n                                value={inputField.pipeSegment_srcid}\n                                onChange={event => handleLinearPipesInput(inputField.id, event)}\n                            />\n                        </Tooltip>\n                    </FormControl>\n\n\n                    <h5>Define pipeline</h5>\n                    <FormControl variant=\"outlined\" className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                        <InputLabel > {'stepSet number'}</InputLabel>\n                        <Select\n                            native\n                            value={inputField.stepNum}\n                            onChange={e => handleChangeStepSets(e, index)}\n                            label=\"stepSet number\"\n                            inputProps={{\n                                name: 'stepNum',\n                            }}\n                        >\n                            {\n                                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(i => {\n                                    return <option key={i} value={i}>{i}</option>\n                                })\n                            }\n                        </Select>\n                    </FormControl>\n                    <LinearPipesForm\n                        ifLinear={false}\n                        index={index}\n                        mid={inputField.id} />\n                </div>\n            ))}\n\n        </Container >\n    );\n}\n\nexport default BranchPipesForm;","import React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { vs } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport Container from '@material-ui/core/Container';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        marginTop: 50,\n        textAlign: \"left\"\n    },\n\n}));\n\nconst ReviewPage = (codeString) => {\n    const classes = useStyles();\n\n    return (\n        <Container maxWidth='md' className={classes.root}>\n            <SyntaxHighlighter language=\"matlab\" \n                style={vs}\n                showLineNumbers={true}\n                codeTagProps={{ style: { fontFamiily: \"times new roman\" } }}\n            >\n                {codeString.codeString}\n            </SyntaxHighlighter>\n        </Container>\n\n    )\n\n}\n\nexport default ReviewPage;","import React, { useState, useEffect, useReducer, useContext } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { Link } from \"react-router-dom\"\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport BasicInfo from \"./BasicInfo\";\nimport LinearTemplate from \"./LinearTemplate\";\nimport Steppers from \"./Stepper\";\nimport LinearPipesForm from \"./LinearPipesForm\";\nimport BranchPipesForm from \"./BranchPipesForm\";\nimport BranchTemplate from \"./BranchTemplate\"\nimport ReviewPage from \"./ReviewPage\"\nimport { ContextBranch, ContextLinear, ContextBasic } from '../Reducers/ContextProvider'\nimport {initialLinearInputState, initialBranchInputState, defaultBasicInfoInput} from '../Reducers/Reducer'\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        width:'25ch'\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n\n    button: {\n        margin: theme.spacing(2),\n    },\n    nav: {\n        color: 'inherit',\n        textDecoration: \"underline\",\n        fontStyle: \"italic\"\n    }\n}));\n\n\nexport default function Main() {\n    const classes = useStyles();\n\n    const [inputLinearStates, dispatchL] = useContext(ContextLinear);\n    const [inputBranchStates, dispatchB] = useContext(ContextBranch);\n    const [basicInfoInput, dispatch] = useContext(ContextBasic);\n\n    const [activeStep, setActiveStep] = useState(0);\n    const [downloadLink, setDownloadLink] = useState('');\n    const [stepNum, setStepNum] = useState(1);\n    const [isReadyDownload, setIsReadyDownload] = useState(false);\n    const [codeString, setCodeString] = useState('');\n    const [basicInfoInputCheck, setBasicInfoInputCheck] = useReducer(\n        (state, newState) => ({ ...state, ...newState }),\n        {\n            checkHydraTimeRange: false,\n            checkHydraCleanSeed: false,\n            pipelineName: false,\n            inputdatapath: false,\n            projectRoot: false,\n            sbj_filt: false,\n            eegType: false,\n            eegChanloc: false,\n            eegReference: false,\n            eegVeogChannelNames: false,\n            eegHeogChannelNames: false\n        }\n    );\n\n    const [inputStates, setInputStates] = useState(() => {\n        if (basicInfoInput.checkedLinear) {\n            return inputLinearStates;\n        } else {\n            return inputBranchStates;\n        };\n    });\n\n\n    useEffect(() => {\n        if (basicInfoInput.checkedLinear) {\n            setInputStates(inputLinearStates);\n        } else {\n            setInputStates(inputBranchStates);\n        };\n    }, [inputLinearStates, inputBranchStates]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    useEffect(() => {\n        setStepNum(1);\n        if (basicInfoInput.checkedLinear) {\n            let initialLinear = [{ id: uuidv4(), stepID: '', stepIDCheck: false, funcsSettings: [{ fid: uuidv4(), funcName: '', funcP: '', funcNameCheck: false }] }];\n            dispatchL({ type: 'UPDATE', data: initialLinear });\n            setInputStates(initialLinear);\n        } else {\n            let initialBranch = [{ id: uuidv4(), stepNum: 1, pipeSegment_srcid: '', pipeSegmentID: '', stepID: '', pipeSegment_srcidCheck: false, pipeSegmentIDCheck: false, stepIDCheck: false, linearSettings: [{ id: uuidv4(), stepID: '', stepIDCheck: false, funcsSettings: [{ fid: uuidv4(), funcName: '', funcP: '', funcNameCheck: false }] }] }];\n            dispatchB({ type: 'UPDATE', data: initialBranch });\n            setInputStates(initialBranch);\n        };\n    }, [basicInfoInput.checkedLinear]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    useEffect(() => {\n        setDownloadLink('');\n        setIsReadyDownload(false);\n    }, [basicInfoInput.checkedLinear]);\n\n    // use localstorage save last edit  \n    useEffect(() => {\n        if (localStorage.getItem(\"basicInfoInput\")) {\n            dispatch({ type: 'UPDATE', data: JSON.parse(localStorage.getItem(\"basicInfoInput\")) });\n        }\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    useEffect(() => {\n        localStorage.setItem(\"basicInfoInput\", JSON.stringify(basicInfoInput))\n    }, [basicInfoInput]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    // make text file\n    const makeTextFile = (basicInfoInput, inputStates) => {\n        let list;\n        if (basicInfoInput.checkedLinear) {\n            list = LinearTemplate(basicInfoInput, inputStates);\n        } else {\n            list = BranchTemplate(basicInfoInput, inputStates);\n        };\n\n        const data = new Blob([list.join('\\n')], { type: 'text/plain' });\n        setCodeString(list.join('\\n'));\n        if (downloadLink !== '') window.URL.revokeObjectURL(downloadLink);\n        return window.URL.createObjectURL(data);\n    };\n\n    //input check\n    const inputCheck = () => {\n        let result = true;\n        let newS = {};\n        if (activeStep === 0) {\n            const values = { ...basicInfoInputCheck };\n            for (const key of Object.keys(values)) {\n                if (basicInfoInput[key] === null || basicInfoInput[key].length === 0) {\n                    if (basicInfoInput.checkedHYDRA) {\n                        if (key === 'checkHydraTimeRange' && basicInfoInput.HydraOptionB) {\n                            newS = { ...newS, [key]: false };\n                        } else if (key === 'checkHydraCleanSeed' && basicInfoInput.HydraOptionA) {\n                            newS = { ...newS, [key]: false };\n                        } else {\n                            newS = { ...newS, [key]: true };\n                        };\n                    } else {\n                        if (key === 'checkHydraTimeRange' || key === 'checkHydraCleanSeed') {\n                            newS = { ...newS, [key]: false };\n                        } else {\n                            newS = { ...newS, [key]: true };\n                        };\n                    };\n                };\n            };\n            result = Object.values(newS).every((value) => value === false);\n            setBasicInfoInputCheck({ ...basicInfoInputCheck, ...newS });\n        } else if (activeStep === 1) {\n            const newInputFields = inputStates.map((i, index) => {\n                i.stepID.length ? i.stepIDCheck = false : (() => { i.stepIDCheck = true; result = false })();\n                if (basicInfoInput.checkedBranch) {\n                    if (index === 0) {\n                        i.pipeSegment_srcidCheck = false;\n                        result = true;\n                        i.pipeSegmentID.length ? i.pipeSegmentIDCheck = false : (() => { i.pipeSegmentIDCheck = true; result = false })();\n                    } else {\n                        i.pipeSegment_srcid.length ? i.pipeSegment_srcidCheck = false : (() => { i.pipeSegment_srcidCheck = true; result = false })();\n                        i.pipeSegmentID.length ? i.pipeSegmentIDCheck = false : (() => { i.pipeSegmentIDCheck = true; result = false })();\n                    };\n                    i.linearSettings.forEach(l => {\n                        l.stepID.length ? l.stepIDCheck = false : (() => { l.stepIDCheck = true; result = false })();\n                        l.funcsSettings.forEach(f => {\n                            let funcEmpty = f.funcName == null || f.funcName.length;\n                            funcEmpty ? f.funcNameCheck = false : (() => { f.funcNameCheck = true; result = false })();\n                        });\n                    });\n                } else {\n                    i.funcsSettings.forEach(f => {\n                        f.funcName.length ? f.funcNameCheck = false : (() => { f.funcNameCheck = true; result = false })();\n                    })\n                };\n                return i;\n            });\n            dispatchL({ type: 'UPDATE', data: newInputFields });\n        };\n        return result;\n    };\n\n    //steppers handler\n    const handleNext = () => {\n        //first run input check\n        let p = inputCheck();\n        if (p) {\n            let prevActiveStep = activeStep;\n            setActiveStep(prevActiveStep + 1);\n            if (prevActiveStep === 1) {\n                handleSubmit();\n            };\n        } else {\n            alert(\"check your input\");\n        };\n    };\n\n    const handleBack = () => {\n        let prevActiveStep = activeStep;\n        if(prevActiveStep === 3){\n            setActiveStep((prevActiveStep) => prevActiveStep - 2);\n        }else{\n            setActiveStep((prevActiveStep) => prevActiveStep - 1);\n        };\n    };\n\n    const handleReset = () => {\n        setActiveStep(0);\n        dispatch({ type: 'UPDATE', data: defaultBasicInfoInput });\n        dispatchB({ type: 'UPDATE', data: initialBranchInputState });\n        dispatchL({ type: 'UPDATE', data: initialLinearInputState });\n    };\n\n    // \n    async function handleSubmit() {\n        let downloadlink = await makeTextFile(basicInfoInput, inputStates);\n        setDownloadLink(downloadlink);\n        setIsReadyDownload(true);\n    };\n\n    const handleChangeStepSets = (e) => {\n        const { value } = e.target;\n        if (stepNum < value) {\n            let form = [...inputStates];\n            if (basicInfoInput.checkedLinear) {\n                for (let i = stepNum; i < value; i++) {\n                    form.push({ id: uuidv4(), stepID: '', stepIDCheck: false, funcsSettings: [{ fid: uuidv4(), funcName: '', funcP: '', funcNameCheck: false }] });\n                };\n                dispatchL({ type: 'UPDATE', data: form });\n                setInputStates(form);\n            } else {\n                for (let i = stepNum; i < value; i++) {\n                    form.push({ id: uuidv4(), stepNum: 1, pipeSegment_srcid: '', pipeSegmentID: '', stepID: '', pipeSegment_srcidCheck: false, pipeSegmentIDCheck: false, stepIDCheck: false, linearSettings: [{ id: uuidv4(), stepID: '', stepIDCheck: false, funcsSettings: [{ fid: uuidv4(), funcName: '', funcP: '', funcNameCheck: false }] }] });\n                }\n                dispatchB({ type: 'UPDATE', data: form });\n                setInputStates(form);\n            };\n            setStepNum(value);\n        } else if (stepNum > value && value >= 1) {\n            let form = [...inputStates];\n            for (let i = 0; i < stepNum - value; i++) {\n                form.pop();\n            };\n            if (basicInfoInput.checkedLinear) {\n                dispatchL({ type: 'UPDATE', data: form });\n                setInputStates(form);\n            } else {\n                dispatchB({ type: 'UPDATE', data: form });\n                setInputStates(form);\n            };\n            setStepNum(value);\n        };\n    };\n\n    return (\n        <div>\n            <div style={{ float: 'center', margin: 30 }} >\n                <Link className={classes.nav} to=\"/\">Intro Page ᐊ</Link>\n                <em>  /  </em>\n                <Link className={classes.nav} to=\"/start\"> Info Form ᐊ</Link>\n            </div>\n            <div>\n                {activeStep === 0 ? (\n                    <BasicInfo\n                        basicInfoInputCheck={basicInfoInputCheck}\n                        setBasicInfoInputCheck={setBasicInfoInputCheck}\n                    />\n                ) : activeStep === 1 ? (\n                    <Container>\n                        {basicInfoInput.checkedLinear ?\n                            <h3>Linear Pipeline Setting</h3>\n                            :\n                            <h3>Branch Pipeline Setting</h3>}\n\n                        <FormControl variant=\"outlined\" className={classes.formControl}>\n                            <InputLabel > {basicInfoInput.checkedBranch ? 'pipeSegments' : 'stepSet number'}</InputLabel>\n                            <Select\n                                native\n                                value={stepNum}\n                                onChange={e => handleChangeStepSets(e)}\n                                label=\"stepSet number\"\n                                inputProps={{\n                                    name: 'stepNum',\n                                }}\n                            >\n                                {\n                                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(i => {\n                                        return <option key={i} value={i}>{i}</option>\n                                    })\n                                }\n                            </Select>\n                        </FormControl>\n                        {basicInfoInput.checkedLinear ?\n                            <LinearPipesForm\n                                ifLinear={true}\n                                index={0}\n                                mid={0} />\n                            :\n                            <BranchPipesForm />}\n\n                    </Container>\n                ) : activeStep === 2 ? (\n\n                    <div>\n                        <h4>Code Preview</h4>                       \n                        {isReadyDownload ? <ReviewPage codeString={codeString} /> : null}\n                    </div>\n\n\n\n                ) : <div>\n                        <h4>Code Preview</h4>\n                        {isReadyDownload ? <ReviewPage codeString={codeString} /> : null}\n                    </div>\n\n                }\n\n            </div>\n            <Steppers\n                activeStep={activeStep}\n                handleSubmit={handleSubmit}\n                handleBack={handleBack}\n                handleNext={handleNext}\n                handleReset={handleReset}\n                isReadyDownload={isReadyDownload}\n                downloadLink={downloadLink}\n            />\n\n        </div>\n    );\n\n\n\n\n}","import React, { useState, useEffect } from \"react\";\nimport {Link} from \"react-router-dom\"\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Check from \"@material-ui/icons/Check\";\nimport clsx from \"clsx\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        marginTop: 50\n    },\n    button: {\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    actionsContainer: {\n        marginBottom: theme.spacing(2),\n    },\n    resetContainer: {\n        padding: theme.spacing(3),\n    },\n    nav:{ \n        color: 'inherit', \n        textDecoration: \"underline\",\n        fontStyle:\"italic\"\n    }\n}));\n\nexport const useQontoStepIconStyles = makeStyles({\n    root: {\n        color: \"#eaeaf0\",\n        display: \"flex\",\n        height: 30,\n        alignItems: \"center\"\n    },\n    active: {\n        color: \"#784af4\"\n    },\n    circle: {\n        width: 24,\n        height: 24,\n        borderRadius: \"50%\",\n        backgroundColor: \"currentColor\"\n    },\n    completed: {\n        color: \"#784af4\",\n        zIndex: 1,\n        fontSize: 24\n    }\n});\n\nfunction QontoStepIcon(props) {\n    const classes = useQontoStepIconStyles();\n    const { active, completed } = props;\n\n    return (\n        <div\n            className={clsx(classes.root, {\n                [classes.active]: active\n            })}\n        >\n            {completed ? (\n                <Check className={classes.completed} />\n            ) : (\n                    <div className={classes.circle} />\n                )}\n        </div>\n    );\n}\n\nfunction getSteps() {\n    return ['Get CTAP Ready', 'Create Execution Folder', 'Instructions on Required Files'];\n}\n\nfunction getStepContent(step) {\n    switch (step) {\n        case 0:\n            return (\n                <div style={{ marginLeft: '2rem', marginTop: '1rem' }}>\n                    <Typography variant=\"body1\" align=\"left\">1. Follow the instruction of <a rel=\"noreferrer\" target=\"_blank\" href=\"https://github.com/bwrc/ctap\">the CTAP repo</a>, download CTAP and setup your MATLAB work environment</Typography>\n                    <Typography variant=\"body1\" align=\"left\">2. You also need to have latest EEGLAB added to your Matlab path (<a rel=\"noreferrer\" target=\"_blank\" href='https://sccn.ucsd.edu/eeglab/downloadtoolbox.php'>instructions here</a>).</Typography>\n                </div>\n            );\n        case 1:\n            return (\n                <div style={{ marginLeft: '2rem', marginTop: '1rem' }}>\n                    <Typography variant=\"body1\" align=\"left\">Create a new project folder under <i><b>~/ctap/templates</b></i> as execution folder. Later after code generation, put the generated executable .m file into this folder.</Typography>\n                </div>\n            );\n        case 2:\n            return (\n                <div style={{ marginLeft: '2rem', marginTop: '1rem' }}>\n                    <Typography variant=\"body1\" align=\"left\">1. The default data source path is <i><b>~/ctap/data/test_data</b></i>.</Typography>\n                    <Typography variant=\"body2\" align=\"left\">You can use defalut path by copying your data into default folder, or you can also define your own data path later</Typography>\n                    <Typography variant=\"body1\" align=\"left\">2. CTAP provides various choices on channel location files, you can find them at <i><b>~/ctap/res</b></i>.</Typography>\n                    <Typography variant=\"body2\" align=\"left\">You can also specify your own channel location file, please copy it to  <i><b>~/ctap/res</b></i>, and add its name manually in the later process.</Typography>\n                </div>\n            );\n        default:\n            return 'Unknown step';\n    }\n}\n\nconst IntroPage = () => {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n    const steps = getSteps();\n\n    const handleNext = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    const handleReset = () => {\n        setActiveStep(0);\n    };\n\n    return (\n        <Container maxWidth=\"sm\">\n            <div style={{ float:'center', margin: 30}} >\n                    <Link className={classes.nav} to=\"/\">Intro Page ᐊ</Link>\n                    <a>  /  </a>\n                    <Link className={classes.nav} to=\"/start\"> Info Form ᐊ</Link>\n            </div>\n            <div style={{ marginTop: 70 }}>\n                <Typography variant='h5'>The CTAP Code Generation Tool is used to show users how CTAP code works and some core ideas of CTAP programming.</Typography>\n            </div>\n            <div className={classes.root}>\n                <Stepper activeStep={activeStep} orientation=\"vertical\">\n                    {steps.map((label, index) => (\n                        <Step key={label}>\n                            <StepLabel StepIconComponent={QontoStepIcon}><Typography variant=\"h6\">{label}</Typography></StepLabel>\n                            <StepContent>\n                                {getStepContent(index)}\n                                <div className={classes.actionsContainer}>\n                                    <div style={{ marginTop: '1rem' }}>\n                                        <Button\n                                            disabled={activeStep === 0}\n                                            onClick={handleBack}\n                                            className={classes.button}\n                                        >\n                                            Back\n                                        </Button>\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            onClick={handleNext}\n                                            className={classes.button}\n                                        >\n                                            { 'Next'}\n                                        </Button>\n                                    </div>\n                                </div>\n                            </StepContent>\n                        </Step>\n                    ))}\n                </Stepper>\n                {activeStep === steps.length && (\n                    <Paper square elevation={0} className={classes.resetContainer}>\n                        <Typography variant='h6'>All steps completed - Now Let's step to</Typography>\n                        <Typography variant='h6'>CTAP CODE GNERATION!</Typography>\n                        <div style={{ marginTop: '1rem' }}>\n                            <Button onClick={handleReset} className={classes.button}>\n                                Reset\n                            </Button>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.button}\n                            ><Link to=\"/start\" style={{ textDecoration: 'none', color: 'inherit' }}>\n                                    Proceed\n                            </Link>\n                            </Button>\n                        </div>\n\n                    </Paper>\n                )}\n            </div>\n        </Container>\n\n    )\n}\n\nexport default IntroPage;","import React from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\n\nimport './App.css';\nimport Main from './Components/Main.js';\nimport IntroPage from './Components/IntroPage';\nimport ContextProvider from './Reducers/ContextProvider'\nimport Typography from \"@material-ui/core/Typography\";\n\n\nfunction App() {\n\n  return (\n\n    <ContextProvider>\n      <HashRouter basename='/'>\n        <Typography variant='h2' align=\"center\" style={{marginTop: '2rem'}}>CTAP Code Generation Tool</Typography>\n        <div className=\"App\">\n          <Route exact path=\"/\" component={IntroPage} />\n          <Route path='/start' component={Main} />\n        </div>\n      </HashRouter>\n    </ContextProvider>\n\n\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter >\n      <App />\n  </BrowserRouter>, \n  document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}