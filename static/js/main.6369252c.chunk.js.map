{"version":3,"sources":["Reducers/Reducer.js","Reducers/ContextProvider.js","data/CTAP_chanlocs.js","Styles/CTAP_Linear.png","Styles/CTAP_Branch.png","Components/BasicInfo.js","Components/LinearTemplate.js","Components/Stepper.js","data/CTAP_funcs.js","Components/FuncsSettingForm.js","Components/LinearPipesForm.js","Components/BranchPipesForm.js","Components/BranchTemplate.js","Components/ReviewPage.js","Components/Main.js","Components/IntroPage.js","App.js","reportWebVitals.js","index.js"],"names":["initialLinearInputState","id","uuidv4","stepID","stepIDCheck","funcsSettings","fid","funcName","funcP","funcNameCheck","initialBranchInputState","pipeSegment_srcid","pipeSegmentID","pipeSegment_srcidCheck","pipeSegmentIDCheck","linearSettings","Reducer","state","action","type","data","defaultBasicInfoInput","checkedLinear","checkedBranch","checkedHYDRA","HydraOptionA","HydraOptionB","checkHydraTimeRange","checkHydraCleanSeed","pipelineName","inputdatapath","checkOwnDataPath","projectRoot","sbj_filt","eegType","eegChanloc","eegReference","eegVeogChannelNames","eegHeogChannelNames","ContextBranch","createContext","ContextLinear","ContextBasic","ContextProvider","children","useReducer","inputLinearState","dispatchL","inputBranchState","dispatchB","basicInfoInput","dispatch","Provider","value","CTAP_chanlocs","filter","createFilterOptions","useStyles","makeStyles","theme","margin","spacing","withoutLabel","marginTop","textField","width","words","textAlign","customWidth","maxWidth","helperText","BasicInfo","basicInfoInputCheck","setBasicInfoInputCheck","classes","useContext","useState","setValue","useEffect","handleInput","event","target","name","handleCheckboxChange","checked","handleHydraChange","e","p","console","log","className","root","noValidate","autoComplete","Container","style","Accordion","AccordionSummary","expandIcon","aria-label","aria-controls","FormControlLabel","onClick","stopPropagation","onFocus","control","Checkbox","onChange","label","AccordionDetails","src","CTAP_Linear_diagram","CTAP_Branch_diagram","Tooltip","title","Typography","variant","tooltip","TextField","error","FormControl","clsx","disabled","placement","Autocomplete","freeSolo","selectOnFocus","clearOnBlur","handleHomeEndKeys","newValue","JSON","stringify","slice","trim","filterOptions","options","params","filtered","inputValue","push","renderInput","LinearTemplate","basicInfo","inputFields","ctap_args","Array","stepSetsArray","HYDRA_presetting","data_dir","forEach","inputField","index","funcs","funcsSetting","funcN","length","join","QontoConnector","withStyles","alternativeLabel","top","left","right","active","borderColor","completed","line","borderTopWidth","borderRadius","StepConnector","useQontoStepIconStyles","color","display","height","alignItems","circle","backgroundColor","zIndex","fontSize","QontoStepIcon","props","button","marginRight","marginBottom","instructions","Steppers","activeStep","handleReset","handleSubmit","handleBack","handleNext","isReadyDownload","downloadLink","steps","Button","download","href","Stepper","connector","map","Step","StepLabel","StepIconComponent","CTAP_funcs","FuncsSettingForm","ifLinear","indexm","mid","inputBranchStates","inputLinearStates","React","inputStates","setInputStates","handleInputChange","newV","values","index_","findIndex","x","newInputStates","i","newState","indexff","IconButton","indexf","splice","handleRemoveFuncFields","functionP","handleAddFuncFields","LinearPipesForm","newInputFields","handleLinearPipesInput","BranchPipesForm","stepNum","setStepNum","InputLabel","Select","native","form","pop","handleChangeStepSets","inputProps","BranchTemplate","pipeArr","branchSrcInfo","pipeSegments","srcid","subpipe","concat","linearSetting","pipeSegment","ReviewPage","codeString","language","vs","showLineNumbers","codeTagProps","fontFamiily","formControl","selectEmpty","nav","textDecoration","fontStyle","Main","setActiveStep","setDownloadLink","setIsReadyDownload","setCodeString","initialLinear","initialBranch","localStorage","getItem","parse","setItem","makeTextFile","list","Blob","window","URL","revokeObjectURL","createObjectURL","a","downloadlink","float","to","prevActiveStep","result","newS","Object","entries","key","every","l","f","inputCheck","alert","actionsContainer","resetContainer","padding","getStepContent","step","marginLeft","align","rel","IntroPage","orientation","StepContent","Paper","square","elevation","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6369252c.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\n//pipeline reducer\nexport const initialLinearInputState = [{ id: uuidv4(), stepID: '', stepIDCheck:false, funcsSettings: [{ fid: uuidv4(), funcName: '', funcP: '', funcNameCheck:false}] }];\nexport const initialBranchInputState = [{ id: uuidv4(), pipeSegment_srcid: '', pipeSegmentID: '', stepID: '', pipeSegment_srcidCheck:false, pipeSegmentIDCheck:false, stepIDCheck:false, linearSettings:[{ id: uuidv4(), stepID: '', stepIDCheck:false, funcsSettings: [{ fid: uuidv4(), funcName: '', funcP: '', funcNameCheck:false}] }] }];\nexport const Reducer = (state, action) => {\n    switch (action.type) {\n        case 'UPDATE': {\n            return action.data\n        }\n        default:\n            return state;\n    }\n};\n\n//basic info reducer\nexport const defaultBasicInfoInput = {\n    checkedLinear: true,\n    checkedBranch: false,\n    checkedHYDRA: true,\n    HydraOptionA: true,\n    HydraOptionB: false,\n    checkHydraTimeRange: \"\",\n    checkHydraCleanSeed: \"\",\n    pipelineName: \"\",\n    inputdatapath:\"ctap/data/test_data\",\n    checkOwnDataPath:false,\n    projectRoot: \"\",\n    sbj_filt: \"\",\n    eegType: \"\",\n    eegChanloc: \"\",\n    eegReference: \"\",\n    eegVeogChannelNames: \"\",\n    eegHeogChannelNames: \"\"\n};","import React, { useReducer, createContext } from \"react\";\nimport { initialLinearInputState, initialBranchInputState, defaultBasicInfoInput, Reducer } from \"./Reducer.js\";\n\nconst ContextProvider = ({ children }) => {\n    const [inputLinearState, dispatchL] = useReducer(Reducer, initialLinearInputState);\n    const [inputBranchState, dispatchB] = useReducer(Reducer, initialBranchInputState);\n    const [basicInfoInput, dispatch] = useReducer(Reducer, defaultBasicInfoInput);\n    return (\n        <ContextBasic.Provider value={[basicInfoInput, dispatch]}>\n            <ContextLinear.Provider value={[inputLinearState, dispatchL]}>\n                <ContextBranch.Provider value={[inputBranchState, dispatchB]}>\n                    {children}\n                </ContextBranch.Provider>\n            </ContextLinear.Provider>\n        </ContextBasic.Provider>\n\n\n    )\n}\nexport const ContextBranch = createContext(initialBranchInputState);\nexport const ContextLinear = createContext(initialLinearInputState);\nexport const ContextBasic = createContext(defaultBasicInfoInput);\n\nexport default ContextProvider","export const CTAP_chanlocs = [\n    '',\n    'chanlocs128_biosemi.elp',\n    'chanlocs128_biosemi_withEOG.elp',\n    'chanlocs128_cent.elp',\n    'chanlocs128_pist.elp',\n    'chanlocs160_biosemi.elp',\n    'chanlocs16_biosemi.elp',\n    'chanlocs16_biosemi_withEOG.elp',\n    'chanlocs256_biosemi.elp',\n    'chanlocs256_biosemi_withEOG.elp',\n    'chanlocs32_biosemi.elp',\n    'chanlocs64_biosemi.elp',\n    'chanlocs64_biosemi_withEOG.elp',\n    'channel_locations_acticap_32.ced'\n]\n","export default __webpack_public_path__ + \"static/media/CTAP_Linear.cab9b4e3.png\";","export default __webpack_public_path__ + \"static/media/CTAP_Branch.4d4e53a9.png\";","import React, { useState, useEffect, useContext } from \"react\";\nimport clsx from 'clsx';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Container from '@material-ui/core/Container';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from \"@material-ui/core/Typography\";\nimport MoreOutlinedIcon from '@material-ui/icons/MoreOutlined';\n\nimport { ContextBasic } from '../Reducers/ContextProvider'\n\nimport { CTAP_chanlocs } from '../data/CTAP_chanlocs'\nimport CTAP_Linear_diagram from '../Styles/CTAP_Linear.png'\nimport CTAP_Branch_diagram from '../Styles/CTAP_Branch.png'\n\nconst filter = createFilterOptions();\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n    withoutLabel: {\n        marginTop: theme.spacing(1),\n    },\n    textField: {\n        width: '25ch',\n    },\n    words: {\n        textAlign: \"center\",\n    },\n    customWidth: {\n        maxWidth: 500,\n    },\n}));\n\nconst helperText = {\n    checkHydraTimeRange: \"Set clean segment time range [start end] in seconds from test data\",\n    checkHydraCleanSeed: \"Name of the clean seed data file extract from test data\",\n    pipelineName: \"Name a folder which contains outputs of pipes\",\n    inputdatapath: 'Input path of test data',\n    projectRoot: \"The root directory of the current analysis.\",\n    sbj_filt: \"The unique sequence number in EEG dataset name(sbj_filt)\",\n    eegType: \"EEG Data Type, eg, *.set/*.bdf\",\n    eegChanloc: \"Channel Location of testing EEG data \",\n    eegReference: \"Reference channel of testing EEG data,  eg, {'L_MASTOID' 'R_MASTOID'}\",\n    eegVeogChannelNames: \"VEOG Channel Names of testing EEG data, required if performing blinks detection, eg, {'VEOG1','VEOG2'}\",\n    eegHeogChannelNames: \"HEOG Channel Names of testing EEG data, required if performing blinks detection, eg, {'HEOG1','HEOG2'}\"\n};\n\nconst BasicInfo = ({ basicInfoInputCheck, setBasicInfoInputCheck }) => {\n    let classes = useStyles();\n\n    const [basicInfoInput, dispatch] = useContext(ContextBasic);\n    const [value, setValue] = useState(basicInfoInput.eegChanloc);\n\n    useEffect(() => {\n        dispatch({ type: 'UPDATE', data: { ...basicInfoInput, eegChanloc: value } });\n        setBasicInfoInputCheck({ ...basicInfoInputCheck, eegChanloc: false });\n    }, [value]);\n\n    //handle input change\n    const handleInput = event => {\n        const { name, value } = event.target;\n        dispatch({ type: 'UPDATE', data: { ...basicInfoInput, [name]: value } });\n        setBasicInfoInputCheck({ ...basicInfoInputCheck, [name]: false });\n    };\n\n    //handle checkbox change\n    const handleCheckboxChange = (event) => {\n        const { name, checked } = event.target;\n        if (name === 'checkedLinear') {\n            dispatch({ type: 'UPDATE', data: { ...basicInfoInput, 'checkedLinear': checked, 'checkedBranch': !checked } });\n        } else if (name === 'checkedBranch') {\n            dispatch({ type: 'UPDATE', data: { ...basicInfoInput, 'checkedBranch': checked, 'checkedLinear': !checked } });\n        } else if (name === 'checkOwnDataPath') {\n            dispatch({ type: 'UPDATE', data: { ...basicInfoInput, [name]: checked } });\n            // initialize data path if disable own path option\n            if (!checked) {\n                setBasicInfoInputCheck({ ...basicInfoInputCheck, inputdatapath: false });\n                dispatch({ type: 'UPDATE', data: { ...basicInfoInput, [name]: checked, inputdatapath: \"ctap/data/test_data\" } });\n            }\n        }\n        else {\n            dispatch({ type: 'UPDATE', data: { ...basicInfoInput, [name]: checked } });\n        }\n    };\n\n    //handle hydra option\n    const handleHydraChange = (e) => {\n        if (e.target.name === 'checkTimeRange') {\n            let p = {};\n            p = { ...p, HydraOptionA: e.target.checked, HydraOptionB: !e.target.checked };\n            if (e.target.checked) {\n                console.log(e.target.checked);\n                p = { ...p, 'checkHydraCleanSeed': '' };\n                setBasicInfoInputCheck({ ...basicInfoInputCheck, 'checkHydraCleanSeed': false })\n            }\n            dispatch({ type: 'UPDATE', data: { ...basicInfoInput, ...p } });\n\n        } else {\n            let p = {};\n            p = { ...p, HydraOptionB: e.target.checked, HydraOptionA: !e.target.checked };\n            //setBasicInfoInput({ ...basicInfoInput, HydraOptionB: e.target.checked, HydraOptionA:!e.target.checked });\n            if (e.target.checked) {\n                p = { ...p, 'checkHydraTimeRange': '' }\n                setBasicInfoInputCheck({ ...basicInfoInputCheck, 'checkHydraTimeRange': false })\n            }\n            dispatch({ type: 'UPDATE', data: { ...basicInfoInput, ...p } });\n        }\n    }\n\n    // console.log(basicInfoInputCheck);\n    // console.log(basicInfoInput)\n    return (\n        <div className={classes.root} noValidate autoComplete=\"off\">\n            <Container maxWidth=\"md\" style={{ marginTop: '3rem' }}>\n                <h4 >What type of pipeline* you would like to generate?</h4>\n                <Accordion style={{ width: 750, margin: '0 auto' }}>\n                    <AccordionSummary\n                        expandIcon={<MoreOutlinedIcon />}\n                        aria-label=\"Expand\"\n                        aria-controls=\"additional-actions1-content\"\n                        id=\"additional-actions1-header\"\n                    >\n                        <FormControlLabel\n                            aria-label=\"Acknowledge\"\n                            onClick={(event) => event.stopPropagation()}\n                            onFocus={(event) => event.stopPropagation()}\n                            control={<Checkbox checked={basicInfoInput.checkedLinear} onChange={handleCheckboxChange} name=\"checkedLinear\" />}\n                            label=\"Linear Pipeline\"\n                        />\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <img src={CTAP_Linear_diagram} width=\"700\" />\n                    </AccordionDetails>\n                </Accordion>\n                <Accordion style={{ width: 750, margin: '0 auto' }}>\n                    <AccordionSummary\n                        expandIcon={<MoreOutlinedIcon />}\n                        aria-label=\"Expand\"\n                        aria-controls=\"additional-actions1-content\"\n                        id=\"additional-actions1-header\"\n                    >\n                        <FormControlLabel\n                            aria-label=\"Acknowledge\"\n                            onClick={(event) => event.stopPropagation()}\n                            onFocus={(event) => event.stopPropagation()}\n                            control={<Checkbox checked={basicInfoInput.checkedBranch} onChange={handleCheckboxChange} name=\"checkedBranch\" />}\n                            label=\"Branch Pipeline\"\n                        />\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <img src={CTAP_Branch_diagram} width=\"700\" />\n                    </AccordionDetails>\n                </Accordion>\n                <h5 className={classes.words}>* Click Linear and Brach tabs to see diagrams describe these two different pipelines. </h5>\n\n                <h5 className={classes.words}>* linear pipeline using different setpSets to group CTAP functions, the processing sequence depends on setpSets order. Branch pipeline generates sub-functions including predefined executable CTAP functions, which provides a more clear and flexible modular way to group functions. </h5>\n                <div>\n                    <FormControlLabel\n                        control={<Checkbox checked={basicInfoInput.checkedHYDRA} onChange={handleCheckboxChange} name=\"checkedHYDRA\" />}\n                        label=\"Implementing HYDRA for artifacts parameter optimization or not?\"\n                    />\n                    {basicInfoInput.checkedHYDRA ? <div>\n                        <div>\n                            <FormControlLabel\n                                control={<Checkbox checked={basicInfoInput.HydraOptionA} onChange={handleHydraChange} name=\"checkTimeRange\" />}\n                                label=\"Provide clean data time-range\"\n                            />\n                            <FormControlLabel\n                                control={<Checkbox checked={basicInfoInput.HydraOptionB} onChange={handleHydraChange} name=\"checkCleanSeed\" />}\n                                label=\"Provide clean seed data\"\n                            />\n                            {basicInfoInput.HydraOptionA ?\n                                <div>\n                                    <Tooltip title={<Typography variant='body2'>{helperText.checkHydraTimeRange}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                                        <TextField\n                                            error={basicInfoInputCheck.checkHydraTimeRange}\n                                            id=\"checkHydraTimeRange\"\n                                            name=\"checkHydraTimeRange\"\n                                            label=\"Time Range\"\n                                            value={basicInfoInput.checkHydraTimeRange}\n                                            onChange={e => handleInput(e)}\n                                            type=\"text\"\n                                            helperText={basicInfoInputCheck.checkHydraTimeRange ? 'The field cannot be empty. Please enter a value' : null}\n                                            variant=\"outlined\"\n                                        />\n                                    </Tooltip>\n\n                                </div> : null}\n\n                            {basicInfoInput.HydraOptionB ?\n                                <div>\n                                    <Tooltip title={<Typography variant='body2'>{helperText.checkHydraCleanSeed}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                                        <TextField\n                                            error={basicInfoInputCheck.checkHydraCleanSeed}\n                                            id=\"checkHydraCleanSeed\"\n                                            name=\"checkHydraCleanSeed\"\n                                            label=\"Seed Data Name\"\n                                            value={basicInfoInput.checkHydraCleanSeed}\n                                            onChange={e => handleInput(e)}\n                                            type=\"text\"\n                                            helperText={basicInfoInputCheck.checkHydraCleanSeed ? 'The field cannot be empty. Please enter a value' : null}\n                                            variant=\"outlined\"\n                                        />\n                                    </Tooltip>\n                                </div> : null}\n                        </div>\n                    </div> : null}\n                    <hr></hr>\n\n                </div>\n\n            </Container>\n            <div style={{ marginTop: '0.8rem' }}>\n                <h4>Basic setting begin</h4>\n                <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                    <Tooltip title={<Typography variant='body2'>{helperText.pipelineName}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                        <TextField\n                            error={basicInfoInputCheck.pipelineName}\n                            id=\"pipelineName\"\n                            name=\"pipelineName\"\n                            label=\"Pipeline Name\"\n                            value={basicInfoInput.pipelineName}\n                            onChange={e => handleInput(e)}\n                            type=\"text\"\n                            helperText={basicInfoInputCheck.pipelineName ? 'The field cannot be empty. Please enter a value' : null}\n                            variant=\"outlined\"\n                        />\n                    </Tooltip>\n                </FormControl>\n                <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                    <Tooltip title={<Typography variant='body2'>{helperText.projectRoot}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                        <TextField\n                            error={basicInfoInputCheck.projectRoot}\n                            id=\"projectRoot\"\n                            name=\"projectRoot\"\n                            label=\"Project Root Folder Name\"\n                            value={basicInfoInput.projectRoot}\n                            onChange={e => handleInput(e)}\n                            type=\"text\"\n                            helperText={basicInfoInputCheck.projectRoot ? 'The field cannot be empty. Please enter a value' : null}\n                            variant=\"outlined\"\n                        />\n                    </Tooltip>\n                </FormControl>\n            </div>\n            <div style={{ marginTop: '0.8rem' }}>\n                <FormControlLabel\n                    className={clsx(classes.margin, classes.textField, classes.withoutLabel)}\n                    control={<Checkbox checked={basicInfoInput.checkOwnDataPath} onChange={handleCheckboxChange} name=\"checkOwnDataPath\" />}\n                    label={<Typography variant='body2'> Edit your own data input path?</Typography>}\n                />\n                <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                    <Tooltip title={<Typography variant='body2'>{helperText.inputdatapath}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                        <TextField\n                            disabled={!basicInfoInput.checkOwnDataPath}\n                            error={basicInfoInputCheck.inputdatapath}\n                            id=\"inputdatapath\"\n                            name=\"inputdatapath\"\n                            label=\"Input Data Path\"\n                            value={basicInfoInput.inputdatapath}\n                            onChange={e => handleInput(e)}\n                            type=\"text\"\n                            helperText={basicInfoInputCheck.inputdatapath ? 'The field cannot be empty. Please enter a value' : ('Default Input test data source path: ~/ctap/data/test_data')}\n                            variant=\"outlined\"\n                        />\n                    </Tooltip>\n                </FormControl>\n\n\n\n            </div>\n            <div style={{ marginTop: '0.8rem' }}>\n                <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                    <Tooltip title={<Typography variant='body2'>{helperText.eegType}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                        <TextField\n                            error={basicInfoInputCheck.eegType}\n                            id=\"eegType\"\n                            name=\"eegType\"\n                            label=\"EEG Data Type\"\n                            value={basicInfoInput.eegType}\n                            onChange={e => handleInput(e)}\n                            type=\"text\"\n                            helperText={basicInfoInputCheck.eegType ? 'The field cannot be empty. Please enter a value' : null}\n                            variant=\"outlined\"\n                        />\n                    </Tooltip>\n                </FormControl>\n\n                <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                    <Tooltip title={<Typography variant='body2'>{helperText.sbj_filt}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                        <TextField\n                            error={basicInfoInputCheck.sbj_filt}\n                            id=\"sbj_filt\"\n                            name=\"sbj_filt\"\n                            label=\"EEG File Name Sequence\"\n                            value={basicInfoInput.sbj_filt}\n                            onChange={e => handleInput(e)}\n                            type=\"text\"\n                            helperText={basicInfoInputCheck.sbj_filt ? 'The field cannot be empty. Please enter a value' : null}\n                            variant=\"outlined\"\n                        />\n                    </Tooltip>\n                </FormControl>\n            </div>\n            <div style={{ marginTop: '0.8rem' }}>\n                <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                    <Tooltip title={<Typography variant='body2'>{helperText.eegChanloc}</Typography>} classes={{ tooltip: classes.customWidth }} placement=\"top\">\n                        <Autocomplete\n                            freeSolo\n                            selectOnFocus\n                            clearOnBlur\n                            handleHomeEndKeys\n                            value={basicInfoInput.eegChanloc}\n                            onChange={(event, newValue) => {\n                                if (JSON.stringify(newValue).slice(1, 5).trim() === 'Add') {\n                                    setValue(JSON.stringify(newValue).slice(7, -3).trim());\n                                } else {\n                                    setValue(newValue)\n                                }\n                            }}\n                            filterOptions={(options, params) => {\n                                const filtered = filter(options, params);\n                                if (params.inputValue !== '') {\n                                    filtered.push(`Add \"${params.inputValue}\"`);\n                                }\n                                return filtered;\n                            }}\n                            id=\"controllable-states-demo\"\n                            options={CTAP_chanlocs}\n                            renderInput={(params) => <TextField\n                                {...params}\n                                error={basicInfoInputCheck.eegChanloc}\n                                helperText={basicInfoInputCheck.eegChanloc ? 'The field cannot be empty. Please enter a value' : null}\n                                label=\"EEG Data Channel Location\"\n                                variant=\"outlined\" />}\n                        />\n                    </Tooltip>\n                </FormControl>\n                <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                    <Tooltip title={<Typography variant='body2'>{helperText.eegReference}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                        <TextField\n                            error={basicInfoInputCheck.eegReference}\n                            id=\"eegReference\"\n                            name=\"eegReference\"\n                            label=\"EEG Data Reference Channel\"\n                            value={basicInfoInput.eegReference}\n                            onChange={e => handleInput(e)}\n                            type=\"text\"\n                            helperText={basicInfoInputCheck.eegReference ? 'The field cannot be empty. Please enter a value' : null}\n                            variant=\"outlined\"\n                        />\n                    </Tooltip>\n                </FormControl>\n            </div>\n            <div style={{ marginTop: '0.8rem' }}>\n                <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                    <Tooltip title={<Typography variant='body2'>{helperText.eegHeogChannelNames}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                        <TextField\n                            error={basicInfoInputCheck.eegHeogChannelNames}\n                            id=\"eegHeogChannelNames\"\n                            name=\"eegHeogChannelNames\"\n                            label=\"HEOG Channel Names\"\n                            value={basicInfoInput.eegHeogChannelNames}\n                            onChange={e => handleInput(e)}\n                            type=\"text\"\n                            helperText={basicInfoInputCheck.eegHeogChannelNames ? 'The field cannot be empty. Please enter a value' : null}\n                            variant=\"outlined\"\n                        />\n                    </Tooltip>\n                </FormControl>\n                <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                    <Tooltip title={<Typography variant='body2'>{helperText.eegVeogChannelNames}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                        <TextField\n                            error={basicInfoInputCheck.eegVeogChannelNames}\n                            id=\"eegVeogChannelNames\"\n                            name=\"eegVeogChannelNames\"\n                            label=\"VEOG Channel Names\"\n                            value={basicInfoInput.eegVeogChannelNames}\n                            onChange={e => handleInput(e)}\n                            type=\"text\"\n                            helperText={basicInfoInputCheck.eegVeogChannelNames ? 'The field cannot be empty. Please enter a value' : null}\n                            variant=\"outlined\"\n                        />\n                    </Tooltip>\n                </FormControl>\n            </div>\n        </div>\n    )\n};\n\nexport default BasicInfo;\n","\nconst LinearTemplate = (basicInfo, inputFields) => {\n\n    let ctap_args = new Array([]);\n    let stepSetsArray = new Array([]);\n    let HYDRA_presetting = new Array([]);\n\n    if (basicInfo.checkedHYDRA) {\n        HYDRA_presetting.push(`HYDRA = true;`);\n        HYDRA_presetting.push(`PARAM = param_sweep_setup(project_dir);`);\n        HYDRA_presetting.push(`Cfg.HYDRA.ifapply = HYDRA;`);\n        HYDRA_presetting.push(`Cfg.HYDRA.chanloc = '${basicInfo.eegChanloc}';`);\n        HYDRA_presetting.push(`Cfg.HYDRA.PARAM = PARAM;`);\n        HYDRA_presetting.push(`Cfg.HYDRA.FULL_CLEAN_SEED = false;`);\n        if (basicInfo.checkHydraTimeRange && !basicInfo.checkHydraCleanSeed) {\n            HYDRA_presetting.push(`Cfg.HYDRA.provide_seed_timerange = true;`)\n            HYDRA_presetting.push(`Cfg.HYDRA.cleanseed_timerange = ${basicInfo.checkHydraTimeRange};`);\n        } else if (basicInfo.checkHydraCleanSeed && !basicInfo.checkHydraTimeRange) {\n            HYDRA_presetting.push(`Cfg.HYDRA.provide_seed_timerange = false;`)\n            HYDRA_presetting.push(`Cfg.HYDRA.seed_fname = ${basicInfo.checkHydraCleanSeed};`);\n        }\n    }\n\n    let data_dir = '';\n    if(basicInfo.checkOwnDataPath){\n        data_dir = `data_dir = '${basicInfo.inputdatapath}';`\n    }else{\n        data_dir = `data_dir = append(reporoot,'ctap/data/test_data');`\n    }\n    \n    inputFields.forEach((inputField, index) => {\n        let funcs = ``;\n        inputField.funcsSettings.forEach(funcsSetting => {\n            funcs = funcs + `@${funcsSetting.funcName}, `;\n            let funcN = funcsSetting.funcName;\n            if(funcN){\n                funcN = funcN.slice(5,funcN.length)\n            }\n            ctap_args.push(`out.${funcN}=struct(${funcsSetting.funcP})`)\n        });\n        stepSetsArray.push(`stepSet(${index + 1}).id = [num2str(${index + 1}), '${inputField.stepID}'];`);\n        stepSetsArray.push(`stepSet(${index + 1}).funH{${funcs}};`);\n    })\n\n\n    return new Array(\n        `%% Basic setting`,\n        `pipeline_name = '${basicInfo.pipelineName}';`,\n        \"FILE_ROOT = mfilename('fullpath');\",\n        `reporoot = FILE_ROOT(1:strfind(FILE_ROOT, fullfile('ctap', 'templates', '${basicInfo.projectRoot}', 'ctap_linear_template')) - 1);`,\n        `project_dir = FILE_ROOT(1:strfind(FILE_ROOT, fullfile('ctap_linear_template')) - 1);`,\n        `${data_dir}`,\n        `Cfg.env.paths = cfg_create_paths(project_dir, pipeline_name, {''}, 1);`,\n        `Cfg.eeg.chanlocs = '${basicInfo.eegChanloc}';`,\n        `Cfg.eeg.reference = ${basicInfo.eegReference};`,\n        `Cfg.eeg.veogChannelNames = ${basicInfo.eegVeogChannelNames};`,\n        `Cfg.eeg.heogChannelNames = ${basicInfo.eegHeogChannelNames};`,\n        `Cfg.grfx.on = false;`,\n        `Cfg.MC = get_meas_cfg_MC(Cfg, data_dir, 'eeg_ext', '${basicInfo.eegType}', 'sbj_filt', ${basicInfo.sbj_filt});`,\n        `${HYDRA_presetting.join('\\n')}`,\n        ``,\n        `%% Pipeline setting`,\n        `clear Pipe;`,\n        `${stepSetsArray.join('\\n')}`,\n        `${[ctap_args.join('\\n')]}`,\n        `Cfg.pipe.stepSets = stepSet;`,\n        `Cfg.pipe.runSets = {stepSet(1).id};`,\n        `Cfg = ctap_auto_config(Cfg, out);`,\n        ` `,\n        `%% Run the pipe`,\n        `CTAP_pipeline_looper(Cfg, 'debug', DEBUG, 'overwrite', true);`,\n        `clear i stepSet Filt ctap_args`\n\n    )\n\n};\n\nexport default LinearTemplate;\n","import { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport StepConnector from \"@material-ui/core/StepConnector\";\nimport Button from '@material-ui/core/Button';\nimport clsx from \"clsx\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Check from \"@material-ui/icons/Check\";\n\n\nexport const QontoConnector = withStyles({\n    alternativeLabel: {\n        top: 10,\n        left: \"calc(-50% + 16px)\",\n        right: \"calc(50% + 16px)\"\n    },\n    active: {\n        \"& $line\": {\n            borderColor: \"#784af4\"\n        }\n    },\n    completed: {\n        \"& $line\": {\n            borderColor: \"#784af4\"\n        }\n    },\n    line: {\n        borderColor: \"#eaeaf0\",\n        borderTopWidth: 3,\n        borderRadius: 1\n    },\n})(StepConnector);\n\nexport const useQontoStepIconStyles = makeStyles({\n    root: {\n        color: \"#eaeaf0\",\n        display: \"flex\",\n        height: 22,\n        alignItems: \"center\"\n    },\n    active: {\n        color: \"#784af4\"\n    },\n    circle: {\n        width: 8,\n        height: 8,\n        borderRadius: \"50%\",\n        backgroundColor: \"currentColor\"\n    },\n    completed: {\n        color: \"#784af4\",\n        zIndex: 1,\n        fontSize: 18\n    }\n});\n\nfunction QontoStepIcon(props) {\n    const classes = useQontoStepIconStyles();\n    const { active, completed } = props;\n\n    return (\n        <div\n            className={clsx(classes.root, {\n                [classes.active]: active\n            })}\n        >\n            {completed ? (\n                <Check className={classes.completed} />\n            ) : (\n                    <div className={classes.circle} />\n                )}\n        </div>\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: \"100%\",\n        marginTop: 50\n    },\n    button: {\n        marginRight: theme.spacing(1),\n        marginBottom: theme.spacing(2),\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1)\n    },\n\n}));\n\nfunction getSteps() {\n    return [\"Basic settings\", \"Pipe config\", \"Review and download\"];\n}\n\nconst Steppers = ({ activeStep, handleSubmit, handleReset, handleBack, handleNext, isReadyDownload, downloadLink }) => {\n    const classes = useStyles();\n    const steps = getSteps();\n\n\n    return (\n        <div className={classes.root}>\n            <div>\n                {activeStep === steps.length ? (\n                    <div>\n                        {isReadyDownload ?\n                            <div>\n                                <div style={{ margin: 50 }}>\n                                    <Button download='ctap_linear_template.m' href={downloadLink} variant=\"outlined\" color=\"primary\">Download</Button>\n                                </div>\n                                <Button variant=\"outlined\" color=\"secondary\" onClick={handleReset} className={classes.button}>\n                                    Reset\n                                    </Button>\n                                <Button variant=\"contained\" onClick={handleBack} className={classes.button} color=\"primary\">\n                                    Back\n                                    </Button>\n                            </div> : null}\n                    </div>\n                ) : (\n                        <div>\n                            <Button\n                                disabled={activeStep === 0}\n                                onClick={handleBack}\n                                className={classes.button}\n                            >\n                                Back\n                                </Button>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={handleNext}\n                                className={classes.button}\n                            >\n                                {activeStep === steps.length - 1 ? \"Finish and Generate Code\" : \"Next\"}\n                            </Button>\n                        </div>\n                    )}\n            </div>\n            <Stepper\n                alternativeLabel\n                activeStep={activeStep}\n                connector={<QontoConnector />}\n            >\n                {steps.map((label) => (\n                    <Step key={label}>\n                        <StepLabel StepIconComponent={QontoStepIcon}>{label}</StepLabel>\n                    </Step>\n                ))}\n            </Stepper>\n        </div>\n    );\n}\n\nexport default Steppers;","export const CTAP_funcs = [\n    '',\n    'CTAP_load_data',\n    'CTAP_load_chanlocs',\n    'CTAP_reref_data',\n    'CTAP_blink2event',\n    'CTAP_peek_data',\n    'CTAP_fir_filter',\n    'CTAP_run_ica',\n    'CTAP_detect_bad_comps',\n    'CTAP_reject_data',\n    'CTAP_detect_bad_channels',\n    'CTAP_interp_chan',\n    'CTAP_detect_bad_segments'\n]","import React, { useContext, useEffect, useState } from \"react\";\nimport clsx from 'clsx';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from \"@material-ui/core/Typography\";\nimport { v4 as uuidv4 } from 'uuid';\n\n\nimport { ContextBranch, ContextLinear } from '../Reducers/ContextProvider'\nimport { CTAP_funcs } from '../data/CTAP_funcs'\n\nconst FuncsSettingForm = ({ ifLinear, index, indexm, funcsSettings, classes, mid }) => {\n\n    const [inputBranchStates, dispatchB] = useContext(ContextBranch);\n    const [inputLinearStates, dispatchL] = useContext(ContextLinear);\n    const [value, setValue] = React.useState(null);\n    const [inputStates, setInputStates] = useState(() => {\n        if (ifLinear) {\n            return inputLinearStates;\n        } else {\n            return inputBranchStates[index].linearSettings;\n        }\n    });\n\n    useEffect(() => {\n        if (ifLinear) {\n            setInputStates(inputLinearStates);\n        } else {\n            setInputStates(inputBranchStates[index].linearSettings);\n        }\n    }, [inputLinearStates, inputBranchStates])\n\n    const handleInputChange = (id, name, newV) => {\n        const values = [...inputStates];\n        let index_ = values.findIndex(x => x.id === mid);\n        const newInputStates = values[index_].funcsSettings.map(i => {\n            if (id === i.fid) {\n                i[name] = newV;\n                i[name + 'Check'] = false;\n            }\n            return i;\n        })\n        values[index_].funcsSettings = newInputStates;\n        if (ifLinear) {\n            dispatchL({ type: 'UPDATE', data: values })\n        } else {\n            let newState = [...inputBranchStates];\n            newState[index].linearSettings = values;\n            dispatchB({ type: 'UPDATE', data: newState })\n        }\n\n    }\n\n    const handleAddFuncFields = () => {\n        const values = [...inputStates];\n        let index_ = values.findIndex(x => x.id === mid);\n        values[index_].funcsSettings.push({ fid: uuidv4(), funcName: '', functionP: '' });\n        if (ifLinear) {\n            dispatchL({ type: 'UPDATE', data: values })\n        } else {\n            let newState = [...inputBranchStates];\n            newState[index].linearSettings = values;\n            dispatchB({ type: 'UPDATE', data: newState });\n        }\n\n    }\n\n    const handleRemoveFuncFields = (id) => {\n        const values = [...inputStates];\n        let index_ = values.findIndex(x => x.id === mid);\n        let indexf = values[index_].funcsSettings.findIndex(x => x.fid === id);\n        values[index_].funcsSettings.splice(indexf, 1);\n        if (ifLinear) {\n            dispatchL({ type: 'UPDATE', data: values });\n        } else {\n            let newState = [...inputBranchStates];\n            newState[index].linearSettings = values;\n            dispatchB({ type: 'UPDATE', data: newState });\n        }\n\n    }\n\n\n    return (\n        <div className={clsx(classes.margin, classes.withoutLabel)}>\n            {funcsSettings.map((funcsSetting, indexff) => (\n                <div key={funcsSetting.fid}>\n                    <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                        <Autocomplete\n                            id={'funcName' + indexff}\n                            value={inputStates[indexm].funcsSettings[indexff].funcName}\n                            onChange={(event, newValue) => {\n                                setValue(newValue);\n                                handleInputChange(funcsSetting.fid, 'funcName', newValue);\n                            }}\n                            id=\"controllable-states-demo\"\n                            options={CTAP_funcs}\n                            renderInput={(params) => <TextField {...params} error={funcsSetting.funcNameCheck} label=\"Function Name\" variant=\"outlined\" helperText={funcsSetting.funcNameCheck ? 'The field cannot be empty. Please select a function' : ''} />}\n                        />\n                    </FormControl>\n                    <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                        <Tooltip title={<Typography variant='body2'>{\"check docs for parameters supported for each func, input in 'pName', p, eg.('method', 'fastica', 'overwrite', true). All the string input need single-quote:'input' \"}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                            <TextField\n                                id={\"funcP\" + indexff}\n                                name=\"funcP\"\n                                label=\"Function Parameters\"\n                                variant=\"outlined\"\n                                value={inputStates[indexm].funcsSettings[indexff].funcP}\n                                onChange={event => handleInputChange(funcsSetting.fid, event.target.name, event.target.value)}\n                            />\n                        </Tooltip>\n                    </FormControl>\n                    <FormControl className={clsx(classes.margin)}>\n                        <IconButton disabled={funcsSettings.length === 1} onClick={() => handleRemoveFuncFields(funcsSetting.fid)}>\n                            <RemoveIcon />\n                        </IconButton>\n                    </FormControl>\n                    <FormControl className={clsx(classes.margin)}>\n                        <IconButton onClick={() => handleAddFuncFields()}>\n                            <AddIcon />\n                        </IconButton>\n                    </FormControl>\n\n                </div>\n            ))}\n        </div>\n\n    );\n}\n\nexport default FuncsSettingForm;","import React, { useContext, useState, useEffect } from \"react\";\nimport clsx from 'clsx';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControl from '@material-ui/core/FormControl';\nimport FuncsSettingForm from \"./FuncsSettingForm\"\nimport { ContextBranch, ContextLinear } from '../Reducers/ContextProvider'\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n    withoutLabel: {\n        marginTop: theme.spacing(1),\n    },\n    textField: {\n        width: '25ch',\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    customWidth: {\n        maxWidth: 500,\n    },\n\n}))\n\nconst LinearPipesForm = ({ ifLinear, index, mid }) => {\n    const classes = useStyles()\n    const [inputBranchStates, dispatchB] = useContext(ContextBranch);\n    const [inputLinearStates, dispatchL] = useContext(ContextLinear);\n    const [inputStates, setInputStates] = useState(() => {\n        if (ifLinear) {\n            return inputLinearStates;\n        } else {\n            return inputBranchStates[index].linearSettings;\n        }\n    });\n\n    useEffect(() => {\n        if (ifLinear) {\n            setInputStates(inputLinearStates);\n        } else {\n            setInputStates(inputBranchStates[index].linearSettings);\n        }\n    }, [inputLinearStates, inputBranchStates])\n\n\n    const handleLinearPipesInput = (id, event) => {\n        const newInputFields = inputStates.map(i => {\n            if (id === i.id) {\n                i[event.target.name] = event.target.value\n                i[event.target.name + 'Check'] = false;\n            }\n            return i;\n        })\n\n        if (ifLinear) {\n            dispatchL({ type: 'UPDATE', data: newInputFields });\n        } else {\n            const newValue = inputBranchStates;\n            newValue[index].linearSettings = newInputFields;\n            dispatchB({ type: 'UPDATE', data: newValue });\n        }\n        setInputStates(newInputFields);\n    }\n\n    return (\n        <Container maxWidth=\"md\" >\n            {inputStates.map((inputField, indexf) => (\n                <div key={inputField.id}>\n                    <h4>stepSet {indexf + 1}</h4>\n                    <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                        <Tooltip title={<Typography variant='body2'>{`describe main work in this stepSet, eg.'_load'`}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                            <TextField\n                                variant=\"outlined\"\n                                error={inputField.stepIDCheck}\n                                name=\"stepID\"\n                                label=\"stepID\"\n                                helperText={inputField.stepIDCheck ? 'The field cannot be empty. Please enter a value' : null}\n                                value={inputField.stepID}\n                                onChange={event => handleLinearPipesInput(inputField.id, event)}\n                            />\n                        </Tooltip>\n                    </FormControl>\n                    <FormControl className={clsx(classes.margin, classes.withoutLabel)}>\n                        <FuncsSettingForm\n                            ifLinear={ifLinear}\n                            index={index}\n                            indexm={indexf}\n                            classes={classes}\n                            mid={inputField.id}\n                            funcsSettings={inputField.funcsSettings} />\n                    </FormControl>\n                </div>\n            ))}\n        </Container>\n    );\n}\n\nexport default LinearPipesForm;","import React, { useContext, useState } from \"react\";\nimport clsx from 'clsx';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport LinearPipesForm from \"./LinearPipesForm\";\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from \"@material-ui/core/Typography\";\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { ContextBranch } from '../Reducers/ContextProvider'\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n    withoutLabel: {\n        marginTop: theme.spacing(1),\n    },\n    textField: {\n        width: '25ch',\n    },\n    customWidth: {\n        maxWidth: 500,\n    },\n}));\n\nconst helperText = {\n    stepID: \"describe main work in this pipeSegment, eg.'_load'\",\n    pipeSegmentID: \"ID of this pipeSegment, eg.'pipe2'\",\n    pipeSegment_srcid: \"Describe the hierarchy relationship between other pipeSegment, you should input [pipeSegment ID] of the previously executed pipe, for example, if the current pipeSegment runs after pipe2, then the input should be pipe2. The first pipeSegment doesn't need this, leave it empty is ok.\"\n};\n\nconst BranchPipesForm = () => {\n    const classes = useStyles()\n    const [inputStates, dispatch] = useContext(ContextBranch);\n    const [stepNum, setStepNum] = useState(1);\n\n    const handleLinearPipesInput = (id, event) => {\n        const newInputFields = inputStates.map(i => {\n            if (id === i.id) {\n                i[event.target.name] = event.target.value\n                i[event.target.name + 'Check'] = false;\n            }\n            return i;\n        })\n        dispatch({ type: 'UPDATE', data: newInputFields })\n    }\n\n    const handleChangeStepSets = (e, index) => {\n        const { value } = e.target;\n        if (stepNum < value) {\n            let form = [...inputStates];\n            for (let i = stepNum; i < value; i++) {\n                form[index].linearSettings.push({ id: uuidv4(), stepID: '', stepIDCheck: false, funcsSettings: [{ fid: uuidv4(), funcName: '', funcP: '', funcNameCheck: false }] });\n            }\n            dispatch({ type: 'UPDATE', data: form })\n            setStepNum(value);\n        } else if (stepNum > value && value >= 1) {\n            let form = [...inputStates];\n            for (let i = 0; i < stepNum - value; i++) {\n                form[index].linearSettings.pop();\n            }\n            dispatch({ type: 'UPDATE', data: form })\n            setStepNum(value);\n        }\n    }\n\n    //  console.log(inputStates)\n    return (\n        <Container maxWidth=\"md\">\n            {inputStates.map((inputField, index) => (\n                <div key={inputField.id}>\n                    <h4>Pipe-segment {index + 1}</h4>\n                    <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                        <Tooltip title={<Typography variant='body2'>{helperText.stepID}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                            <TextField\n                                error={inputField.stepIDCheck}\n                                name=\"stepID\"\n                                label=\"pipeSegment Description Label\"\n                                variant=\"outlined\"\n                                helperText={inputField.stepIDCheck ? 'The field cannot be empty. Please enter a value' : null}\n                                value={inputField.stepID}\n                                onChange={event => handleLinearPipesInput(inputField.id, event)}\n                            />\n                        </Tooltip>\n                    </FormControl>\n\n\n                    <h5>Define hierarchy</h5>\n                    <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel,)}>\n                        <Tooltip title={<Typography variant='body2'>{helperText.pipeSegmentID}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                            <TextField\n                                error={inputField.pipeSegmentIDCheck}\n                                name=\"pipeSegmentID\"\n                                label=\"pipeSegment ID\"\n                                variant=\"outlined\"\n                                helperText={inputField.pipeSegmentIDCheck ? 'The field cannot be empty. Please enter a value' : null}\n                                value={inputField.pipeSegmentID}\n                                onChange={event => handleLinearPipesInput(inputField.id, event)}\n                            />\n                        </Tooltip>\n                    </FormControl>\n                    <FormControl className={clsx(classes.margin, classes.textField, classes.withoutLabel,)}>\n                        <Tooltip title={<Typography variant='body2'>{helperText.pipeSegment_srcid}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                            <TextField\n                                error={inputField.pipeSegment_srcidCheck}\n                                name=\"pipeSegment_srcid\"\n                                label=\"pipeSegment Srcid\"\n                                variant=\"outlined\"\n                                helperText={inputField.pipeSegment_srcidCheck ? 'The field cannot be empty. Please enter a value' : null}\n                                value={inputField.pipeSegment_srcid}\n                                onChange={event => handleLinearPipesInput(inputField.id, event)}\n                            />\n                        </Tooltip>\n                    </FormControl>\n\n\n                    <h5>Define pipeline</h5>\n                    <FormControl variant=\"outlined\" className={clsx(classes.margin, classes.textField, classes.withoutLabel)}>\n                        <InputLabel > {'stepSet number'}</InputLabel>\n                        <Select\n                            native\n                            value={stepNum}\n                            onChange={e => handleChangeStepSets(e, index)}\n                            label=\"stepSet number\"\n                            inputProps={{\n                                name: 'stepNum',\n                            }}\n                        >\n                            {\n                                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(i => {\n                                    return <option key={i} value={i}>{i}</option>\n                                })\n                            }\n                        </Select>\n                    </FormControl>\n                    <LinearPipesForm\n                        ifLinear={false}\n                        index={index}\n                        mid={inputField.id} />\n                </div>\n            ))}\n\n        </Container >\n    );\n}\n\nexport default BranchPipesForm;","const BranchTemplate = (basicInfo, inputFields) => {\n\n    let HYDRA_presetting = new Array([]);\n    let pipeArr = '';\n    let branchSrcInfo = {};\n    let pipeSegments = new Array([]);\n\n    if (basicInfo.checkedHYDRA) {\n        HYDRA_presetting.push(`HYDRA = true;`);\n        HYDRA_presetting.push(`PARAM = param_sweep_setup(project_dir);`);\n        HYDRA_presetting.push(`Cfg.HYDRA.ifapply = HYDRA;`);\n        HYDRA_presetting.push(`Cfg.HYDRA.chanloc = '${basicInfo.eegChanloc}';`);\n        HYDRA_presetting.push(`Cfg.HYDRA.PARAM = PARAM;`);\n        HYDRA_presetting.push(`Cfg.HYDRA.FULL_CLEAN_SEED = false;`);\n        if (basicInfo.checkHydraTimeRange && !basicInfo.checkHydraCleanSeed) {\n            HYDRA_presetting.push(`Cfg.HYDRA.provide_seed_timerange = true;`);\n            HYDRA_presetting.push(`Cfg.HYDRA.cleanseed_timerange = ${basicInfo.checkHydraTimeRange};`);\n        } else if (basicInfo.checkHydraCleanSeed && !basicInfo.checkHydraTimeRange) {\n            HYDRA_presetting.push(`Cfg.HYDRA.provide_seed_timerange = false;`);\n            HYDRA_presetting.push(`Cfg.HYDRA.seed_fname = ${basicInfo.checkHydraCleanSeed};`);\n        }\n    }\n\n    let data_dir = '';\n    if(basicInfo.checkOwnDataPath){\n        data_dir = `data_dir = '${basicInfo.inputdatapath}';`;\n    }else{\n        data_dir = `data_dir = append(reporoot,'ctap/data/test_data');`;\n    }\n\n    inputFields.map((inputField, index) => {\n        let stepSetsArray = new Array([]);\n        let ctap_args = new Array([]);\n        let funcs = ``;\n        let subpipe = \"@sbf_\" + inputField.pipeSegmentID + \", \";\n        pipeArr = pipeArr + subpipe;\n\n        let srcid;\n        if (index === 0) {\n            branchSrcInfo[inputField.pipeSegmentID] = {\n                '0': \"\".concat(1, inputField.stepID),\n                '1': \"\"\n            };\n            srcid = \"\";\n        } else {\n            branchSrcInfo[inputField.pipeSegmentID] = {\n                '0': \"\".concat(1, inputField.stepID),\n                '1': \"\".concat(branchSrcInfo[inputField.pipeSegment_srcid]['1'], inputField.pipeSegment_srcid, '#')\n            };\n            srcid = \"\".concat(branchSrcInfo[inputField.pipeSegmentID]['1'], branchSrcInfo[inputField.pipeSegment_srcid]['0']);\n        };\n\n        inputField.linearSettings.map(linearSetting => {\n            let funcs = ``;\n            linearSetting.funcsSettings.forEach(funcsSetting => {\n                funcs = funcs + `@${funcsSetting.funcName}, `;\n                let funcN = funcsSetting.funcName;\n                if(funcN){\n                    funcN = funcN.slice(5,funcN.length)\n                }\n                ctap_args.push(`   out.${funcN}=struct(${funcsSetting.funcP});`)\n            });\n            stepSetsArray.push(`   stepSet(${index + 1}).id = [num2str(${index + 1}), '${inputField.stepID}'];`);\n            stepSetsArray.push(`   stepSet(${index + 1}).funH{${funcs}};`);\n        });\n\n        //pipeSegments\n        let pipeSegment = new Array(\n            `function [Cfg, out] = pipeSegment_${inputField.pipeSegmentID}(Cfg)`,\n            `   %%%%%%%% Define hierarchy %%%%%%%%`,\n            `   Cfg.id = '${inputField.pipeSegmentID}';`,\n            `   Cfg.srcid = {${srcid}};`,\n            `   %%%%%%%% Define pipeline %%%%%%%%`,\n            `   i = 1; %stepSet 1`,\n            `${stepSetsArray.join('\\n')}`,\n            `${[ctap_args.join('\\n')]}`,\n            `   Cfg.pipe.runSets = {stepSet(:).id};`,\n            `   Cfg.pipe.stepSets = stepSet;`,\n            `end`,\n            ``\n        )\n        pipeSegments.push(`${pipeSegment.join('\\n')}`);\n    })\n\n    pipeArr = `pipeArr = {${pipeArr}};`\n\n    let results = new Array(\n        `%% Basic setting`,\n        `pipeline_name = '${basicInfo.pipelineName}';`,\n        `FILE_ROOT = mfilename('fullpath');`,\n        `reporoot = FILE_ROOT(1:strfind(FILE_ROOT, fullfile('ctap', 'templates', '${basicInfo.projectRoot}', 'ctap_linear_template')) - 1);`,\n        `project_dir = FILE_ROOT(1:strfind(FILE_ROOT, fullfile('ctap_linear_template')) - 1);`,\n        `${data_dir}`,\n        `PREPRO = true;`,\n        `STOP_ON_ERROR = false;`,\n        `OVERWRITE_OLD_RESULTS = true;`,\n        `[Cfg, ~] = sbf_cfg(project_dir, pipeline_name);`,\n        `Cfg.grfx.on = false;`,\n        `Cfg.MC = get_meas_cfg_MC(Cfg, data_dir, 'eeg_ext', '${basicInfo.eegType}', 'sbj_filt', ${basicInfo.sbj_filt});`,\n        `${HYDRA_presetting.join('\\n')}`,\n        ``,\n        `%% run pipe`,\n        `clear Pipe;`,\n        `${pipeArr}`,\n        `runps = 1:length(pipeArr);`,\n        `if PREPRO`,\n        `   CTAP_pipeline_brancher(Cfg, pipeArr, 'runPipes', runps, 'dbg', STOP_ON_ERROR, 'ovw', OVERWRITE_OLD_RESULTS);`,\n        `end`,\n        ` `,\n        `%% PipeSegments`,\n        `function [Cfg, out] = sbf_cfg(project_root_folder, ID)`,\n        `   Cfg.id = ID;`,\n        `   Cfg.srcid = {''};`,\n        `   Cfg.env.paths.projectRoot = project_root_folder;`,\n        `   % Define important directories and files`,\n        `   Cfg.env.paths.branchSource = '';`,\n        `   Cfg.env.paths.ctapRoot = fullfile(Cfg.env.paths.projectRoot, Cfg.id);`,\n        `   Cfg.env.paths.analysisRoot = Cfg.env.paths.ctapRoot;`,\n        `   Cfg.eeg.chanlocs = '${basicInfo.eegChanloc}';`,\n        `   Cfg.eeg.reference = ${basicInfo.eegReference};`,\n        `   Cfg.eeg.veogChannelNames = ${basicInfo.eegVeogChannelNames};`,\n        `   Cfg.eeg.heogChannelNames = ${basicInfo.eegHeogChannelNames};`,\n        `   out = struct([]);`,\n        `end`,\n        ``,\n        `${pipeSegments.join('\\n')}`,\n    );\n    return results;\n\n};\n\nexport default BranchTemplate;\n\n// linearStepInfo","import React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { vs } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport Container from '@material-ui/core/Container';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        marginTop: 50,\n        textAlign: \"left\"\n    },\n\n}));\n\nconst ReviewPage = (codeString) => {\n    const classes = useStyles();\n\n    return (\n        <Container maxWidth='md' className={classes.root}>\n            <SyntaxHighlighter language=\"matlab\" \n                style={vs}\n                showLineNumbers={true}\n                codeTagProps={{ style: { fontFamiily: \"times new roman\" } }}\n            >\n                {codeString.codeString}\n            </SyntaxHighlighter>\n        </Container>\n\n    )\n\n}\n\nexport default ReviewPage;","import React, { useState, useEffect, useReducer, useContext } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { Link } from \"react-router-dom\"\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport BasicInfo from \"./BasicInfo\";\nimport LinearTemplate from \"./LinearTemplate\";\nimport Steppers from \"./Stepper\";\nimport LinearPipesForm from \"./LinearPipesForm\";\nimport BranchPipesForm from \"./BranchPipesForm\";\nimport BranchTemplate from \"./BranchTemplate\"\nimport ReviewPage from \"./ReviewPage\"\nimport { ContextBranch, ContextLinear, ContextBasic } from '../Reducers/ContextProvider'\nimport {initialLinearInputState, initialBranchInputState, defaultBasicInfoInput} from '../Reducers/Reducer'\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        width:'25ch'\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n\n    button: {\n        margin: theme.spacing(2),\n    },\n    nav: {\n        color: 'inherit',\n        textDecoration: \"underline\",\n        fontStyle: \"italic\"\n    }\n}));\n\n\nexport default function Main() {\n    const classes = useStyles();\n\n    const [inputLinearStates, dispatchL] = useContext(ContextLinear);\n    const [inputBranchStates, dispatchB] = useContext(ContextBranch);\n    const [basicInfoInput, dispatch] = useContext(ContextBasic);\n\n    const [activeStep, setActiveStep] = useState(0);\n    const [downloadLink, setDownloadLink] = useState('');\n    const [stepNum, setStepNum] = useState(1);\n    const [isReadyDownload, setIsReadyDownload] = useState(false);\n    const [codeString, setCodeString] = useState('');\n    const [basicInfoInputCheck, setBasicInfoInputCheck] = useReducer(\n        (state, newState) => ({ ...state, ...newState }),\n        {\n            checkHydraTimeRange: false,\n            checkHydraCleanSeed: false,\n            pipelineName: false,\n            inputdatapath: false,\n            projectRoot: false,\n            sbj_filt: false,\n            eegType: false,\n            eegChanloc: false,\n            eegReference: false,\n            eegVeogChannelNames: false,\n            eegHeogChannelNames: false\n        }\n    );\n\n    const [inputStates, setInputStates] = useState(() => {\n        if (basicInfoInput.checkedLinear) {\n            return inputLinearStates;\n        } else {\n            return inputBranchStates;\n        }\n    });\n\n\n    useEffect(() => {\n        if (basicInfoInput.checkedLinear) {\n            setInputStates(inputLinearStates);\n        } else {\n            setInputStates(inputBranchStates);\n        }\n    }, [inputLinearStates, inputBranchStates])\n\n    useEffect(() => {\n        setStepNum(1);\n        if (basicInfoInput.checkedLinear) {\n            let initialLinear = [{ id: uuidv4(), stepID: '', stepIDCheck: false, funcsSettings: [{ fid: uuidv4(), funcName: '', funcP: '', funcNameCheck: false }] }];\n            dispatchL({ type: 'UPDATE', data: initialLinear });\n            setInputStates(initialLinear);\n        } else {\n            let initialBranch = [{ id: uuidv4(), pipeSegment_srcid: '', pipeSegmentID: '', stepID: '', pipeSegment_srcidCheck: false, pipeSegmentIDCheck: false, stepIDCheck: false, linearSettings: [{ id: uuidv4(), stepID: '', stepIDCheck: false, funcsSettings: [{ fid: uuidv4(), funcName: '', funcP: '', funcNameCheck: false }] }] }];\n            dispatchB({ type: 'UPDATE', data: initialBranch });\n            setInputStates(initialBranch);\n        }\n    }, [basicInfoInput.checkedLinear])\n\n    useEffect(() => {\n        setDownloadLink('');\n        setIsReadyDownload(false);\n    }, [basicInfoInput.checkedLinear])\n\n    // use localstorage save last edit  \n    useEffect(() => {\n        if (localStorage.getItem(\"basicInfoInput\")) {\n            dispatch({ type: 'UPDATE', data: JSON.parse(localStorage.getItem(\"basicInfoInput\")) });\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem(\"basicInfoInput\", JSON.stringify(basicInfoInput))\n    }, [basicInfoInput])\n\n    // make text file\n    const makeTextFile = (basicInfoInput, inputStates) => {\n        let list;\n        if (basicInfoInput.checkedLinear) {\n            list = LinearTemplate(basicInfoInput, inputStates);\n        } else {\n            list = BranchTemplate(basicInfoInput, inputStates);\n        };\n\n        const data = new Blob([list.join('\\n')], { type: 'text/plain' });\n        setCodeString(list.join('\\n'));\n        if (downloadLink !== '') window.URL.revokeObjectURL(downloadLink);\n        return window.URL.createObjectURL(data);\n\n    };\n\n    //input check\n    const inputCheck = () => {\n        let result = true;\n        let newS = {};\n        if (activeStep === 0) {\n            const values = { ...basicInfoInputCheck }\n            for (const [key, value] of Object.entries(values)) {\n                if (basicInfoInput[key] === null || basicInfoInput[key].length === 0) {\n                    if (basicInfoInput.checkedHYDRA) {\n                        if (key === 'checkHydraTimeRange' && basicInfoInput.HydraOptionB) {\n                            newS = { ...newS, [key]: false };\n                        } else if (key === 'checkHydraCleanSeed' && basicInfoInput.HydraOptionA) {\n                            newS = { ...newS, [key]: false };\n                        } else {\n                            newS = { ...newS, [key]: true };\n                        }\n                    } else {\n                        if (key === 'checkHydraTimeRange' || key === 'checkHydraCleanSeed') {\n                            newS = { ...newS, [key]: false };\n                        } else {\n                            newS = { ...newS, [key]: true };\n                        }\n                    }\n                }\n            }\n            result = Object.values(newS).every((value) => value === false);\n            setBasicInfoInputCheck({ ...basicInfoInputCheck, ...newS });\n        } else if (activeStep === 1) {\n            const newInputFields = inputStates.map((i, index) => {\n                i.stepID.length ? i.stepIDCheck = false : (() => { i.stepIDCheck = true; result = false })();\n                if (basicInfoInput.checkedBranch) {\n                    if (index === 0) {\n                        i.pipeSegment_srcidCheck = false;\n                        result = true;\n                        i.pipeSegmentID.length ? i.pipeSegmentIDCheck = false : (() => { i.pipeSegmentIDCheck = true; result = false })();\n                    } else {\n                        i.pipeSegment_srcid.length ? i.pipeSegment_srcidCheck = false : (() => { i.pipeSegment_srcidCheck = true; result = false })();\n                        i.pipeSegmentID.length ? i.pipeSegmentIDCheck = false : (() => { i.pipeSegmentIDCheck = true; result = false })();\n                    }\n                    i.linearSettings.forEach(l => {\n                        l.stepID.length ? l.stepIDCheck = false : (() => { l.stepIDCheck = true; result = false })();\n                        l.funcsSettings.forEach(f => {\n                            let funcEmpty = f.funcName == null || f.funcName.length;\n                            funcEmpty ? f.funcNameCheck = false : (() => { f.funcNameCheck = true; result = false })();\n                        });\n                    });\n                } else {\n                    i.funcsSettings.forEach(f => {\n                        f.funcName.length ? f.funcNameCheck = false : (() => { f.funcNameCheck = true; result = false })();\n                    })\n                }\n\n                return i;\n            })\n            dispatchL({ type: 'UPDATE', data: newInputFields })\n        }\n\n        return result;\n    }\n\n    //steppers handler\n    const handleNext = () => {\n        //first run input check\n        let p = inputCheck();\n        if (p) {\n            let prevActiveStep = activeStep;\n            setActiveStep(prevActiveStep + 1);\n            if (prevActiveStep === 1) {\n                handleSubmit();\n            }\n        } else {\n            alert(\"check your input\");\n        }\n\n    };\n    const handleBack = () => {\n        let prevActiveStep = activeStep;\n        if(prevActiveStep === 3){\n            setActiveStep((prevActiveStep) => prevActiveStep - 2);\n        }else{\n            setActiveStep((prevActiveStep) => prevActiveStep - 1);\n        }\n        \n    };\n    const handleReset = () => {\n        setActiveStep(0);\n        dispatch({ type: 'UPDATE', data: defaultBasicInfoInput });\n        dispatchB({ type: 'UPDATE', data: initialBranchInputState });\n        dispatchL({ type: 'UPDATE', data: initialLinearInputState });\n    };\n\n    // \n    async function handleSubmit() {\n        let downloadlink = await makeTextFile(basicInfoInput, inputStates);\n        setDownloadLink(downloadlink);\n        setIsReadyDownload(true);\n    };\n\n    const handleChangeStepSets = (e) => {\n        const { value } = e.target;\n        if (stepNum < value) {\n            let form = [...inputStates];\n            if (basicInfoInput.checkedLinear) {\n                for (let i = stepNum; i < value; i++) {\n                    form.push({ id: uuidv4(), stepID: '', stepIDCheck: false, funcsSettings: [{ fid: uuidv4(), funcName: '', funcP: '', funcNameCheck: false }] });\n                };\n                dispatchL({ type: 'UPDATE', data: form });\n                setInputStates(form);\n            } else {\n                for (let i = stepNum; i < value; i++) {\n                    form.push({ id: uuidv4(), pipeSegment_srcid: '', pipeSegmentID: '', stepID: '', pipeSegment_srcidCheck: false, pipeSegmentIDCheck: false, stepIDCheck: false, linearSettings: [{ id: uuidv4(), stepID: '', stepIDCheck: false, funcsSettings: [{ fid: uuidv4(), funcName: '', funcP: '', funcNameCheck: false }] }] });\n                }\n                dispatchB({ type: 'UPDATE', data: form });\n                setInputStates(form);\n            }\n            setStepNum(value);\n        } else if (stepNum > value && value >= 1) {\n            console.log(inputStates)\n            let form = [...inputStates];\n            for (let i = 0; i < stepNum - value; i++) {\n                form.pop();\n            }\n            if (basicInfoInput.checkedLinear) {\n                dispatchL({ type: 'UPDATE', data: form });\n                setInputStates(form);\n            } else {\n                dispatchB({ type: 'UPDATE', data: form });\n                setInputStates(form);\n            }\n            setStepNum(value);\n\n        }\n    }\n\n\n    return (\n        <div>\n            <div style={{ float: 'center', margin: 30 }} >\n                <Link className={classes.nav} to=\"/\">Intro Page ᐊ</Link>\n                <a>  /  </a>\n                <Link className={classes.nav} to=\"/start\"> Info Form ᐊ</Link>\n            </div>\n            <div>\n                {activeStep === 0 ? (\n                    <BasicInfo\n                        basicInfoInputCheck={basicInfoInputCheck}\n                        setBasicInfoInputCheck={setBasicInfoInputCheck}\n                    />\n                ) : activeStep === 1 ? (\n                    <Container>\n                        {basicInfoInput.checkedLinear ?\n                            <h3>Linear Pipeline Setting</h3>\n                            :\n                            <h3>Branch Pipeline Setting</h3>}\n\n                        <FormControl variant=\"outlined\" className={classes.formControl}>\n                            <InputLabel > {basicInfoInput.checkedBranch ? 'pipeSegments' : 'stepSet number'}</InputLabel>\n                            <Select\n                                native\n                                value={stepNum}\n                                onChange={e => handleChangeStepSets(e)}\n                                label=\"stepSet number\"\n                                inputProps={{\n                                    name: 'stepNum',\n                                }}\n                            >\n                                {\n                                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(i => {\n                                        return <option key={i} value={i}>{i}</option>\n                                    })\n                                }\n                            </Select>\n                        </FormControl>\n                        {basicInfoInput.checkedLinear ?\n                            <LinearPipesForm\n                                ifLinear={true}\n                                index={0}\n                                mid={0} />\n                            :\n                            <BranchPipesForm />}\n\n                    </Container>\n                ) : activeStep === 2 ? (\n\n                    <div>\n                        <h4>Code Preview</h4>                       \n                        {isReadyDownload ? <ReviewPage codeString={codeString} /> : null}\n                    </div>\n\n\n\n                ) : <div>\n                        <h4>Code Preview</h4>\n                        {isReadyDownload ? <ReviewPage codeString={codeString} /> : null}\n                    </div>\n\n                }\n\n            </div>\n            <Steppers\n                activeStep={activeStep}\n                handleSubmit={handleSubmit}\n                handleBack={handleBack}\n                handleNext={handleNext}\n                handleReset={handleReset}\n                isReadyDownload={isReadyDownload}\n                downloadLink={downloadLink}\n            />\n\n        </div>\n    );\n\n\n\n\n}","import React, { useState, useEffect } from \"react\";\nimport {Link} from \"react-router-dom\"\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Check from \"@material-ui/icons/Check\";\nimport clsx from \"clsx\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        marginTop: 50\n    },\n    button: {\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    actionsContainer: {\n        marginBottom: theme.spacing(2),\n    },\n    resetContainer: {\n        padding: theme.spacing(3),\n    },\n    nav:{ \n        color: 'inherit', \n        textDecoration: \"underline\",\n        fontStyle:\"italic\"\n    }\n}));\n\nexport const useQontoStepIconStyles = makeStyles({\n    root: {\n        color: \"#eaeaf0\",\n        display: \"flex\",\n        height: 30,\n        alignItems: \"center\"\n    },\n    active: {\n        color: \"#784af4\"\n    },\n    circle: {\n        width: 24,\n        height: 24,\n        borderRadius: \"50%\",\n        backgroundColor: \"currentColor\"\n    },\n    completed: {\n        color: \"#784af4\",\n        zIndex: 1,\n        fontSize: 24\n    }\n});\n\nfunction QontoStepIcon(props) {\n    const classes = useQontoStepIconStyles();\n    const { active, completed } = props;\n\n    return (\n        <div\n            className={clsx(classes.root, {\n                [classes.active]: active\n            })}\n        >\n            {completed ? (\n                <Check className={classes.completed} />\n            ) : (\n                    <div className={classes.circle} />\n                )}\n        </div>\n    );\n}\n\nfunction getSteps() {\n    return ['Get CTAP Ready', 'Get EEGLAB Ready', 'Create Execution Folder'];\n}\n\nfunction getStepContent(step) {\n    switch (step) {\n        case 0:\n            return (\n                <div style={{ marginLeft: '2rem', marginTop: '1rem' }}>\n                    <Typography variant=\"body1\" align=\"left\">Follow the instruction of <a rel=\"noreferrer\" target=\"_blank\" href=\"https://github.com/bwrc/ctap\">the CTAP repo</a>, download CTAP and setup your MATLAB work environment</Typography>\n                </div>\n            );\n        case 1:\n            return (\n                <div style={{ marginLeft: '2rem', marginTop: '1rem' }}>\n                    <Typography variant=\"body1\" align=\"left\">You need to have latest EEGLAB added to your Matlab path (<a rel=\"noreferrer\" target=\"_blank\" href='https://sccn.ucsd.edu/eeglab/downloadtoolbox.php'>instructions here</a>).</Typography>\n                </div>\n            );\n        case 2:\n            return (\n                <div style={{ marginLeft: '2rem', marginTop: '1rem' }}>\n                    <Typography variant=\"body1\" align=\"left\">To generate CTAP example script, you need create a new project folder under <i><b>~/ctap/templates</b></i>.</Typography>\n                    <Typography variant=\"body1\" align=\"left\">After that, copy/cut your test data to <i><b>~/ctap/data/test_data</b></i> (You can also define your own data path later)</Typography>\n                    <Typography variant=\"body1\" align=\"left\">If you have a corrsponding channel location file, please copy it to <i><b>~/ctap/res</b></i>, and add its name manually in the later process</Typography>\n                </div>\n            );\n        default:\n            return 'Unknown step';\n    }\n}\n\nconst IntroPage = () => {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n    const steps = getSteps();\n\n    const handleNext = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    const handleReset = () => {\n        setActiveStep(0);\n    };\n\n    return (\n        <Container maxWidth=\"sm\">\n            <div style={{ float:'center', margin: 30}} >\n                    <Link className={classes.nav} to=\"/\">Intro Page ᐊ</Link>\n                    <a>  /  </a>\n                    <Link className={classes.nav} to=\"/start\"> Info Form ᐊ</Link>\n            </div>\n            <div style={{ marginTop: 70 }}>\n                <Typography variant='h5'>The CTAP Code Generation Tool is used to show users how CTAP code works and some core ideas of CTAP programming.</Typography>\n            </div>\n            <div className={classes.root}>\n                <Stepper activeStep={activeStep} orientation=\"vertical\">\n                    {steps.map((label, index) => (\n                        <Step key={label}>\n                            <StepLabel StepIconComponent={QontoStepIcon}><Typography variant=\"h6\">{label}</Typography></StepLabel>\n                            <StepContent>\n                                {getStepContent(index)}\n                                <div className={classes.actionsContainer}>\n                                    <div style={{ marginTop: '1rem' }}>\n                                        <Button\n                                            disabled={activeStep === 0}\n                                            onClick={handleBack}\n                                            className={classes.button}\n                                        >\n                                            Back\n                                        </Button>\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            onClick={handleNext}\n                                            className={classes.button}\n                                        >\n                                            { 'Next'}\n                                        </Button>\n                                    </div>\n                                </div>\n                            </StepContent>\n                        </Step>\n                    ))}\n                </Stepper>\n                {activeStep === steps.length && (\n                    <Paper square elevation={0} className={classes.resetContainer}>\n                        <Typography variant='h6'>All steps completed - Now Let's step to</Typography>\n                        <Typography variant='h6'>CTAP CODE GNERATION!</Typography>\n                        <div style={{ marginTop: '1rem' }}>\n                            <Button onClick={handleReset} className={classes.button}>\n                                Reset\n                            </Button>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.button}\n                            ><Link to=\"/start\" style={{ textDecoration: 'none', color: 'inherit' }}>\n                                    Proceed\n                            </Link>\n                            </Button>\n                        </div>\n\n                    </Paper>\n                )}\n            </div>\n        </Container>\n\n    )\n}\n\nexport default IntroPage;","import React from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\n\nimport './App.css';\nimport Main from './Components/Main.js';\nimport IntroPage from './Components/IntroPage';\nimport ContextProvider from './Reducers/ContextProvider'\nimport Typography from \"@material-ui/core/Typography\";\n\n\nfunction App() {\n\n  return (\n\n    <ContextProvider>\n      <HashRouter basename='/'>\n        <Typography variant='h2' align=\"center\" style={{marginTop: '2rem'}}>CTAP Code Generation Tool</Typography>\n        <div className=\"App\">\n          <Route exact path=\"/\" component={IntroPage} />\n          <Route path='/start' component={Main} />\n        </div>\n      </HashRouter>\n    </ContextProvider>\n\n\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter >\n      <App />\n  </BrowserRouter>, \n  document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}