{"version":3,"sources":["data/CTAP_chanlocs.js","Styles/CTAP_Linear.png","Styles/CTAP_Branch.png","Components/BasicInfo.js","Components/LinearTemplate.js","Components/Stepper.js","Reducer.js","Components/ContextProvider.js","data/CTAP_funcs.js","Components/FuncsSettingForm.js","Components/LinearPipesForm.js","Components/BranchPipesForm.js","Components/BranchTemplate.js","Components/Main.js","Components/IntroPage.js","App.js","reportWebVitals.js","index.js"],"names":["CTAP_chanlocs","useStyles","makeStyles","theme","root","margin","spacing","width","words","textAlign","customWidth","maxWidth","helperText","BasicInfo","inputValue","setBasicInfoInput","basicInfoInputCheck","setBasicInfoInputCheck","classes","useState","eegChanloc","value","setValue","useEffect","handleInput","event","target","name","handleChange","checked","handleHydraChange","e","console","log","p","HydraOptionA","HydraOptionB","className","noValidate","autoComplete","Container","style","marginTop","Accordion","AccordionSummary","expandIcon","aria-label","aria-controls","id","FormControlLabel","onClick","stopPropagation","onFocus","control","Checkbox","checkedLinear","onChange","label","AccordionDetails","src","CTAP_Linear_diagram","checkedBranch","CTAP_Branch_diagram","checkedHYDRA","Tooltip","title","Typography","variant","tooltip","TextField","error","checkHydraTimeRange","type","checkHydraCleanSeed","pipelineName","projectRoot","sbj_filt","eegType","Autocomplete","newValue","options","renderInput","params","eegReference","eegVeogChannelNames","eegHeogChannelNames","LinearTemplate","basicInfo","inputFields","ctap_args","Array","stepSetsArray","HYDRA_presetting","push","forEach","inputField","index","funcs","funcsSettings","funcsSetting","funcName","funcN","slice","length","funcP","stepID","join","QontoConnector","withStyles","alternativeLabel","top","left","right","active","borderColor","completed","line","borderTopWidth","borderRadius","StepConnector","useQontoStepIconStyles","color","display","height","alignItems","circle","backgroundColor","zIndex","fontSize","QontoStepIcon","props","clsx","button","marginRight","marginBottom","instructions","Steppers","activeStep","handleReset","handleBack","handleNext","steps","Stepper","connector","map","Step","StepLabel","StepIconComponent","Button","disabled","initialLinearInputState","uuidv4","stepIDCheck","fid","funcNameCheck","initialBranchInputState","pipeSegment_srcid","pipeSegmentID","pipeSegment_srcidCheck","pipeSegmentIDCheck","linearSetting","Reducer","state","action","data","ContextBranch","createContext","ContextLinear","ContextProvider","children","useReducer","inputLinearState","dispatchL","inputBranchState","dispatchB","Provider","CTAP_funcs","FuncsSettingForm","ifLinear","indexm","mid","useContext","inputBranchStates","inputLinearStates","React","inputStates","setInputStates","handleInputChange","newV","values","index_","findIndex","x","newInputStates","i","newState","indexff","IconButton","indexf","splice","handleRemoveFuncFields","functionP","handleAddFuncFields","LinearPipesForm","newInputFields","handleLinearPipesInput","formControl","minWidth","BranchPipesForm","dispatch","stepNum","setStepNum","FormControl","InputLabel","Select","native","form","pop","handleChangeStepSets","inputProps","BranchTemplate","pipeArr","branchSrcInfo","subfuncs","srcid","subpipe","subfID","concat","subf_srcid","subfunc","selectEmpty","Main","setActiveStep","downloadLink","setDownloadLink","isReadyDownload","setIsReadyDownload","basicInfoInput","localStorage","getItem","JSON","parse","setItem","stringify","makeTextFile","list","Blob","window","URL","revokeObjectURL","createObjectURL","a","downloadlink","download","href","downloadButton","prevActiveStep","result","newS","Object","entries","key","every","l","f","inputCheck","alert","actionsContainer","resetContainer","padding","getStepContent","step","marginLeft","align","rel","IntroPage","orientation","StepContent","Paper","square","elevation","to","textDecoration","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.abb98ecf.chunk.js","sourcesContent":["export const CTAP_chanlocs = [\n    '',\n    'chanlocs128_biosemi.elp',\n    'chanlocs128_biosemi_withEOG.elp',\n    'chanlocs128_cent.elp',\n    'chanlocs128_pist.elp',\n    'chanlocs160_biosemi.elp',\n    'chanlocs16_biosemi.elp',\n    'chanlocs16_biosemi_withEOG.elp',\n    'chanlocs256_biosemi.elp',\n    'chanlocs256_biosemi_withEOG.elp',\n    'chanlocs32_biosemi.elp',\n    'chanlocs64_biosemi.elp',\n    'chanlocs64_biosemi_withEOG.elp',\n    'channel_locations_acticap_32.ced'\n]\n","export default __webpack_public_path__ + \"static/media/CTAP_Linear.cab9b4e3.png\";","export default __webpack_public_path__ + \"static/media/CTAP_Branch.4d4e53a9.png\";","import React, { useState, useEffect } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Container from '@material-ui/core/Container';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from \"@material-ui/core/Typography\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport MoreOutlinedIcon from '@material-ui/icons/MoreOutlined';\n\nimport { CTAP_chanlocs } from '../data/CTAP_chanlocs'\nimport CTAP_Linear_diagram from '../Styles/CTAP_Linear.png'\nimport CTAP_Branch_diagram from '../Styles/CTAP_Branch.png'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '35ch',\n        },\n    },\n    words: {\n        textAlign: \"center\",\n    },\n    customWidth: {\n        maxWidth: 500,\n    },\n}));\n\nconst helperText = {\n    checkHydraTimeRange: \"Set clean segment time range [start end] in seconds from test data\",\n    checkHydraCleanSeed: \"Name of the clean seed data file extract from test data\",\n    pipelineName: \"Name a folder which contains outputs of pipes\",\n    projectRoot: \"The root directory of the current analysis.\",\n    sbj_filt: \"The unique sequence number in EEG dataset name(sbj_filt)\",\n    eegType: \"EEG Data Type, eg, *.set/*.bdf\",\n    eegChanloc: \"Channel Location of testing EEG data \",\n    eegReference: \"Reference channel of testing EEG data,  eg, {'L_MASTOID' 'R_MASTOID'}\",\n    eegVeogChannelNames: \"VEOG Channel Names of testing EEG data, required if performing blinks detection, eg, {'VEOG1','VEOG2'}\",\n    eegHeogChannelNames: \"HEOG Channel Names of testing EEG data, required if performing blinks detection, eg, {'HEOG1','HEOG2'}\"\n};\n\nconst BasicInfo = ({ inputValue, setBasicInfoInput, basicInfoInputCheck, setBasicInfoInputCheck }) => {\n    let classes = useStyles();\n    const [value, setValue] = useState(inputValue.eegChanloc);\n\n    useEffect(() => {\n        setBasicInfoInput({ ...inputValue, eegChanloc: value });\n        setBasicInfoInputCheck({ ...basicInfoInputCheck, eegChanloc: false });\n    }, [value]);\n\n    //handle input change\n    const handleInput = event => {\n        const { name, value } = event.target;\n        setBasicInfoInput({ ...inputValue, [name]: value });\n        setBasicInfoInputCheck({ ...basicInfoInputCheck, [name]: false });\n    };\n\n    const handleChange = (event) => {\n        if (event.target.name === 'checkedLinear') {\n            setBasicInfoInput({ ...inputValue, 'checkedLinear': event.target.checked, 'checkedBranch': !event.target.checked });\n        } else if (event.target.name === 'checkedBranch') {\n            setBasicInfoInput({ ...inputValue, 'checkedBranch': event.target.checked, 'checkedLinear': !event.target.checked });\n        } else {\n            setBasicInfoInput({ ...inputValue, [event.target.name]: event.target.checked });\n        }\n    };\n\n    const handleHydraChange = (e) => {\n        console.log(e.target.name)\n        if (e.target.name === 'checkTimeRange') {\n            let p = {};\n            p = { ...p, HydraOptionA: e.target.checked, HydraOptionB: !e.target.checked };\n            if (e.target.checked) {\n                console.log(e.target.checked);\n                p = { ...p, 'checkHydraCleanSeed': '' };\n                setBasicInfoInputCheck({ ...basicInfoInputCheck, 'checkHydraCleanSeed': false })\n            }\n            setBasicInfoInput({ ...inputValue, ...p });\n        } else {\n            let p = {};\n            p = { ...p, HydraOptionB: e.target.checked, HydraOptionA: !e.target.checked };\n            //setBasicInfoInput({ ...inputValue, HydraOptionB: e.target.checked, HydraOptionA:!e.target.checked });\n            if (e.target.checked) {\n                console.log(inputValue)\n                p = { ...p, 'checkHydraTimeRange': '' }\n                setBasicInfoInputCheck({ ...basicInfoInputCheck, 'checkHydraTimeRange': false })\n            }\n            setBasicInfoInput({ ...inputValue, ...p });\n\n        }\n    }\n\n    // console.log(basicInfoInputCheck)\n    // console.log(inputValue)\n    return (\n        <form className={classes.root} noValidate autoComplete=\"off\">\n            <Container maxWidth=\"md\" style={{ marginTop: '3rem' }}>\n                <h4 >What type of pipeline* you would like to generate?</h4>\n                <Accordion style={{ width: 750, margin: '0 auto' }}>\n                    <AccordionSummary\n                        expandIcon={<MoreOutlinedIcon />}\n                        aria-label=\"Expand\"\n                        aria-controls=\"additional-actions1-content\"\n                        id=\"additional-actions1-header\"\n                    >\n                        <FormControlLabel\n                            aria-label=\"Acknowledge\"\n                            onClick={(event) => event.stopPropagation()}\n                            onFocus={(event) => event.stopPropagation()}\n                            control={<Checkbox checked={inputValue.checkedLinear} onChange={handleChange} name=\"checkedLinear\" />}\n                            label=\"Linear Pipeline\"\n                        />\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <img src={CTAP_Linear_diagram} width=\"700\" />\n                    </AccordionDetails>\n                </Accordion>\n                <Accordion style={{ width: 750, margin: '0 auto' }}>\n                    <AccordionSummary\n                        expandIcon={<MoreOutlinedIcon />}\n                        aria-label=\"Expand\"\n                        aria-controls=\"additional-actions1-content\"\n                        id=\"additional-actions1-header\"\n                    >\n                        <FormControlLabel\n                            aria-label=\"Acknowledge\"\n                            onClick={(event) => event.stopPropagation()}\n                            onFocus={(event) => event.stopPropagation()}\n                            control={<Checkbox checked={inputValue.checkedBranch} onChange={handleChange} name=\"checkedBranch\" />}\n                            label=\"Branch Pipeline\"\n                        />\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <img src={CTAP_Branch_diagram} width=\"700\" />\n                    </AccordionDetails>\n                </Accordion>\n                <h5 className={classes.words}>* Click Linear and Brach tabs to see diagrams describe these two different pipelines. </h5>\n\n                <h5 className={classes.words}>* linear pipeline using different setpSets to group CTAP functions, the processing sequence depends on setpSets order. Branch pipeline generates sub-functions including predefined executable CTAP functions, which provides a more clear and flexible modular way to group functions. </h5>\n                <div>\n                    <FormControlLabel\n                        control={<Checkbox checked={inputValue.checkedHYDRA} onChange={handleChange} name=\"checkedHYDRA\" />}\n                        label=\"Implementing HYDRA for artifacts parameter optimization or not?\"\n                    />\n                    {inputValue.checkedHYDRA ? <div>\n                        <div>\n                            <FormControlLabel\n                                control={<Checkbox checked={inputValue.HydraOptionA} onChange={handleHydraChange} name=\"checkTimeRange\" />}\n                                label=\"Provide clean data time-range\"\n                            />\n                            <FormControlLabel\n                                control={<Checkbox checked={inputValue.HydraOptionB} onChange={handleHydraChange} name=\"checkCleanSeed\" />}\n                                label=\"Provide clean seed data\"\n                            />\n                            {inputValue.HydraOptionA ?\n                                <div>\n                                    <Tooltip title={<Typography variant='body2'>{helperText.checkHydraTimeRange}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                                        <TextField\n                                            error={basicInfoInputCheck.checkHydraTimeRange}\n                                            id=\"checkHydraTimeRange\"\n                                            name=\"checkHydraTimeRange\"\n                                            label=\"Time Range\"\n                                            value={inputValue.checkHydraTimeRange}\n                                            onChange={e => handleInput(e)}\n                                            type=\"text\"\n                                            helperText={basicInfoInputCheck.checkHydraTimeRange ? 'The field cannot be empty. Please enter a value' : null}\n                                            variant=\"outlined\"\n                                        />\n                                    </Tooltip>\n\n                                </div> : null}\n\n                            {inputValue.HydraOptionB ?\n                                <div>\n                                    <Tooltip title={<Typography variant='body2'>{helperText.checkHydraCleanSeed}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                                        <TextField\n                                            error={basicInfoInputCheck.checkHydraCleanSeed}\n                                            id=\"checkHydraCleanSeed\"\n                                            name=\"checkHydraCleanSeed\"\n                                            label=\"Seed Data Name\"\n                                            value={inputValue.checkHydraCleanSeed}\n                                            onChange={e => handleInput(e)}\n                                            type=\"text\"\n                                            helperText={basicInfoInputCheck.checkHydraCleanSeed ? 'The field cannot be empty. Please enter a value' : null}\n                                            variant=\"outlined\"\n                                        />\n                                    </Tooltip>\n\n\n                                </div> : null}\n\n                        </div>\n\n                    </div> : null}\n                    <hr></hr>\n\n                </div>\n\n            </Container>\n            <div style={{ marginTop: '0.8rem' }}>\n                <h4>Basic setting begin</h4>\n                <Tooltip title={<Typography variant='body2'>{helperText.pipelineName}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                    <TextField\n                        error={basicInfoInputCheck.pipelineName}\n                        id=\"pipelineName\"\n                        name=\"pipelineName\"\n                        label=\"Pipeline Name\"\n                        value={inputValue.pipelineName}\n                        onChange={e => handleInput(e)}\n                        type=\"text\"\n                        helperText={basicInfoInputCheck.pipelineName ? 'The field cannot be empty. Please enter a value' : null}\n                        variant=\"outlined\"\n                    />\n                </Tooltip>\n\n            </div>\n            <div style={{ marginTop: '0.8rem' }}>\n                <Tooltip title={<Typography variant='body2'>{helperText.projectRoot}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                    <TextField\n                        error={basicInfoInputCheck.projectRoot}\n                        id=\"projectRoot\"\n                        name=\"projectRoot\"\n                        label=\"Project Root\"\n                        value={inputValue.projectRoot}\n                        onChange={e => handleInput(e)}\n                        type=\"text\"\n                        helperText={basicInfoInputCheck.projectRoot ? 'The field cannot be empty. Please enter a value' : null}\n                        variant=\"outlined\"\n                    />\n                </Tooltip>\n\n            </div>\n            <div style={{ marginTop: '0.8rem' }}>\n                <Tooltip title={<Typography variant='body2'>{helperText.sbj_filt}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                    <TextField\n                        error={basicInfoInputCheck.sbj_filt}\n                        id=\"sbj_filt\"\n                        name=\"sbj_filt\"\n                        label=\"EEG File Name Sequence\"\n                        value={inputValue.sbj_filt}\n                        onChange={e => handleInput(e)}\n                        type=\"text\"\n                        helperText={basicInfoInputCheck.sbj_filt ? 'The field cannot be empty. Please enter a value' : null}\n                        variant=\"outlined\"\n                    />\n                </Tooltip>\n\n            </div>\n            <div style={{ marginTop: '0.8rem' }}>\n                <Tooltip title={<Typography variant='body2'>{helperText.eegType}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                    <TextField\n                        error={basicInfoInputCheck.eegType}\n                        id=\"eegType\"\n                        name=\"eegType\"\n                        label=\"EEG Data Type\"\n                        value={inputValue.eegType}\n                        onChange={e => handleInput(e)}\n                        type=\"text\"\n                        helperText={basicInfoInputCheck.eegType ? 'The field cannot be empty. Please enter a value' : null}\n                        variant=\"outlined\"\n                    />\n                </Tooltip>\n\n            </div>\n            <div style={{ marginTop: '0.8rem' }}>\n                <Tooltip title={<Typography variant='body2'>{helperText.eegChanloc}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                    <Autocomplete\n                        value={inputValue.eegChanloc}\n                        onChange={(event, newValue) => {\n                            setValue(newValue);\n                        }}\n                        id=\"controllable-states-demo\"\n                        options={CTAP_chanlocs}\n                        renderInput={(params) => <TextField\n                            {...params}\n                            error={basicInfoInputCheck.eegChanloc}\n                            helperText={basicInfoInputCheck.eegChanloc ? 'The field cannot be empty. Please enter a value' : null}\n                            label=\"EEG Data Channel Location\"\n                            variant=\"outlined\" />}\n                    />\n                </Tooltip>\n            </div>\n            <div style={{ marginTop: '0.8rem' }}>\n                <Tooltip title={<Typography variant='body2'>{helperText.eegReference}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                    <TextField\n                        error={basicInfoInputCheck.eegReference}\n                        id=\"eegReference\"\n                        name=\"eegReference\"\n                        label=\"EEG Data Reference Channel\"\n                        value={inputValue.eegReference}\n                        onChange={e => handleInput(e)}\n                        type=\"text\"\n                        helperText={basicInfoInputCheck.eegReference ? 'The field cannot be empty. Please enter a value' : null}\n                        variant=\"outlined\"\n                    />\n                </Tooltip>\n            </div>\n            <div style={{ marginTop: '0.8rem' }}>\n                <Tooltip title={<Typography variant='body2'>{helperText.eegVeogChannelNames}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                    <TextField\n                        error={basicInfoInputCheck.eegVeogChannelNames}\n                        id=\"eegVeogChannelNames\"\n                        name=\"eegVeogChannelNames\"\n                        label=\"VEOG Channel Names\"\n                        value={inputValue.eegVeogChannelNames}\n                        onChange={e => handleInput(e)}\n                        type=\"text\"\n                        helperText={basicInfoInputCheck.eegVeogChannelNames ? 'The field cannot be empty. Please enter a value' : null}\n                        variant=\"outlined\"\n                    />\n                </Tooltip>\n            </div>\n            <div style={{ marginTop: '0.8rem' }}>\n                <Tooltip title={<Typography variant='body2'>{helperText.eegHeogChannelNames}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                    <TextField\n                        error={basicInfoInputCheck.eegHeogChannelNames}\n                        id=\"eegHeogChannelNames\"\n                        name=\"eegHeogChannelNames\"\n                        label=\"HEOG Channel Names\"\n                        value={inputValue.eegHeogChannelNames}\n                        onChange={e => handleInput(e)}\n                        type=\"text\"\n                        helperText={basicInfoInputCheck.eegHeogChannelNames ? 'The field cannot be empty. Please enter a value' : null}\n                        variant=\"outlined\"\n                    />\n                </Tooltip>\n            </div>\n        </form>\n    )\n};\n\nexport default BasicInfo;\n","\nconst LinearTemplate = (basicInfo, inputFields) => {\n\n    let ctap_args = new Array([]);\n    let stepSetsArray = new Array([]);\n    let HYDRA_presetting = new Array([]);\n\n    if (basicInfo.checkedHYDRA) {\n        HYDRA_presetting.push(`HYDRA = true;`);\n        HYDRA_presetting.push(`PARAM = param_sweep_setup(project_dir);`);\n        HYDRA_presetting.push(`Cfg.HYDRA.ifapply = HYDRA;`);\n        HYDRA_presetting.push(`Cfg.HYDRA.chanloc = '${basicInfo.eegChanloc}';`);\n        HYDRA_presetting.push(`Cfg.HYDRA.PARAM = PARAM;`);\n        HYDRA_presetting.push(`Cfg.HYDRA.FULL_CLEAN_SEED = false;`);\n        if (basicInfo.checkHydraTimeRange && !basicInfo.checkHydraCleanSeed) {\n            HYDRA_presetting.push(`Cfg.HYDRA.provide_seed_timerange = true;`)\n            HYDRA_presetting.push(`Cfg.HYDRA.cleanseed_timerange = ${basicInfo.checkHydraTimeRange};`);\n        } else if (basicInfo.checkHydraCleanSeed && !basicInfo.checkHydraTimeRange) {\n            HYDRA_presetting.push(`Cfg.HYDRA.provide_seed_timerange = false;`)\n            HYDRA_presetting.push(`Cfg.HYDRA.seed_fname = ${basicInfo.checkHydraCleanSeed};`);\n        }\n    }\n\n    inputFields.forEach((inputField, index) => {\n        let funcs = ``;\n        inputField.funcsSettings.forEach(funcsSetting => {\n            funcs = funcs + `@${funcsSetting.funcName}, `;\n            let funcN = funcsSetting.funcName;\n            if(funcN){\n                funcN = funcN.slice(5,funcN.length)\n            }\n            ctap_args.push(`out.${funcN}=struct(${funcsSetting.funcP})`)\n        });\n        stepSetsArray.push(`stepSet(${index + 1}).id = [num2str(${index + 1}), '${inputField.stepID}'];`);\n        stepSetsArray.push(`stepSet(${index + 1}).funH{${funcs}};`);\n    })\n\n\n    return new Array(\n        `pipeline_name = '${basicInfo.pipelineName}';`,\n        \"FILE_ROOT = mfilename('fullpath');\",\n        `reporoot = FILE_ROOT(1:strfind(FILE_ROOT, fullfile('ctap', 'templates', '${basicInfo.projectRoot}', 'ctap_linear_template')) - 1);`,\n        `project_dir = FILE_ROOT(1:strfind(FILE_ROOT, fullfile('ctap_linear_template')) - 1);`,\n        `data_dir = append(reporoot,'ctap/data/test_data');`,\n        `Cfg.env.paths = cfg_create_paths(project_dir, pipeline_name, {''}, 1);`,\n        `Cfg.eeg.chanlocs = '${basicInfo.eegChanloc}';`,\n        `Cfg.eeg.reference = ${basicInfo.eegReference};`,\n        `Cfg.eeg.veogChannelNames = ${basicInfo.eegVeogChannelNames};`,\n        `Cfg.eeg.heogChannelNames = ${basicInfo.eegHeogChannelNames};`,\n        `Cfg.grfx.on = false;`,\n        `Cfg.MC = get_meas_cfg_MC(Cfg, data_dir, 'eeg_ext', '${basicInfo.eegType}', 'sbj_filt', ${basicInfo.sbj_filt});`,\n        `${HYDRA_presetting.join('\\n')}`,\n        `clear Pipe;`,\n        `${stepSetsArray.join('\\n')}`,\n        `${[ctap_args.join('\\n')]}`,\n        `Cfg.pipe.stepSets = stepSet;`,\n        `Cfg.pipe.runSets = {stepSet(1).id};`,\n        `Cfg = ctap_auto_config(Cfg, out);`,\n        `%% Run the pipe`,\n        `CTAP_pipeline_looper(Cfg, 'debug', DEBUG, 'overwrite', true);`,\n        `clear i stepSet Filt ctap_args`\n\n    )\n\n};\n\nexport default LinearTemplate;\n","import { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport StepConnector from \"@material-ui/core/StepConnector\";\nimport Button from '@material-ui/core/Button';\nimport clsx from \"clsx\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Check from \"@material-ui/icons/Check\";\nimport Typography from \"@material-ui/core/Typography\";\n\n\nexport const QontoConnector = withStyles({\n    alternativeLabel: {\n        top: 10,\n        left: \"calc(-50% + 16px)\",\n        right: \"calc(50% + 16px)\"\n    },\n    active: {\n        \"& $line\": {\n            borderColor: \"#784af4\"\n        }\n    },\n    completed: {\n        \"& $line\": {\n            borderColor: \"#784af4\"\n        }\n    },\n    line: {\n        borderColor: \"#eaeaf0\",\n        borderTopWidth: 3,\n        borderRadius: 1\n    }\n})(StepConnector);\n\nexport const useQontoStepIconStyles = makeStyles({\n    root: {\n        color: \"#eaeaf0\",\n        display: \"flex\",\n        height: 22,\n        alignItems: \"center\"\n    },\n    active: {\n        color: \"#784af4\"\n    },\n    circle: {\n        width: 8,\n        height: 8,\n        borderRadius: \"50%\",\n        backgroundColor: \"currentColor\"\n    },\n    completed: {\n        color: \"#784af4\",\n        zIndex: 1,\n        fontSize: 18\n    }\n});\n\nfunction QontoStepIcon(props) {\n    const classes = useQontoStepIconStyles();\n    const { active, completed } = props;\n\n    return (\n        <div\n            className={clsx(classes.root, {\n                [classes.active]: active\n            })}\n        >\n            {completed ? (\n                <Check className={classes.completed} />\n            ) : (\n                    <div className={classes.circle} />\n                )}\n        </div>\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: \"100%\"\n    },\n    button: {\n        marginRight: theme.spacing(1),\n        marginBottom: theme.spacing(2),\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1)\n    },\n   \n}));\n\nfunction getSteps() {\n    return [\"Basic settings\", \"Pipe config\", \"Review and download\"];\n}\n\nconst Steppers = ({activeStep, handleReset, handleBack, handleNext}) =>{\n    const classes = useStyles();\n    const steps = getSteps();\n\n    return (\n        <div className={classes.root}>\n            <Stepper\n                alternativeLabel\n                activeStep={activeStep}\n                connector={<QontoConnector />}\n            >\n                {steps.map((label) => (\n                    <Step key={label}>\n                        <StepLabel StepIconComponent={QontoStepIcon}>{label}</StepLabel>\n                    </Step>\n                ))}\n            </Stepper>\n\n            <div>\n                {activeStep === steps.length ? (\n                    <div>\n                        <Typography className={classes.instructions}>\n                            All steps completed - you&apos;re finished\n                        </Typography>\n                        <Button onClick={handleReset} className={classes.button}>\n                            Reset\n                        </Button>\n                    </div>\n                ) : (\n                        <div>\n                            <div>\n                                <Button\n                                    disabled={activeStep === 0}\n                                    onClick={handleBack}\n                                    className={classes.button}\n                                >\n                                    Back\n                                </Button>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={handleNext}\n                                    className={classes.button}\n                                >\n                                    {activeStep === steps.length - 1 ? \"Finish\" : \"Next\"}\n                                </Button>\n                            </div>\n                        </div>\n                    )}\n            </div>\n        </div>\n    );\n}\n\nexport default Steppers;","import { v4 as uuidv4 } from 'uuid';\n\nexport const initialLinearInputState = [{ id: uuidv4(), stepID: '', stepIDCheck:false, funcsSettings: [{ fid: uuidv4(), funcName: '', funcP: '', funcNameCheck:false}] }];\nexport const initialBranchInputState = [{ id: uuidv4(), pipeSegment_srcid: '', pipeSegmentID: '', stepID: '', pipeSegment_srcidCheck:false, pipeSegmentIDCheck:false, stepIDCheck:false, linearSetting:[{ id: uuidv4(), stepID: '', stepIDCheck:false, funcsSettings: [{ fid: uuidv4(), funcName: '', funcP: '', funcNameCheck:false}] }] }];\nexport const Reducer = (state, action) => {\n    switch (action.type) {\n        case 'UPDATE_STEPSETS': {\n            return action.data\n        }\n        default:\n            return state;\n\n\n    }\n\n};\n\n ","import React, { useReducer, createContext } from \"react\";\nimport { initialLinearInputState, initialBranchInputState, Reducer } from \"../Reducer.js\";\n\nconst ContextProvider = ({ children }) => {\n    const [inputLinearState, dispatchL] = useReducer(Reducer, initialLinearInputState);\n    const [inputBranchState, dispatchB] = useReducer(Reducer, initialBranchInputState);\n    return (\n\n        <ContextLinear.Provider value={[inputLinearState, dispatchL]}>\n            <ContextBranch.Provider value={[inputBranchState, dispatchB]}>\n                {children}\n            </ContextBranch.Provider>\n        </ContextLinear.Provider>\n\n    )\n}\nexport const ContextBranch = createContext(initialBranchInputState);\nexport const ContextLinear = createContext(initialLinearInputState);\n\nexport default ContextProvider","export const CTAP_funcs = [\n    '',\n    'CTAP_load_data',\n    'CTAP_load_chanlocs',\n    'CTAP_reref_data',\n    'CTAP_blink2event',\n    'CTAP_peek_data',\n    'CTAP_fir_filter',\n    'CTAP_run_ica',\n    'CTAP_detect_bad_comps',\n    'CTAP_reject_data',\n    'CTAP_detect_bad_channels',\n    'CTAP_interp_chan',\n    'CTAP_detect_bad_segments'\n]","import React, { useContext, useEffect, useState } from \"react\";\n\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from \"@material-ui/core/Typography\";\nimport { v4 as uuidv4 } from 'uuid';\n\n\nimport { ContextBranch, ContextLinear } from './ContextProvider'\nimport { CTAP_funcs } from '../data/CTAP_funcs'\n\nconst FuncsSettingForm = ({ ifLinear, index, indexm, funcsSettings, classes, mid }) => {\n\n    const [inputBranchStates, dispatchB] = useContext(ContextBranch);\n    const [inputLinearStates, dispatchL] = useContext(ContextLinear);\n    const [value, setValue] = React.useState(null);\n    const [inputStates, setInputStates] = useState(() => {\n        if (ifLinear) {\n            return inputLinearStates;\n        } else {\n            return inputBranchStates[index].linearSetting;\n        }\n    });\n\n    useEffect(() => {\n        if (ifLinear) {\n            setInputStates(inputLinearStates);\n        } else {\n            setInputStates(inputBranchStates[index].linearSetting);\n        }\n    }, [inputLinearStates, inputBranchStates])\n\n    const handleInputChange = (id, name, newV) => {\n        const values = [...inputStates];\n        let index_ = values.findIndex(x => x.id === mid);\n        const newInputStates = values[index_].funcsSettings.map(i => {\n            if (id === i.fid) {\n                i[name] = newV;\n                i[name + 'Check'] = false;\n            }\n            return i;\n        })\n        values[index_].funcsSettings = newInputStates;\n        if (ifLinear) {\n            dispatchL({ type: 'UPDATE_STEPSETS', data: values })\n        } else {\n            let newState = [...inputBranchStates];\n            newState[index].linearSetting = values;\n            dispatchB({ type: 'UPDATE_STEPSETS', data: newState })\n        }\n\n    }\n\n    const handleAddFuncFields = () => {\n        const values = [...inputStates];\n        let index_ = values.findIndex(x => x.id === mid);\n        values[index_].funcsSettings.push({ fid: uuidv4(), funcName: '', functionP: '' });\n        if (ifLinear) {\n            dispatchL({ type: 'UPDATE_STEPSETS', data: values })\n        } else {\n            let newState = [...inputBranchStates];\n            newState[index].linearSetting = values;\n            dispatchB({ type: 'UPDATE_STEPSETS', data: newState });\n        }\n\n    }\n\n    const handleRemoveFuncFields = (id) => {\n        const values = [...inputStates];\n        let index_ = values.findIndex(x => x.id === mid);\n        let indexf = values[index_].funcsSettings.findIndex(x => x.fid === id);\n        values[index_].funcsSettings.splice(indexf, 1);\n        if (ifLinear) {\n            dispatchL({ type: 'UPDATE_STEPSETS', data: values });\n        } else {\n            let newState = [...inputBranchStates];\n            newState[index].linearSetting = values;\n            dispatchB({ type: 'UPDATE_STEPSETS', data: newState });\n        }\n\n    }\n\n\n    return (\n        <div className={classes.root}>\n            {funcsSettings.map((funcsSetting, indexff) => (\n                <div key={funcsSetting.fid}>\n                    <Autocomplete\n                        id={'funcName' + indexff}\n                        value={inputStates[indexm].funcsSettings[indexff].funcName}\n                        onChange={(event, newValue) => {\n                            setValue(newValue);\n                            handleInputChange(funcsSetting.fid, 'funcName', newValue);\n                        }}\n                        id=\"controllable-states-demo\"\n                        options={CTAP_funcs}\n                        renderInput={(params) => <TextField {...params} error={funcsSetting.funcNameCheck} label=\"Function Name\" variant=\"outlined\" helperText={funcsSetting.funcNameCheck ? 'The field cannot be empty. Please select a function' : ''} />}\n                    />\n                    <Tooltip title={<Typography variant='body2'>{\"check docs for parameters supported for each func, input in 'pName', p, eg.('method', 'fastica', 'overwrite', true). All the string input need single-quote:'input' \"}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                        <TextField\n                            id={\"funcP\" + indexff}\n                            name=\"funcP\"\n                            label=\"Function Parameters\"\n                            variant=\"filled\"\n                            value={inputStates[indexm].funcsSettings[indexff].funcP}\n                            onChange={event => handleInputChange(funcsSetting.fid, event.target.name, event.target.value)}\n                        />\n                    </Tooltip>\n\n                    <IconButton disabled={funcsSettings.length === 1} onClick={() => handleRemoveFuncFields(funcsSetting.fid)}>\n                        <RemoveIcon />\n                    </IconButton>\n                    <IconButton onClick={() => handleAddFuncFields()}>\n                        <AddIcon />\n                    </IconButton>\n                </div>\n            ))}\n        </div>\n\n    );\n}\n\nexport default FuncsSettingForm;","import React, { useContext, useState } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from \"@material-ui/core/Typography\";\n\nimport FuncsSettingForm from \"./FuncsSettingForm\"\nimport { ContextBranch, ContextLinear } from './ContextProvider'\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '50ch'\n        },\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    customWidth: {\n        maxWidth: 500,\n    },\n\n}))\n\nconst LinearPipesForm = ({ ifLinear, index, mid }) => {\n    const classes = useStyles()\n    const [inputBranchStates, dispatchB] = useContext(ContextBranch);\n    const [inputLinearStates, dispatchL] = useContext(ContextLinear);\n    const [inputStates, setInputStates] = useState(() => {\n        if (ifLinear) {\n            return inputLinearStates;\n        } else {\n            return inputBranchStates[index].linearSetting;\n        }\n    });\n\n    const handleLinearPipesInput = (id, event) => {\n        const newInputFields = inputStates.map(i => {\n            if (id === i.id) {\n                i[event.target.name] = event.target.value\n                i[event.target.name + 'Check'] = false;\n            }\n            return i;\n        })\n        \n        if (ifLinear) {\n            dispatchL({ type: 'UPDATE_STEPSETS', data: newInputFields });\n        } else {\n            const newValue = inputBranchStates;\n            newValue[index].linearSetting = newInputFields;\n            dispatchB({ type: 'UPDATE_STEPSETS', data: newValue });\n        }\n        setInputStates(newInputFields);\n    }\n\n    return (\n        <Container maxWidth=\"sm\">\n            <div className={classes.root}>\n                {inputStates.map((inputField, indexf) => (\n                    <div key={inputField.id}>\n                        <h4>stepSet {indexf + 1}</h4>\n                        <Tooltip title={<Typography variant='body2'>{`describe main work in this stepSet, eg.'_load'`}</Typography>} classes={{ tooltip: classes.customWidth }}>\n                        <TextField\n                            error={inputField.stepIDCheck}\n                            name=\"stepID\"\n                            label=\"stepID\"\n                            variant=\"filled\"\n                            helperText={inputField.stepIDCheck ? 'The field cannot be empty. Please enter a value' : null}\n                            value={inputField.stepID}\n                            onChange={event => handleLinearPipesInput(inputField.id, event)}\n                        />\n\n                        </Tooltip>\n                        \n                        <FuncsSettingForm\n                            ifLinear={ifLinear}\n                            index={index}\n                            indexm={indexf}\n                            classes={classes}\n                            mid={inputField.id}\n                            funcsSettings={inputField.funcsSettings} />\n                    </div>\n                ))}\n            </div>\n        </Container>\n    );\n}\n\nexport default LinearPipesForm;","import React, { useContext, useState } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport LinearPipesForm from \"./LinearPipesForm\";\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { ContextBranch } from './ContextProvider'\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n        }\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 200,\n    }\n}))\n\nconst BranchPipesForm = () => {\n    const classes = useStyles()\n    const [inputStates, dispatch] = useContext(ContextBranch);\n    const [stepNum, setStepNum] = useState(1);\n\n    const handleLinearPipesInput = (id, event) => {\n        const newInputFields = inputStates.map(i => {\n            if (id === i.id) {\n                i[event.target.name] = event.target.value\n                i[event.target.name + 'Check'] = false;\n            }\n            return i;\n        })\n        dispatch({ type: 'UPDATE_STEPSETS', data: newInputFields })\n    }\n\n    const handleChangeStepSets = (e, index) => {\n        const { value } = e.target;\n        if (stepNum < value) {\n            let form = [...inputStates];\n            for (let i = stepNum; i < value; i++) {\n                form[index].linearSetting.push({ id: uuidv4(), stepID: '', stepIDCheck: false, funcsSettings: [{ fid: uuidv4(), funcName: '', funcP: '', funcNameCheck: false }] });\n            }\n            console.log(form)\n            dispatch({ type: 'UPDATE_STEPSETS', data: form })\n            setStepNum(value);\n        } else if (stepNum > value && value >= 1) {\n            console.log(inputStates)\n            let form = [...inputStates];\n            for (let i = 0; i < stepNum - value; i++) {\n                form[index].linearSetting.pop();\n            }\n            dispatch({ type: 'UPDATE_STEPSETS', data: form })\n            setStepNum(value);\n        }\n    }\n\n    //  console.log(inputStates)\n    return (\n        <Container maxWidth=\"sm\">\n            <form className={classes.root}>\n                {inputStates.map((inputField, index) => (\n                    <div key={inputField.id}>\n                        <h4>Pipe-segment {index + 1}</h4>\n                        <TextField\n                            error={inputField.stepIDCheck}\n                            name=\"stepID\"\n                            label=\"pipeSegment Description Label\"\n                            variant=\"filled\"\n                            helperText={inputField.stepIDCheck ? 'The field cannot be empty. Please enter a value' : \"describe main work in this pipeSegment, eg.'_load'\"}\n                            value={inputField.stepID}\n                            onChange={event => handleLinearPipesInput(inputField.id, event)}\n                        />\n                        <h5>Define hierarchy</h5>\n                        <TextField\n                            error={inputField.pipeSegmentIDCheck}\n                            name=\"pipeSegmentID\"\n                            label=\"pipeSegment ID\"\n                            variant=\"filled\"\n                            helperText={inputField.pipeSegmentIDCheck ? 'The field cannot be empty. Please enter a value' : \"ID of this pipeSegment, eg.'pipe2'\"}\n                            value={inputField.pipeSegmentID}\n                            onChange={event => handleLinearPipesInput(inputField.id, event)}\n                        />\n                        <TextField\n                            error={inputField.pipeSegment_srcidCheck}\n                            name=\"pipeSegment_srcid\"\n                            label=\"pipeSegment Srcid\"\n                            variant=\"filled\"\n                            helperText={inputField.pipeSegment_srcidCheck ? 'The field cannot be empty. Please enter a value' : \"Describe the hierarchy relationship between other pipeSegment, you should input [Set Function ID] of the previously executed pipe, for example, if the current pipeSegment runs after pipe2, then the input should be 'pipe2', the first pipeSegment doesn't need this, leave it empty is ok.\"}\n                            value={inputField.pipeSegment_srcid}\n                            onChange={event => handleLinearPipesInput(inputField.id, event)}\n                        />\n                        <h5>Define pipeline</h5>\n                        <FormControl variant=\"outlined\" className={classes.formControl}>\n                            <InputLabel > {'stepSet number'}</InputLabel>\n                            <Select\n                                native\n                                value={stepNum}\n                                onChange={e => handleChangeStepSets(e, index)}\n                                label=\"stepSet number\"\n                                inputProps={{\n                                    name: 'stepNum',\n                                }}\n                            >\n                                {\n                                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(i => {\n                                        return <option key={i} value={i}>{i}</option>\n                                    })\n                                }\n                            </Select>\n                        </FormControl>\n                        <LinearPipesForm\n                            ifLinear={false}\n                            index={index}\n                            mid={inputField.id} />\n                    </div>\n                ))}\n            </form>\n        </Container>\n    );\n}\n\nexport default BranchPipesForm;","const BranchTemplate = (basicInfo, inputFields) => {\n\n    let HYDRA_presetting = new Array([]);\n    let pipeArr = '';\n    let branchSrcInfo = {};\n    let subfuncs = new Array([]);\n\n    if (basicInfo.checkedHYDRA) {\n        HYDRA_presetting.push(`HYDRA = true;`);\n        HYDRA_presetting.push(`PARAM = param_sweep_setup(project_dir);`);\n        HYDRA_presetting.push(`Cfg.HYDRA.ifapply = HYDRA;`);\n        HYDRA_presetting.push(`Cfg.HYDRA.chanloc = '${basicInfo.eegChanloc}';`);\n        HYDRA_presetting.push(`Cfg.HYDRA.PARAM = PARAM;`);\n        HYDRA_presetting.push(`Cfg.HYDRA.FULL_CLEAN_SEED = false;`);\n        if (basicInfo.checkHydraTimeRange && !basicInfo.checkHydraCleanSeed) {\n            HYDRA_presetting.push(`Cfg.HYDRA.provide_seed_timerange = true;`)\n            HYDRA_presetting.push(`Cfg.HYDRA.cleanseed_timerange = ${basicInfo.checkHydraTimeRange};`);\n        } else if (basicInfo.checkHydraCleanSeed && !basicInfo.checkHydraTimeRange) {\n            HYDRA_presetting.push(`Cfg.HYDRA.provide_seed_timerange = false;`)\n            HYDRA_presetting.push(`Cfg.HYDRA.seed_fname = ${basicInfo.checkHydraCleanSeed};`);\n        }\n    }\n\n    inputFields.forEach((inputField, index) => {\n        let stepSetsArray = new Array([]);\n        let ctap_args = new Array([]);\n        let funcs = ``;\n        let subpipe = \"@sbf_\" + inputField.subfID + \", \";\n        console.log(subpipe);\n        pipeArr = pipeArr + subpipe;\n\n        let srcid;\n        if (index == 0) {\n            branchSrcInfo[inputField.subfID] = {\n                '0': \"\".concat(1, inputField.stepID),\n                '1': \"\"\n            };\n            srcid = \"\";\n        } else {\n            branchSrcInfo[inputField.subfID] = {\n                '0': \"\".concat(1, inputField.stepID),\n                '1': \"\".concat(branchSrcInfo[inputField.subf_srcid]['1'], inputField.subf_srcid, '#')\n            };\n            srcid = \"\".concat(branchSrcInfo[inputField.subfID]['1'], branchSrcInfo[inputField.subf_srcid]['0']);\n        };\n\n        console.log(srcid);\n\n        inputField.funcsSettings.forEach(funcsSetting => {\n            funcs = funcs + `@${funcsSetting.funcName}, `;\n            let funcN = funcsSetting.funcName;\n            if (funcN) {\n                funcN = funcN.slice(5, funcN.length)\n            }\n            ctap_args.push(`out.${funcN}=struct(${funcsSetting.funcP})`)\n        });\n\n        stepSetsArray.push(`stepSet(${index + 1}).id = [num2str(${index + 1}), '${inputField.stepID}'];`);\n        stepSetsArray.push(`stepSet(${index + 1}).funH{${funcs}};`);\n        console.log([stepSetsArray.join('\\n')]);\n        console.log(ctap_args);\n        //sub_func\n        let subfunc = new Array(\n            `function [Cfg, out] = sbf_${inputField.subfID}(Cfg)`,\n            `   %%%%%%%% Define hierarchy %%%%%%%%`,\n            `   Cfg.id = '${inputField.subfID}';`,\n            `   Cfg.srcid = {${srcid}};`,\n            `   %%%%%%%% Define pipeline %%%%%%%%`,\n            `   i = 1; %stepSet 1`,\n            `   ${stepSetsArray.join('\\n')}`,\n            `   `,\n            `   ${[ctap_args.join('\\n')]}`,\n            `   Cfg.pipe.runSets = {stepSet(:).id};`,\n            `   Cfg.pipe.stepSets = stepSet;`,\n            `end`\n        )\n        subfuncs.push(`${subfunc.join('\\n')}`);\n    })\n\n    pipeArr = `pipeArr = {${pipeArr}};`\n\n    let results = new Array(\n        `pipeline_name = '${basicInfo.pipelineName}';`,\n        `FILE_ROOT = mfilename('fullpath');`,\n        `reporoot = FILE_ROOT(1:strfind(FILE_ROOT, fullfile('ctap', 'templates', '${basicInfo.projectRoot}', 'ctap_linear_template')) - 1);`,\n        `project_dir = FILE_ROOT(1:strfind(FILE_ROOT, fullfile('ctap_linear_template')) - 1);`,\n        `data_dir = append(reporoot,'ctap/data/test_data');`,\n        `PREPRO = true;`,\n        `STOP_ON_ERROR = false;`,\n        `OVERWRITE_OLD_RESULTS = true;`,\n        `[Cfg, ~] = sbf_cfg(project_dir, pipeline_name);`,\n        `Cfg.grfx.on = false;`,\n        `Cfg.MC = get_meas_cfg_MC(Cfg, data_dir, 'eeg_ext', '${basicInfo.eegType}', 'sbj_filt', ${basicInfo.sbj_filt});`,\n        `${HYDRA_presetting.join('\\n')}`,\n        `clear Pipe;`,\n        `${pipeArr}`,\n        `runps = 1:length(pipeArr);`,\n        `if PREPRO`,\n        `   CTAP_pipeline_brancher(Cfg, pipeArr, 'runPipes', runps, 'dbg', STOP_ON_ERROR, 'ovw', OVERWRITE_OLD_RESULTS);`,\n        `end`,\n        `%% Subfunctions`,\n        `function [Cfg, out] = sbf_cfg(project_root_folder, ID)`,\n        `   Cfg.id = ID;`,\n        `   Cfg.srcid = {''};`,\n        `   Cfg.env.paths.projectRoot = project_root_folder;`,\n        `   % Define important directories and files`,\n        `   Cfg.env.paths.branchSource = '';`,\n        `   Cfg.env.paths.ctapRoot = fullfile(Cfg.env.paths.projectRoot, Cfg.id);`,\n        `   Cfg.env.paths.analysisRoot = Cfg.env.paths.ctapRoot;`,\n        `   Cfg.eeg.chanlocs = '${basicInfo.eegChanloc}';`,\n        `   Cfg.eeg.reference = ${basicInfo.eegReference};`,\n        `   Cfg.eeg.veogChannelNames = ${basicInfo.eegVeogChannelNames};`,\n        `   Cfg.eeg.heogChannelNames = ${basicInfo.eegHeogChannelNames};`,\n        `   out = struct([]);`,\n        `end`,\n        `${subfuncs.join('\\n')}`,\n    );\n    return results;\n\n};\n\nexport default BranchTemplate;\n\n// linearStepInfo","import React, { useState, useEffect, useReducer, useContext } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport BasicInfo from \"./BasicInfo\";\nimport LinearTemplate from \"./LinearTemplate\";\nimport Steppers from \"./Stepper\";\nimport LinearPipesForm from \"./LinearPipesForm\";\nimport BranchPipesForm from \"./BranchPipesForm\";\nimport BranchTemplate from \"./BranchTemplate\"\n\nimport { ContextBranch, ContextLinear } from './ContextProvider'\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 200,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n\n    button: {\n        margin: theme.spacing(2),\n    }\n}));\n\nexport default function Main() {\n    const classes = useStyles();\n\n    const [inputLinearStates, dispatchL] = useContext(ContextLinear);\n    const [inputBranchStates, dispatchB] = useContext(ContextBranch);\n    const [activeStep, setActiveStep] = useState(0);\n    const [downloadLink, setDownloadLink] = useState('');\n    const [stepNum, setStepNum] = useState(1);\n    const [isReadyDownload, setIsReadyDownload] = useState(false);\n    const [basicInfoInput, setBasicInfoInput] = useReducer(\n        (state, newState) => ({ ...state, ...newState }),\n        {\n            checkedLinear: true,\n            checkedBranch: false,\n            checkedHYDRA: true,\n            HydraOptionA: true,\n            HydraOptionB: false,\n            checkHydraTimeRange: \"\",\n            checkHydraCleanSeed: \"\",\n            pipelineName: \"\",\n            projectRoot: \"\",\n            sbj_filt: \"\",\n            eegType: \"\",\n            eegChanloc: \"\",\n            eegReference: \"\",\n            eegVeogChannelNames: \"\",\n            eegHeogChannelNames: \"\"\n        }\n    );\n    const [basicInfoInputCheck, setBasicInfoInputCheck] = useReducer(\n        (state, newState) => ({ ...state, ...newState }),\n        {\n            checkHydraTimeRange: false,\n            checkHydraCleanSeed: false,\n            pipelineName: false,\n            projectRoot: false,\n            sbj_filt: false,\n            eegType: false,\n            eegChanloc: false,\n            eegReference: false,\n            eegVeogChannelNames: false,\n            eegHeogChannelNames: false\n        }\n    );\n\n    const [inputStates, setInputStates] = useState(() => {\n        if (basicInfoInput.checkedLinear) {\n            return inputLinearStates;\n        } else {\n            return inputBranchStates;\n        }\n    });\n\n\n    useEffect(() => {\n        if (basicInfoInput.checkedLinear) {\n            setInputStates(inputLinearStates);\n        } else {\n            setInputStates(inputBranchStates);\n        }\n    }, [basicInfoInput.checkedLinear, inputLinearStates, inputBranchStates])\n\n    useEffect(() => {\n        setDownloadLink('');\n        setIsReadyDownload(false);\n    }, [basicInfoInput.checkedLinear])\n\n    // use localstorage save last edit  \n    useEffect(() => {\n        if (localStorage.getItem(\"basicInfoInput\")) {\n            setBasicInfoInput(JSON.parse(localStorage.getItem(\"basicInfoInput\")));\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem(\"basicInfoInput\", JSON.stringify(basicInfoInput))\n    }, [basicInfoInput])\n\n    // make text file\n    const makeTextFile = (basicInfoInput, inputStates) => {\n        let list;\n        if (basicInfoInput.checkedLinear) {\n            list = LinearTemplate(basicInfoInput, inputStates);\n        } else {\n            list = BranchTemplate(basicInfoInput, inputStates);\n        };\n        const data = new Blob([list.join('\\n')], { type: 'text/plain' });\n        if (downloadLink !== '') window.URL.revokeObjectURL(downloadLink);\n        return window.URL.createObjectURL(data);\n\n    };\n\n    //input check\n    const inputCheck = () => {\n        let result = true;\n        let newS = {};\n        if (activeStep === 0) {\n            const values = { ...basicInfoInputCheck }\n            for (const [key, value] of Object.entries(values)) {\n                if (basicInfoInput[key] === null || basicInfoInput[key].length === 0) {\n                    if (basicInfoInput.checkedHYDRA) {\n                        if (key === 'checkHydraTimeRange' && basicInfoInput.HydraOptionB) {\n                            newS = { ...newS, [key]: false };\n                        } else if (key === 'checkHydraCleanSeed' && basicInfoInput.HydraOptionA) {\n                            newS = { ...newS, [key]: false };\n                        }else{\n                            newS = { ...newS, [key]: true };\n                        }\n                    } else {\n                        if (key === 'checkHydraTimeRange' || key === 'checkHydraCleanSeed') {\n                            newS = { ...newS, [key]: false };\n                        } else {\n                            newS = { ...newS, [key]: true };\n                        }\n                    }\n                }\n            }\n            result = Object.values(newS).every((value) => value === false);\n            setBasicInfoInputCheck({ ...basicInfoInputCheck, ...newS });\n        } else if (activeStep === 1) {\n            const newInputFields = inputStates.map((i,index) => {\n                console.log(i);\n                i.stepID.length ? i.stepIDCheck = false : (() => { i.stepIDCheck = true; result = false })()\n                if (basicInfoInput.checkedBranch) {\n                    if(index === 0){\n                        i.pipeSegment_srcidCheck = false;\n                        result = true;\n                        i.pipeSegmentID.length ? i.pipeSegmentIDCheck = false : (() => { i.pipeSegmentIDCheck = true; result = false })()\n                    }else{\n                        i.pipeSegment_srcid.length ? i.pipeSegment_srcidCheck = false : (() => { i.pipeSegment_srcidCheck = true; result = false })();\n                        i.pipeSegmentID.length ? i.pipeSegmentIDCheck = false : (() => { i.pipeSegmentIDCheck = true; result = false })()\n                    }\n                }\n                i.linearSetting.forEach(l => {\n                    l.funcsSettings.forEach(f => {\n                        f.funcName.length ? f.funcNameCheck = false : (() => { f.funcNameCheck = true; result = false })()\n                    })\n                })\n                return i;\n            })\n            dispatchL({ type: 'UPDATE_STEPSETS', data: newInputFields })\n        }\n\n        return result;\n    }\n\n    //steppers handler\n    const handleNext = () => {\n        //first run input check\n        let p = inputCheck();\n        if (p) {\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        } else {\n            alert(\"check your input\");\n        }\n\n    };\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n    const handleReset = () => {\n        setActiveStep(0);\n    };\n\n    // LinearPipesForm handles\n    async function handleSubmit() {\n        let downloadlink = await makeTextFile(basicInfoInput, inputStates);\n        setDownloadLink(downloadlink);\n        setIsReadyDownload(true);\n    };\n\n    const handleChangeStepSets = (e) => {\n        const { value } = e.target;\n        if (stepNum < value) {\n            let form = [...inputStates];\n            if (basicInfoInput.checkedLinear) {\n                for (let i = stepNum; i < value; i++) {\n                    form.push({ id: uuidv4(), stepID: '', stepIDCheck: false, funcsSettings: [{ fid: uuidv4(), funcName: '', funcP: '', funcNameCheck: false }] });\n                }\n                dispatchL({ type: 'UPDATE_STEPSETS', data: form })\n            } else { \n                for (let i = stepNum; i < value; i++) {\n                    form.push({ id: uuidv4(), pipeSegment_srcid: '', pipeSegmentID: '', stepID: '', pipeSegment_srcidCheck:false, pipeSegmentIDCheck:false, stepIDCheck:false, linearSetting:[{ id: uuidv4(), stepID: '', stepIDCheck:false, funcsSettings: [{ fid: uuidv4(), funcName: '', funcP: '', funcNameCheck:false}] }] });\n                }\n                console.log(form)\n                dispatchB({ type: 'UPDATE_STEPSETS', data: form })\n            }\n            setStepNum(value);\n        } else if (stepNum > value && value >= 1) {\n            console.log(inputStates)\n            let form = [...inputStates];\n            for (let i = 0; i < stepNum - value; i++) {\n                form.pop();\n            }\n            if(basicInfoInput.checkedLinear){\n                dispatchL({ type: 'UPDATE_STEPSETS', data: form });\n            }else{\n                dispatchB({ type: 'UPDATE_STEPSETS', data: form })\n            }\n            setStepNum(value);\n        }\n    }\n\n    \n\n\n    return (\n        <div>\n            <div>\n                \n\n                {activeStep === 0 ? (\n                    <BasicInfo\n                        inputValue={basicInfoInput}\n                        setBasicInfoInput={setBasicInfoInput}\n                        basicInfoInputCheck={basicInfoInputCheck}\n                        setBasicInfoInputCheck={setBasicInfoInputCheck}\n                    />\n                ) : activeStep === 1 ? (\n                    <Container>\n                        {basicInfoInput.checkedLinear ?\n                            <h3>Linear Pipeline Setting</h3>\n                            :\n                            <h3>Branch Pipeline Setting</h3>}\n\n                        <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <InputLabel > {basicInfoInput.checkedBranch ? 'pipeSegments' : 'stepSet number' }</InputLabel>\n                            <Select\n                                native\n                                value={stepNum}\n                                onChange={e => handleChangeStepSets(e)}\n                                label=\"stepSet number\"\n                                inputProps={{\n                                    name: 'stepNum',\n                                }}\n                            >\n                                {\n                                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(i => {\n                                        return <option key={i} value={i}>{i}</option>\n                                    })\n                                }\n                            </Select>\n                        </FormControl>\n                        {basicInfoInput.checkedLinear ?\n                            <LinearPipesForm\n                                ifLinear={true}\n                                index={0}\n                                mid={0} />\n                            :\n                            <BranchPipesForm />}\n\n                    </Container>\n                ) : activeStep === 2 ? (\n                    <div>\n                        <Button\n                            className={classes.button}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            type=\"submit\"\n                            onClick={handleSubmit}\n                        >Generate</Button>\n                        <div>\n                            {isReadyDownload ?\n                                <a download='ctap_linear_template.m' href={downloadLink} className={classes.downloadButton}> download </a> : null\n                            }\n                        </div>\n\n\n                    </div>\n\n\n                ) : null\n\n                }\n\n            </div>\n            <Steppers\n                activeStep={activeStep}\n                handleBack={handleBack}\n                handleNext={handleNext}\n                handleReset={handleReset}\n            />\n\n        </div>\n    );\n\n\n\n\n}","import React, { useState, useEffect } from \"react\";\nimport {Link} from \"react-router-dom\"\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Check from \"@material-ui/icons/Check\";\nimport clsx from \"clsx\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        marginTop: 50\n    },\n    button: {\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    actionsContainer: {\n        marginBottom: theme.spacing(2),\n    },\n    resetContainer: {\n        padding: theme.spacing(3),\n    }\n}));\n\nexport const useQontoStepIconStyles = makeStyles({\n    root: {\n        color: \"#eaeaf0\",\n        display: \"flex\",\n        height: 30,\n        alignItems: \"center\"\n    },\n    active: {\n        color: \"#784af4\"\n    },\n    circle: {\n        width: 24,\n        height: 24,\n        borderRadius: \"50%\",\n        backgroundColor: \"currentColor\"\n    },\n    completed: {\n        color: \"#784af4\",\n        zIndex: 1,\n        fontSize: 24\n    }\n});\n\nfunction QontoStepIcon(props) {\n    const classes = useQontoStepIconStyles();\n    const { active, completed } = props;\n\n    return (\n        <div\n            className={clsx(classes.root, {\n                [classes.active]: active\n            })}\n        >\n            {completed ? (\n                <Check className={classes.completed} />\n            ) : (\n                    <div className={classes.circle} />\n                )}\n        </div>\n    );\n}\n\nfunction getSteps() {\n    return ['Get CTAP Ready', 'Get EEGLAB Ready', 'Create Execution Folder'];\n}\n\nfunction getStepContent(step) {\n    switch (step) {\n        case 0:\n            return (\n                <div style={{ marginLeft: '2rem', marginTop: '1rem' }}>\n                    <Typography variant=\"body1\" align=\"left\">Follow the instruction of <a rel=\"noreferrer\" target=\"_blank\" href=\"https://github.com/bwrc/ctap\">the CTAP repo</a>, download CTAP and setup your MATLAB work environment</Typography>\n                </div>\n            );\n        case 1:\n            return (\n                <div style={{ marginLeft: '2rem', marginTop: '1rem' }}>\n                    <Typography variant=\"body1\" align=\"left\">You need to have latest EEGLAB added to your Matlab path (<a rel=\"noreferrer\" target=\"_blank\" href='https://sccn.ucsd.edu/eeglab/downloadtoolbox.php'>instructions here</a>).</Typography>\n                    <Typography variant=\"body1\" align=\"left\">Everytime before run CTAP scripts, type <i><b>eeglab</b></i> and press enter on the Matlab command line.</Typography>\n                </div>\n            );\n        case 2:\n            return (\n                <div style={{ marginLeft: '2rem', marginTop: '1rem' }}>\n                    <Typography variant=\"body1\" align=\"left\">To generate CTAP example script, you need create a new project folder under <i><b>~/ctap/templates</b></i>.</Typography>\n                    <Typography variant=\"body1\" align=\"left\">After that, copy/cut your test data to <i><b>~/ctap/data/test_data</b></i></Typography>\n                    <Typography variant=\"body1\" align=\"left\">If you have a corrsponding channel location file, please copy it to <i><b>~/ctap/res</b></i>, and add its name manually in the later process</Typography>\n                </div>\n            );\n        default:\n            return 'Unknown step';\n    }\n}\n\nconst IntroPage = () => {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n    const steps = getSteps();\n\n    const handleNext = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    const handleReset = () => {\n        setActiveStep(0);\n    };\n\n    return (\n        <Container maxWidth=\"sm\">\n            <div style={{ marginTop: 70 }}>\n                <Typography variant='h5'>The CTAP Code Generation Tool is used to show users how CTAP code works and some core ideas of CTAP programming.</Typography>\n            </div>\n            <div className={classes.root}>\n                <Stepper activeStep={activeStep} orientation=\"vertical\">\n                    {steps.map((label, index) => (\n                        <Step key={label}>\n                            <StepLabel StepIconComponent={QontoStepIcon}><Typography variant=\"h6\">{label}</Typography></StepLabel>\n                            <StepContent>\n                                {getStepContent(index)}\n                                <div className={classes.actionsContainer}>\n                                    <div style={{ marginTop: '1rem' }}>\n                                        <Button\n                                            disabled={activeStep === 0}\n                                            onClick={handleBack}\n                                            className={classes.button}\n                                        >\n                                            Back\n                                        </Button>\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            onClick={handleNext}\n                                            className={classes.button}\n                                        >\n                                            {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                                        </Button>\n                                    </div>\n                                </div>\n                            </StepContent>\n                        </Step>\n                    ))}\n                </Stepper>\n                {activeStep === steps.length && (\n                    <Paper square elevation={0} className={classes.resetContainer}>\n                        <Typography variant='h6'>All steps completed - Now Let's step to</Typography>\n                        <Typography variant='h6'>CTAP CODE GNERATION!</Typography>\n                        <div style={{ marginTop: '1rem' }}>\n                            <Button onClick={handleReset} className={classes.button}>\n                                Reset\n                            </Button>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.button}\n                            ><Link to=\"/start\" style={{ textDecoration: 'none', color: 'inherit' }}>\n                                    Proceed\n                            </Link>\n                            </Button>\n                        </div>\n\n                    </Paper>\n                )}\n            </div>\n        </Container>\n\n    )\n}\n\nexport default IntroPage;","import React from 'react';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\n\nimport './App.css';\nimport Main from './Components/Main.js';\nimport IntroPage from './Components/IntroPage';\nimport ContextProvider from './Components/ContextProvider'\nimport Typography from \"@material-ui/core/Typography\";\n\nfunction App() {\n\n  return (\n\n    <ContextProvider>\n      <HashRouter basename='/'>\n        <Typography variant='h2' align=\"center\" style={{marginTop: '2rem'}}>CTAP Code Generation Tool</Typography>\n        <h2 align=\"center\"></h2>\n        <div className=\"App\">\n          <Route exact path=\"/\" component={IntroPage} />\n          <Route path='/start' component={Main} />\n        </div>\n      </HashRouter>\n    </ContextProvider>\n\n\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter >\n      <App />\n  </BrowserRouter>, \n  document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}